
LedCube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033a6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  000033a6  0000345a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000085  0080008c  0080008c  00003486  2**0
                  ALLOC
  3 .eeprom       000001ff  00810000  00810000  00003486  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00003685  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000036b8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000310  00000000  00000000  000036f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005354  00000000  00000000  00003a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001032  00000000  00000000  00008d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002b17  00000000  00000000  00009d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001050  00000000  00000000  0000c8a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000109a  00000000  00000000  0000d8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000070ec  00000000  00000000  0000e992  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000380  00000000  00000000  00015a7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__ctors_end>
       4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
       8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
       c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      10:	0c 94 6e 18 	jmp	0x30dc	; 0x30dc <__vector_4>
      14:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      18:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      1c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      20:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      28:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <__vector_10>
      2c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      30:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      34:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      3c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      40:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      44:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      4c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      50:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      54:	83 05       	cpc	r24, r3
      56:	88 05       	cpc	r24, r8
      58:	91 05       	cpc	r25, r1
      5a:	99 05       	cpc	r25, r9
      5c:	b2 05       	cpc	r27, r2
      5e:	b9 05       	cpc	r27, r9
      60:	c6 05       	cpc	r28, r6
      62:	c9 05       	cpc	r28, r9
      64:	d9 05       	cpc	r29, r9
      66:	e1 05       	cpc	r30, r1
      68:	09 06       	cpc	r0, r25
      6a:	2d 06       	cpc	r2, r29
      6c:	2a 07       	cpc	r18, r26
      6e:	76 06       	cpc	r7, r22
      70:	7b 06       	cpc	r7, r27
      72:	83 06       	cpc	r8, r19
      74:	90 06       	cpc	r9, r16
      76:	df 06       	cpc	r13, r31
      78:	e7 06       	cpc	r14, r23
      7a:	f0 06       	cpc	r15, r16
      7c:	fd 06       	cpc	r15, r29
      7e:	0d 07       	cpc	r16, r29
      80:	16 07       	cpc	r17, r22
      82:	1b 07       	cpc	r17, r27
      84:	23 07       	cpc	r18, r19
      86:	00 07       	cpc	r16, r16
      88:	31 07       	cpc	r19, r17

0000008a <__trampolines_end>:
      8a:	07 06       	cpc	r0, r23
      8c:	05 04       	cpc	r0, r5
      8e:	03 02       	muls	r16, r19
      90:	01 00       	.word	0x0001	; ????
      92:	10 20       	and	r1, r0
      94:	30 40       	sbci	r19, 0x00	; 0
      96:	50 60       	ori	r21, 0x00	; 0
      98:	70 71       	andi	r23, 0x10	; 16
      9a:	72 73       	andi	r23, 0x32	; 50
      9c:	74 75       	andi	r23, 0x54	; 84
      9e:	76 77       	andi	r23, 0x76	; 118
      a0:	67 57       	subi	r22, 0x77	; 119
      a2:	47 37       	cpi	r20, 0x77	; 119
      a4:	27 17       	cp	r18, r23
      a6:	04 03       	mulsu	r16, r20
      a8:	12 21       	and	r17, r2
      aa:	30 40       	sbci	r19, 0x00	; 0
      ac:	51 62       	ori	r21, 0x21	; 33
      ae:	73 74       	andi	r23, 0x43	; 67
      b0:	65 56       	subi	r22, 0x65	; 101
      b2:	47 37       	cpi	r20, 0x77	; 119
      b4:	26 15       	cp	r18, r6

000000b6 <__ctors_end>:
      b6:	11 24       	eor	r1, r1
      b8:	1f be       	out	0x3f, r1	; 63
      ba:	cf e5       	ldi	r28, 0x5F	; 95
      bc:	d8 e0       	ldi	r29, 0x08	; 8
      be:	de bf       	out	0x3e, r29	; 62
      c0:	cd bf       	out	0x3d, r28	; 61

000000c2 <__do_copy_data>:
      c2:	10 e0       	ldi	r17, 0x00	; 0
      c4:	a0 e6       	ldi	r26, 0x60	; 96
      c6:	b0 e0       	ldi	r27, 0x00	; 0
      c8:	e6 ea       	ldi	r30, 0xA6	; 166
      ca:	f3 e3       	ldi	r31, 0x33	; 51
      cc:	02 c0       	rjmp	.+4      	; 0xd2 <__do_copy_data+0x10>
      ce:	05 90       	lpm	r0, Z+
      d0:	0d 92       	st	X+, r0
      d2:	ac 38       	cpi	r26, 0x8C	; 140
      d4:	b1 07       	cpc	r27, r17
      d6:	d9 f7       	brne	.-10     	; 0xce <__do_copy_data+0xc>

000000d8 <__do_clear_bss>:
      d8:	21 e0       	ldi	r18, 0x01	; 1
      da:	ac e8       	ldi	r26, 0x8C	; 140
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
      e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
      e2:	a1 31       	cpi	r26, 0x11	; 17
      e4:	b2 07       	cpc	r27, r18
      e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>
      e8:	0e 94 55 18 	call	0x30aa	; 0x30aa <main>
      ec:	0c 94 d1 19 	jmp	0x33a2	; 0x33a2 <_exit>

000000f0 <__bad_interrupt>:
      f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f4 <_Z7inrangeiii>:
		y = (xy*(x-x1))+y1;
		z = (xz*(x-x1))+z1;
		setvoxel(x,y,z);
	}
	
}
      f4:	08 97       	sbiw	r24, 0x08	; 8
      f6:	48 f4       	brcc	.+18     	; 0x10a <_Z7inrangeiii+0x16>
      f8:	68 30       	cpi	r22, 0x08	; 8
      fa:	71 05       	cpc	r23, r1
      fc:	40 f4       	brcc	.+16     	; 0x10e <_Z7inrangeiii+0x1a>
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	48 30       	cpi	r20, 0x08	; 8
     102:	51 05       	cpc	r21, r1
     104:	28 f0       	brcs	.+10     	; 0x110 <_Z7inrangeiii+0x1c>
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	08 95       	ret
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	08 95       	ret
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	08 95       	ret

00000112 <_Z8setvoxeliii>:
     112:	ff 92       	push	r15
     114:	0f 93       	push	r16
     116:	1f 93       	push	r17
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	f8 2e       	mov	r15, r24
     11e:	8b 01       	movw	r16, r22
     120:	ea 01       	movw	r28, r20
     122:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z7inrangeiii>
     126:	88 23       	and	r24, r24
     128:	a1 f0       	breq	.+40     	; 0x152 <_Z8setvoxeliii+0x40>
     12a:	cc 0f       	add	r28, r28
     12c:	dd 1f       	adc	r29, r29
     12e:	cc 0f       	add	r28, r28
     130:	dd 1f       	adc	r29, r29
     132:	cc 0f       	add	r28, r28
     134:	dd 1f       	adc	r29, r29
     136:	c3 53       	subi	r28, 0x33	; 51
     138:	df 4f       	sbci	r29, 0xFF	; 255
     13a:	c0 0f       	add	r28, r16
     13c:	d1 1f       	adc	r29, r17
     13e:	28 81       	ld	r18, Y
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	02 c0       	rjmp	.+4      	; 0x14a <_Z8setvoxeliii+0x38>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fa 94       	dec	r15
     14c:	e2 f7       	brpl	.-8      	; 0x146 <_Z8setvoxeliii+0x34>
     14e:	82 2b       	or	r24, r18
     150:	88 83       	st	Y, r24
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	1f 91       	pop	r17
     158:	0f 91       	pop	r16
     15a:	ff 90       	pop	r15
     15c:	08 95       	ret

0000015e <_Z11tmpsetvoxeliii>:
     15e:	ff 92       	push	r15
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	f8 2e       	mov	r15, r24
     16a:	8b 01       	movw	r16, r22
     16c:	ea 01       	movw	r28, r20
     16e:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z7inrangeiii>
     172:	88 23       	and	r24, r24
     174:	a1 f0       	breq	.+40     	; 0x19e <_Z11tmpsetvoxeliii+0x40>
     176:	cc 0f       	add	r28, r28
     178:	dd 1f       	adc	r29, r29
     17a:	cc 0f       	add	r28, r28
     17c:	dd 1f       	adc	r29, r29
     17e:	cc 0f       	add	r28, r28
     180:	dd 1f       	adc	r29, r29
     182:	c3 57       	subi	r28, 0x73	; 115
     184:	df 4f       	sbci	r29, 0xFF	; 255
     186:	c0 0f       	add	r28, r16
     188:	d1 1f       	adc	r29, r17
     18a:	28 81       	ld	r18, Y
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	02 c0       	rjmp	.+4      	; 0x196 <_Z11tmpsetvoxeliii+0x38>
     192:	88 0f       	add	r24, r24
     194:	99 1f       	adc	r25, r25
     196:	fa 94       	dec	r15
     198:	e2 f7       	brpl	.-8      	; 0x192 <_Z11tmpsetvoxeliii+0x34>
     19a:	82 2b       	or	r24, r18
     19c:	88 83       	st	Y, r24
     19e:	df 91       	pop	r29
     1a0:	cf 91       	pop	r28
     1a2:	1f 91       	pop	r17
     1a4:	0f 91       	pop	r16
     1a6:	ff 90       	pop	r15
     1a8:	08 95       	ret

000001aa <_Z8clrvoxeliii>:
     1aa:	ff 92       	push	r15
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	f8 2e       	mov	r15, r24
     1b6:	8b 01       	movw	r16, r22
     1b8:	ea 01       	movw	r28, r20
     1ba:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z7inrangeiii>
     1be:	88 23       	and	r24, r24
     1c0:	a9 f0       	breq	.+42     	; 0x1ec <_Z8clrvoxeliii+0x42>
     1c2:	cc 0f       	add	r28, r28
     1c4:	dd 1f       	adc	r29, r29
     1c6:	cc 0f       	add	r28, r28
     1c8:	dd 1f       	adc	r29, r29
     1ca:	cc 0f       	add	r28, r28
     1cc:	dd 1f       	adc	r29, r29
     1ce:	c3 53       	subi	r28, 0x33	; 51
     1d0:	df 4f       	sbci	r29, 0xFF	; 255
     1d2:	c0 0f       	add	r28, r16
     1d4:	d1 1f       	adc	r29, r17
     1d6:	28 81       	ld	r18, Y
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <_Z8clrvoxeliii+0x38>
     1de:	88 0f       	add	r24, r24
     1e0:	99 1f       	adc	r25, r25
     1e2:	fa 94       	dec	r15
     1e4:	e2 f7       	brpl	.-8      	; 0x1de <_Z8clrvoxeliii+0x34>
     1e6:	80 95       	com	r24
     1e8:	82 23       	and	r24, r18
     1ea:	88 83       	st	Y, r24
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	1f 91       	pop	r17
     1f2:	0f 91       	pop	r16
     1f4:	ff 90       	pop	r15
     1f6:	08 95       	ret

000001f8 <_Z11tmpclrvoxeliii>:
     1f8:	ff 92       	push	r15
     1fa:	0f 93       	push	r16
     1fc:	1f 93       	push	r17
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
     202:	f8 2e       	mov	r15, r24
     204:	8b 01       	movw	r16, r22
     206:	ea 01       	movw	r28, r20
     208:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z7inrangeiii>
     20c:	88 23       	and	r24, r24
     20e:	a9 f0       	breq	.+42     	; 0x23a <_Z11tmpclrvoxeliii+0x42>
     210:	cc 0f       	add	r28, r28
     212:	dd 1f       	adc	r29, r29
     214:	cc 0f       	add	r28, r28
     216:	dd 1f       	adc	r29, r29
     218:	cc 0f       	add	r28, r28
     21a:	dd 1f       	adc	r29, r29
     21c:	c3 57       	subi	r28, 0x73	; 115
     21e:	df 4f       	sbci	r29, 0xFF	; 255
     220:	c0 0f       	add	r28, r16
     222:	d1 1f       	adc	r29, r17
     224:	28 81       	ld	r18, Y
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	02 c0       	rjmp	.+4      	; 0x230 <_Z11tmpclrvoxeliii+0x38>
     22c:	88 0f       	add	r24, r24
     22e:	99 1f       	adc	r25, r25
     230:	fa 94       	dec	r15
     232:	e2 f7       	brpl	.-8      	; 0x22c <_Z11tmpclrvoxeliii+0x34>
     234:	80 95       	com	r24
     236:	82 23       	and	r24, r18
     238:	88 83       	st	Y, r24
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	1f 91       	pop	r17
     240:	0f 91       	pop	r16
     242:	ff 90       	pop	r15
     244:	08 95       	ret

00000246 <_Z8getvoxeliii>:
     246:	ff 92       	push	r15
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	f8 2e       	mov	r15, r24
     252:	8b 01       	movw	r16, r22
     254:	ea 01       	movw	r28, r20
     256:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z7inrangeiii>
     25a:	88 23       	and	r24, r24
     25c:	91 f0       	breq	.+36     	; 0x282 <_Z8getvoxeliii+0x3c>
     25e:	cc 0f       	add	r28, r28
     260:	dd 1f       	adc	r29, r29
     262:	cc 0f       	add	r28, r28
     264:	dd 1f       	adc	r29, r29
     266:	cc 0f       	add	r28, r28
     268:	dd 1f       	adc	r29, r29
     26a:	c3 53       	subi	r28, 0x33	; 51
     26c:	df 4f       	sbci	r29, 0xFF	; 255
     26e:	c0 0f       	add	r28, r16
     270:	d1 1f       	adc	r29, r17
     272:	88 81       	ld	r24, Y
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	02 c0       	rjmp	.+4      	; 0x27c <_Z8getvoxeliii+0x36>
     278:	95 95       	asr	r25
     27a:	87 95       	ror	r24
     27c:	fa 94       	dec	r15
     27e:	e2 f7       	brpl	.-8      	; 0x278 <_Z8getvoxeliii+0x32>
     280:	81 70       	andi	r24, 0x01	; 1
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	1f 91       	pop	r17
     288:	0f 91       	pop	r16
     28a:	ff 90       	pop	r15
     28c:	08 95       	ret

0000028e <_Z10altervoxeliiii>:
     28e:	21 30       	cpi	r18, 0x01	; 1
     290:	31 05       	cpc	r19, r1
     292:	19 f4       	brne	.+6      	; 0x29a <_Z10altervoxeliiii+0xc>
     294:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
     298:	08 95       	ret
     29a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z8clrvoxeliii>
     29e:	08 95       	ret

000002a0 <_Z8flpvoxeliii>:
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	f8 2e       	mov	r15, r24
     2ac:	8b 01       	movw	r16, r22
     2ae:	ea 01       	movw	r28, r20
     2b0:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z7inrangeiii>
     2b4:	88 23       	and	r24, r24
     2b6:	a1 f0       	breq	.+40     	; 0x2e0 <_Z8flpvoxeliii+0x40>
     2b8:	cc 0f       	add	r28, r28
     2ba:	dd 1f       	adc	r29, r29
     2bc:	cc 0f       	add	r28, r28
     2be:	dd 1f       	adc	r29, r29
     2c0:	cc 0f       	add	r28, r28
     2c2:	dd 1f       	adc	r29, r29
     2c4:	c3 53       	subi	r28, 0x33	; 51
     2c6:	df 4f       	sbci	r29, 0xFF	; 255
     2c8:	c0 0f       	add	r28, r16
     2ca:	d1 1f       	adc	r29, r17
     2cc:	28 81       	ld	r18, Y
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <_Z8flpvoxeliii+0x38>
     2d4:	88 0f       	add	r24, r24
     2d6:	99 1f       	adc	r25, r25
     2d8:	fa 94       	dec	r15
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <_Z8flpvoxeliii+0x34>
     2dc:	82 27       	eor	r24, r18
     2de:	88 83       	st	Y, r24
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	ff 90       	pop	r15
     2ea:	08 95       	ret

000002ec <_Z4fillh>:
     2ec:	60 e0       	ldi	r22, 0x00	; 0
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	ab 01       	movw	r20, r22
     2f6:	44 0f       	add	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	44 0f       	add	r20, r20
     2fc:	55 1f       	adc	r21, r21
     2fe:	44 0f       	add	r20, r20
     300:	55 1f       	adc	r21, r21
     302:	43 53       	subi	r20, 0x33	; 51
     304:	5f 4f       	sbci	r21, 0xFF	; 255
     306:	fa 01       	movw	r30, r20
     308:	e2 0f       	add	r30, r18
     30a:	f3 1f       	adc	r31, r19
     30c:	80 83       	st	Z, r24
     30e:	2f 5f       	subi	r18, 0xFF	; 255
     310:	3f 4f       	sbci	r19, 0xFF	; 255
     312:	28 30       	cpi	r18, 0x08	; 8
     314:	31 05       	cpc	r19, r1
     316:	b9 f7       	brne	.-18     	; 0x306 <_Z4fillh+0x1a>
     318:	6f 5f       	subi	r22, 0xFF	; 255
     31a:	7f 4f       	sbci	r23, 0xFF	; 255
     31c:	68 30       	cpi	r22, 0x08	; 8
     31e:	71 05       	cpc	r23, r1
     320:	39 f7       	brne	.-50     	; 0x2f0 <_Z4fillh+0x4>
     322:	08 95       	ret

00000324 <_Z10setplane_zi>:
     324:	88 30       	cpi	r24, 0x08	; 8
     326:	91 05       	cpc	r25, r1
     328:	a0 f4       	brcc	.+40     	; 0x352 <_Z10setplane_zi+0x2e>
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	88 0f       	add	r24, r24
     330:	99 1f       	adc	r25, r25
     332:	88 0f       	add	r24, r24
     334:	99 1f       	adc	r25, r25
     336:	88 0f       	add	r24, r24
     338:	99 1f       	adc	r25, r25
     33a:	83 53       	subi	r24, 0x33	; 51
     33c:	9f 4f       	sbci	r25, 0xFF	; 255
     33e:	4f ef       	ldi	r20, 0xFF	; 255
     340:	fc 01       	movw	r30, r24
     342:	e2 0f       	add	r30, r18
     344:	f3 1f       	adc	r31, r19
     346:	40 83       	st	Z, r20
     348:	2f 5f       	subi	r18, 0xFF	; 255
     34a:	3f 4f       	sbci	r19, 0xFF	; 255
     34c:	28 30       	cpi	r18, 0x08	; 8
     34e:	31 05       	cpc	r19, r1
     350:	b9 f7       	brne	.-18     	; 0x340 <_Z10setplane_zi+0x1c>
     352:	08 95       	ret

00000354 <_Z10setplane_xi>:
     354:	88 30       	cpi	r24, 0x08	; 8
     356:	91 05       	cpc	r25, r1
     358:	08 f5       	brcc	.+66     	; 0x39c <_Z10setplane_xi+0x48>
     35a:	31 e0       	ldi	r19, 0x01	; 1
     35c:	01 c0       	rjmp	.+2      	; 0x360 <_Z10setplane_xi+0xc>
     35e:	33 0f       	add	r19, r19
     360:	8a 95       	dec	r24
     362:	ea f7       	brpl	.-6      	; 0x35e <_Z10setplane_xi+0xa>
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	ab 01       	movw	r20, r22
     36e:	44 0f       	add	r20, r20
     370:	55 1f       	adc	r21, r21
     372:	44 0f       	add	r20, r20
     374:	55 1f       	adc	r21, r21
     376:	44 0f       	add	r20, r20
     378:	55 1f       	adc	r21, r21
     37a:	43 53       	subi	r20, 0x33	; 51
     37c:	5f 4f       	sbci	r21, 0xFF	; 255
     37e:	fa 01       	movw	r30, r20
     380:	e8 0f       	add	r30, r24
     382:	f9 1f       	adc	r31, r25
     384:	20 81       	ld	r18, Z
     386:	23 2b       	or	r18, r19
     388:	20 83       	st	Z, r18
     38a:	01 96       	adiw	r24, 0x01	; 1
     38c:	88 30       	cpi	r24, 0x08	; 8
     38e:	91 05       	cpc	r25, r1
     390:	b1 f7       	brne	.-20     	; 0x37e <_Z10setplane_xi+0x2a>
     392:	6f 5f       	subi	r22, 0xFF	; 255
     394:	7f 4f       	sbci	r23, 0xFF	; 255
     396:	68 30       	cpi	r22, 0x08	; 8
     398:	71 05       	cpc	r23, r1
     39a:	31 f7       	brne	.-52     	; 0x368 <_Z10setplane_xi+0x14>
     39c:	08 95       	ret

0000039e <_Z10setplane_yi>:
     39e:	88 30       	cpi	r24, 0x08	; 8
     3a0:	91 05       	cpc	r25, r1
     3a2:	a0 f4       	brcc	.+40     	; 0x3cc <_Z10setplane_yi+0x2e>
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	4f ef       	ldi	r20, 0xFF	; 255
     3aa:	f9 01       	movw	r30, r18
     3ac:	ee 0f       	add	r30, r30
     3ae:	ff 1f       	adc	r31, r31
     3b0:	ee 0f       	add	r30, r30
     3b2:	ff 1f       	adc	r31, r31
     3b4:	ee 0f       	add	r30, r30
     3b6:	ff 1f       	adc	r31, r31
     3b8:	e3 53       	subi	r30, 0x33	; 51
     3ba:	ff 4f       	sbci	r31, 0xFF	; 255
     3bc:	e8 0f       	add	r30, r24
     3be:	f9 1f       	adc	r31, r25
     3c0:	40 83       	st	Z, r20
     3c2:	2f 5f       	subi	r18, 0xFF	; 255
     3c4:	3f 4f       	sbci	r19, 0xFF	; 255
     3c6:	28 30       	cpi	r18, 0x08	; 8
     3c8:	31 05       	cpc	r19, r1
     3ca:	79 f7       	brne	.-34     	; 0x3aa <_Z10setplane_yi+0xc>
     3cc:	08 95       	ret

000003ce <_Z8setplanech>:
     3ce:	89 37       	cpi	r24, 0x79	; 121
     3d0:	49 f0       	breq	.+18     	; 0x3e4 <_Z8setplanech+0x16>
     3d2:	8a 37       	cpi	r24, 0x7A	; 122
     3d4:	61 f0       	breq	.+24     	; 0x3ee <_Z8setplanech+0x20>
     3d6:	88 37       	cpi	r24, 0x78	; 120
     3d8:	71 f4       	brne	.+28     	; 0x3f6 <_Z8setplanech+0x28>
     3da:	86 2f       	mov	r24, r22
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	0e 94 aa 01 	call	0x354	; 0x354 <_Z10setplane_xi>
     3e2:	08 95       	ret
     3e4:	86 2f       	mov	r24, r22
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 cf 01 	call	0x39e	; 0x39e <_Z10setplane_yi>
     3ec:	08 95       	ret
     3ee:	86 2f       	mov	r24, r22
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 92 01 	call	0x324	; 0x324 <_Z10setplane_zi>
     3f6:	08 95       	ret

000003f8 <_Z7tmpfillh>:
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	ab 01       	movw	r20, r22
     402:	44 0f       	add	r20, r20
     404:	55 1f       	adc	r21, r21
     406:	44 0f       	add	r20, r20
     408:	55 1f       	adc	r21, r21
     40a:	44 0f       	add	r20, r20
     40c:	55 1f       	adc	r21, r21
     40e:	43 57       	subi	r20, 0x73	; 115
     410:	5f 4f       	sbci	r21, 0xFF	; 255
     412:	fa 01       	movw	r30, r20
     414:	e2 0f       	add	r30, r18
     416:	f3 1f       	adc	r31, r19
     418:	80 83       	st	Z, r24
     41a:	2f 5f       	subi	r18, 0xFF	; 255
     41c:	3f 4f       	sbci	r19, 0xFF	; 255
     41e:	28 30       	cpi	r18, 0x08	; 8
     420:	31 05       	cpc	r19, r1
     422:	b9 f7       	brne	.-18     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     424:	6f 5f       	subi	r22, 0xFF	; 255
     426:	7f 4f       	sbci	r23, 0xFF	; 255
     428:	68 30       	cpi	r22, 0x08	; 8
     42a:	71 05       	cpc	r23, r1
     42c:	39 f7       	brne	.-50     	; 0x3fc <_Z7tmpfillh+0x4>
     42e:	08 95       	ret

00000430 <_Z8bytelineii>:
     430:	6f 5f       	subi	r22, 0xFF	; 255
     432:	7f 4f       	sbci	r23, 0xFF	; 255
     434:	2f ef       	ldi	r18, 0xFF	; 255
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	a9 01       	movw	r20, r18
     43a:	02 c0       	rjmp	.+4      	; 0x440 <_Z8bytelineii+0x10>
     43c:	44 0f       	add	r20, r20
     43e:	55 1f       	adc	r21, r21
     440:	6a 95       	dec	r22
     442:	e2 f7       	brpl	.-8      	; 0x43c <_Z8bytelineii+0xc>
     444:	40 95       	com	r20
     446:	b9 01       	movw	r22, r18
     448:	02 c0       	rjmp	.+4      	; 0x44e <_Z8bytelineii+0x1e>
     44a:	66 0f       	add	r22, r22
     44c:	77 1f       	adc	r23, r23
     44e:	8a 95       	dec	r24
     450:	e2 f7       	brpl	.-8      	; 0x44a <_Z8bytelineii+0x1a>
     452:	cb 01       	movw	r24, r22
     454:	84 23       	and	r24, r20
     456:	08 95       	ret

00000458 <_Z13box_wireframeiiiiii>:
     458:	6f 92       	push	r6
     45a:	7f 92       	push	r7
     45c:	8f 92       	push	r8
     45e:	9f 92       	push	r9
     460:	af 92       	push	r10
     462:	bf 92       	push	r11
     464:	cf 92       	push	r12
     466:	df 92       	push	r13
     468:	ef 92       	push	r14
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	6c 01       	movw	r12, r24
     476:	5b 01       	movw	r10, r22
     478:	ea 01       	movw	r28, r20
     47a:	39 01       	movw	r6, r18
     47c:	47 01       	movw	r8, r14
     47e:	28 17       	cp	r18, r24
     480:	39 07       	cpc	r19, r25
     482:	2c f4       	brge	.+10     	; 0x48e <_Z13box_wireframeiiiiii+0x36>
     484:	98 2f       	mov	r25, r24
     486:	8d 2d       	mov	r24, r13
     488:	69 01       	movw	r12, r18
     48a:	69 2e       	mov	r6, r25
     48c:	78 2e       	mov	r7, r24
     48e:	0a 15       	cp	r16, r10
     490:	1b 05       	cpc	r17, r11
     492:	0c f0       	brlt	.+2      	; 0x496 <_Z13box_wireframeiiiiii+0x3e>
     494:	ab c0       	rjmp	.+342    	; 0x5ec <_Z13box_wireframeiiiiii+0x194>
     496:	8c 16       	cp	r8, r28
     498:	9d 06       	cpc	r9, r29
     49a:	0c f0       	brlt	.+2      	; 0x49e <_Z13box_wireframeiiiiii+0x46>
     49c:	ab c0       	rjmp	.+342    	; 0x5f4 <_Z13box_wireframeiiiiii+0x19c>
     49e:	b3 01       	movw	r22, r6
     4a0:	c6 01       	movw	r24, r12
     4a2:	0e 94 18 02 	call	0x430	; 0x430 <_Z8bytelineii>
     4a6:	94 01       	movw	r18, r8
     4a8:	22 0f       	add	r18, r18
     4aa:	33 1f       	adc	r19, r19
     4ac:	22 0f       	add	r18, r18
     4ae:	33 1f       	adc	r19, r19
     4b0:	22 0f       	add	r18, r18
     4b2:	33 1f       	adc	r19, r19
     4b4:	23 53       	subi	r18, 0x33	; 51
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	f9 01       	movw	r30, r18
     4ba:	e0 0f       	add	r30, r16
     4bc:	f1 1f       	adc	r31, r17
     4be:	80 83       	st	Z, r24
     4c0:	f9 01       	movw	r30, r18
     4c2:	ea 0d       	add	r30, r10
     4c4:	fb 1d       	adc	r31, r11
     4c6:	80 83       	st	Z, r24
     4c8:	9e 01       	movw	r18, r28
     4ca:	22 0f       	add	r18, r18
     4cc:	33 1f       	adc	r19, r19
     4ce:	22 0f       	add	r18, r18
     4d0:	33 1f       	adc	r19, r19
     4d2:	22 0f       	add	r18, r18
     4d4:	33 1f       	adc	r19, r19
     4d6:	23 53       	subi	r18, 0x33	; 51
     4d8:	3f 4f       	sbci	r19, 0xFF	; 255
     4da:	f9 01       	movw	r30, r18
     4dc:	e0 0f       	add	r30, r16
     4de:	f1 1f       	adc	r31, r17
     4e0:	80 83       	st	Z, r24
     4e2:	f9 01       	movw	r30, r18
     4e4:	ea 0d       	add	r30, r10
     4e6:	fb 1d       	adc	r31, r11
     4e8:	80 83       	st	Z, r24
     4ea:	a0 16       	cp	r10, r16
     4ec:	b1 06       	cpc	r11, r17
     4ee:	74 f4       	brge	.+28     	; 0x50c <_Z13box_wireframeiiiiii+0xb4>
     4f0:	9c 2f       	mov	r25, r28
     4f2:	8d 2f       	mov	r24, r29
     4f4:	e4 01       	movw	r28, r8
     4f6:	89 2e       	mov	r8, r25
     4f8:	98 2e       	mov	r9, r24
     4fa:	9a 2d       	mov	r25, r10
     4fc:	8b 2d       	mov	r24, r11
     4fe:	58 01       	movw	r10, r16
     500:	09 2f       	mov	r16, r25
     502:	18 2f       	mov	r17, r24
     504:	8c 16       	cp	r8, r28
     506:	9d 06       	cpc	r9, r29
     508:	64 f5       	brge	.+88     	; 0x562 <_Z13box_wireframeiiiiii+0x10a>
     50a:	cb c0       	rjmp	.+406    	; 0x6a2 <_Z13box_wireframeiiiiii+0x24a>
     50c:	9c 2f       	mov	r25, r28
     50e:	8d 2f       	mov	r24, r29
     510:	e4 01       	movw	r28, r8
     512:	89 2e       	mov	r8, r25
     514:	98 2e       	mov	r9, r24
     516:	9a 2d       	mov	r25, r10
     518:	8b 2d       	mov	r24, r11
     51a:	58 01       	movw	r10, r16
     51c:	09 2f       	mov	r16, r25
     51e:	18 2f       	mov	r17, r24
     520:	75 01       	movw	r14, r10
     522:	ae 01       	movw	r20, r28
     524:	b7 01       	movw	r22, r14
     526:	c6 01       	movw	r24, r12
     528:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
     52c:	a4 01       	movw	r20, r8
     52e:	b7 01       	movw	r22, r14
     530:	c6 01       	movw	r24, r12
     532:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
     536:	ae 01       	movw	r20, r28
     538:	b7 01       	movw	r22, r14
     53a:	c3 01       	movw	r24, r6
     53c:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
     540:	a4 01       	movw	r20, r8
     542:	b7 01       	movw	r22, r14
     544:	c3 01       	movw	r24, r6
     546:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
     54a:	8f ef       	ldi	r24, 0xFF	; 255
     54c:	e8 1a       	sub	r14, r24
     54e:	f8 0a       	sbc	r15, r24
     550:	0e 15       	cp	r16, r14
     552:	1f 05       	cpc	r17, r15
     554:	34 f7       	brge	.-52     	; 0x522 <_Z13box_wireframeiiiiii+0xca>
     556:	d6 cf       	rjmp	.-84     	; 0x504 <_Z13box_wireframeiiiiii+0xac>
     558:	9a 2d       	mov	r25, r10
     55a:	8b 2d       	mov	r24, r11
     55c:	58 01       	movw	r10, r16
     55e:	09 2f       	mov	r16, r25
     560:	18 2f       	mov	r17, r24
     562:	ae 01       	movw	r20, r28
     564:	b5 01       	movw	r22, r10
     566:	c6 01       	movw	r24, r12
     568:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
     56c:	ae 01       	movw	r20, r28
     56e:	b8 01       	movw	r22, r16
     570:	c6 01       	movw	r24, r12
     572:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
     576:	ae 01       	movw	r20, r28
     578:	b5 01       	movw	r22, r10
     57a:	c3 01       	movw	r24, r6
     57c:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
     580:	ae 01       	movw	r20, r28
     582:	b8 01       	movw	r22, r16
     584:	c3 01       	movw	r24, r6
     586:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
     58a:	21 96       	adiw	r28, 0x01	; 1
     58c:	8c 16       	cp	r8, r28
     58e:	9d 06       	cpc	r9, r29
     590:	44 f7       	brge	.-48     	; 0x562 <_Z13box_wireframeiiiiii+0x10a>
     592:	87 c0       	rjmp	.+270    	; 0x6a2 <_Z13box_wireframeiiiiii+0x24a>
     594:	b3 01       	movw	r22, r6
     596:	c6 01       	movw	r24, r12
     598:	0e 94 18 02 	call	0x430	; 0x430 <_Z8bytelineii>
     59c:	94 01       	movw	r18, r8
     59e:	22 0f       	add	r18, r18
     5a0:	33 1f       	adc	r19, r19
     5a2:	22 0f       	add	r18, r18
     5a4:	33 1f       	adc	r19, r19
     5a6:	22 0f       	add	r18, r18
     5a8:	33 1f       	adc	r19, r19
     5aa:	23 53       	subi	r18, 0x33	; 51
     5ac:	3f 4f       	sbci	r19, 0xFF	; 255
     5ae:	f9 01       	movw	r30, r18
     5b0:	ea 0d       	add	r30, r10
     5b2:	fb 1d       	adc	r31, r11
     5b4:	80 83       	st	Z, r24
     5b6:	f9 01       	movw	r30, r18
     5b8:	e0 0f       	add	r30, r16
     5ba:	f1 1f       	adc	r31, r17
     5bc:	80 83       	st	Z, r24
     5be:	9e 01       	movw	r18, r28
     5c0:	22 0f       	add	r18, r18
     5c2:	33 1f       	adc	r19, r19
     5c4:	22 0f       	add	r18, r18
     5c6:	33 1f       	adc	r19, r19
     5c8:	22 0f       	add	r18, r18
     5ca:	33 1f       	adc	r19, r19
     5cc:	23 53       	subi	r18, 0x33	; 51
     5ce:	3f 4f       	sbci	r19, 0xFF	; 255
     5d0:	f9 01       	movw	r30, r18
     5d2:	ea 0d       	add	r30, r10
     5d4:	fb 1d       	adc	r31, r11
     5d6:	80 83       	st	Z, r24
     5d8:	f9 01       	movw	r30, r18
     5da:	e0 0f       	add	r30, r16
     5dc:	f1 1f       	adc	r31, r17
     5de:	80 83       	st	Z, r24
     5e0:	9c 2f       	mov	r25, r28
     5e2:	8d 2f       	mov	r24, r29
     5e4:	e4 01       	movw	r28, r8
     5e6:	89 2e       	mov	r8, r25
     5e8:	98 2e       	mov	r9, r24
     5ea:	9a cf       	rjmp	.-204    	; 0x520 <_Z13box_wireframeiiiiii+0xc8>
     5ec:	8c 16       	cp	r8, r28
     5ee:	9d 06       	cpc	r9, r29
     5f0:	8c f2       	brlt	.-94     	; 0x594 <_Z13box_wireframeiiiiii+0x13c>
     5f2:	30 c0       	rjmp	.+96     	; 0x654 <_Z13box_wireframeiiiiii+0x1fc>
     5f4:	b3 01       	movw	r22, r6
     5f6:	c6 01       	movw	r24, r12
     5f8:	0e 94 18 02 	call	0x430	; 0x430 <_Z8bytelineii>
     5fc:	9e 01       	movw	r18, r28
     5fe:	22 0f       	add	r18, r18
     600:	33 1f       	adc	r19, r19
     602:	22 0f       	add	r18, r18
     604:	33 1f       	adc	r19, r19
     606:	22 0f       	add	r18, r18
     608:	33 1f       	adc	r19, r19
     60a:	23 53       	subi	r18, 0x33	; 51
     60c:	3f 4f       	sbci	r19, 0xFF	; 255
     60e:	f9 01       	movw	r30, r18
     610:	e0 0f       	add	r30, r16
     612:	f1 1f       	adc	r31, r17
     614:	80 83       	st	Z, r24
     616:	f9 01       	movw	r30, r18
     618:	ea 0d       	add	r30, r10
     61a:	fb 1d       	adc	r31, r11
     61c:	80 83       	st	Z, r24
     61e:	94 01       	movw	r18, r8
     620:	22 0f       	add	r18, r18
     622:	33 1f       	adc	r19, r19
     624:	22 0f       	add	r18, r18
     626:	33 1f       	adc	r19, r19
     628:	22 0f       	add	r18, r18
     62a:	33 1f       	adc	r19, r19
     62c:	23 53       	subi	r18, 0x33	; 51
     62e:	3f 4f       	sbci	r19, 0xFF	; 255
     630:	f9 01       	movw	r30, r18
     632:	e0 0f       	add	r30, r16
     634:	f1 1f       	adc	r31, r17
     636:	80 83       	st	Z, r24
     638:	f9 01       	movw	r30, r18
     63a:	ea 0d       	add	r30, r10
     63c:	fb 1d       	adc	r31, r11
     63e:	80 83       	st	Z, r24
     640:	a0 16       	cp	r10, r16
     642:	b1 06       	cpc	r11, r17
     644:	0c f4       	brge	.+2      	; 0x648 <_Z13box_wireframeiiiiii+0x1f0>
     646:	88 cf       	rjmp	.-240    	; 0x558 <_Z13box_wireframeiiiiii+0x100>
     648:	9a 2d       	mov	r25, r10
     64a:	8b 2d       	mov	r24, r11
     64c:	58 01       	movw	r10, r16
     64e:	09 2f       	mov	r16, r25
     650:	18 2f       	mov	r17, r24
     652:	66 cf       	rjmp	.-308    	; 0x520 <_Z13box_wireframeiiiiii+0xc8>
     654:	b3 01       	movw	r22, r6
     656:	c6 01       	movw	r24, r12
     658:	0e 94 18 02 	call	0x430	; 0x430 <_Z8bytelineii>
     65c:	9e 01       	movw	r18, r28
     65e:	22 0f       	add	r18, r18
     660:	33 1f       	adc	r19, r19
     662:	22 0f       	add	r18, r18
     664:	33 1f       	adc	r19, r19
     666:	22 0f       	add	r18, r18
     668:	33 1f       	adc	r19, r19
     66a:	23 53       	subi	r18, 0x33	; 51
     66c:	3f 4f       	sbci	r19, 0xFF	; 255
     66e:	f9 01       	movw	r30, r18
     670:	ea 0d       	add	r30, r10
     672:	fb 1d       	adc	r31, r11
     674:	80 83       	st	Z, r24
     676:	f9 01       	movw	r30, r18
     678:	e0 0f       	add	r30, r16
     67a:	f1 1f       	adc	r31, r17
     67c:	80 83       	st	Z, r24
     67e:	94 01       	movw	r18, r8
     680:	22 0f       	add	r18, r18
     682:	33 1f       	adc	r19, r19
     684:	22 0f       	add	r18, r18
     686:	33 1f       	adc	r19, r19
     688:	22 0f       	add	r18, r18
     68a:	33 1f       	adc	r19, r19
     68c:	23 53       	subi	r18, 0x33	; 51
     68e:	3f 4f       	sbci	r19, 0xFF	; 255
     690:	f9 01       	movw	r30, r18
     692:	ea 0d       	add	r30, r10
     694:	fb 1d       	adc	r31, r11
     696:	80 83       	st	Z, r24
     698:	f9 01       	movw	r30, r18
     69a:	e0 0f       	add	r30, r16
     69c:	f1 1f       	adc	r31, r17
     69e:	80 83       	st	Z, r24
     6a0:	3f cf       	rjmp	.-386    	; 0x520 <_Z13box_wireframeiiiiii+0xc8>
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	df 90       	pop	r13
     6b0:	cf 90       	pop	r12
     6b2:	bf 90       	pop	r11
     6b4:	af 90       	pop	r10
     6b6:	9f 90       	pop	r9
     6b8:	8f 90       	pop	r8
     6ba:	7f 90       	pop	r7
     6bc:	6f 90       	pop	r6
     6be:	08 95       	ret

000006c0 <_Z8flipbytec>:
     6c0:	28 2f       	mov	r18, r24
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	88 1f       	adc	r24, r24
     6c6:	88 27       	eor	r24, r24
     6c8:	88 1f       	adc	r24, r24
     6ca:	b9 01       	movw	r22, r18
     6cc:	75 95       	asr	r23
     6ce:	67 95       	ror	r22
     6d0:	75 95       	asr	r23
     6d2:	67 95       	ror	r22
     6d4:	75 95       	asr	r23
     6d6:	67 95       	ror	r22
     6d8:	75 95       	asr	r23
     6da:	67 95       	ror	r22
     6dc:	75 95       	asr	r23
     6de:	67 95       	ror	r22
     6e0:	62 70       	andi	r22, 0x02	; 2
     6e2:	86 2b       	or	r24, r22
     6e4:	a9 01       	movw	r20, r18
     6e6:	55 95       	asr	r21
     6e8:	47 95       	ror	r20
     6ea:	55 95       	asr	r21
     6ec:	47 95       	ror	r20
     6ee:	55 95       	asr	r21
     6f0:	47 95       	ror	r20
     6f2:	44 70       	andi	r20, 0x04	; 4
     6f4:	84 2b       	or	r24, r20
     6f6:	d9 01       	movw	r26, r18
     6f8:	b5 95       	asr	r27
     6fa:	a7 95       	ror	r26
     6fc:	a8 70       	andi	r26, 0x08	; 8
     6fe:	8a 2b       	or	r24, r26
     700:	f9 01       	movw	r30, r18
     702:	ee 0f       	add	r30, r30
     704:	ff 1f       	adc	r31, r31
     706:	e0 71       	andi	r30, 0x10	; 16
     708:	8e 2b       	or	r24, r30
     70a:	b9 01       	movw	r22, r18
     70c:	66 0f       	add	r22, r22
     70e:	77 1f       	adc	r23, r23
     710:	66 0f       	add	r22, r22
     712:	77 1f       	adc	r23, r23
     714:	66 0f       	add	r22, r22
     716:	77 1f       	adc	r23, r23
     718:	60 72       	andi	r22, 0x20	; 32
     71a:	86 2b       	or	r24, r22
     71c:	a9 01       	movw	r20, r18
     71e:	44 0f       	add	r20, r20
     720:	55 1f       	adc	r21, r21
     722:	42 95       	swap	r20
     724:	52 95       	swap	r21
     726:	50 7f       	andi	r21, 0xF0	; 240
     728:	54 27       	eor	r21, r20
     72a:	40 7f       	andi	r20, 0xF0	; 240
     72c:	54 27       	eor	r21, r20
     72e:	40 74       	andi	r20, 0x40	; 64
     730:	84 2b       	or	r24, r20
     732:	36 95       	lsr	r19
     734:	32 2f       	mov	r19, r18
     736:	22 27       	eor	r18, r18
     738:	37 95       	ror	r19
     73a:	27 95       	ror	r18
     73c:	82 2b       	or	r24, r18
     73e:	08 95       	ret

00000740 <_Z8mirror_yv>:

// Flip the cube 180 degrees along the y axis.
void mirror_y (void)
{
     740:	8f 92       	push	r8
     742:	9f 92       	push	r9
     744:	af 92       	push	r10
     746:	bf 92       	push	r11
     748:	cf 92       	push	r12
     74a:	df 92       	push	r13
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
     75c:	c0 54       	subi	r28, 0x40	; 64
     75e:	d1 09       	sbc	r29, r1
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	de bf       	out	0x3e, r29	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	cd bf       	out	0x3d, r28	; 61
	unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
	unsigned char x,y,z;

	memcpy((void*)buffer, (const void*)cube, CUBE_BYTES); // copy the current cube into a buffer.
     76a:	80 e4       	ldi	r24, 0x40	; 64
     76c:	ed ec       	ldi	r30, 0xCD	; 205
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	de 01       	movw	r26, r28
     772:	11 96       	adiw	r26, 0x01	; 1
     774:	01 90       	ld	r0, Z+
     776:	0d 92       	st	X+, r0
     778:	8a 95       	dec	r24
     77a:	e1 f7       	brne	.-8      	; 0x774 <_Z8mirror_yv+0x34>

	fill(0x00);
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
     782:	ce 01       	movw	r24, r28
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	4c 01       	movw	r8, r24
     788:	a1 2c       	mov	r10, r1
     78a:	b1 2c       	mov	r11, r1
     78c:	74 01       	movw	r14, r8
     78e:	0f 2e       	mov	r0, r31
     790:	f7 e0       	ldi	r31, 0x07	; 7
     792:	cf 2e       	mov	r12, r31
     794:	d1 2c       	mov	r13, r1
     796:	f0 2d       	mov	r31, r0
     798:	00 e0       	ldi	r16, 0x00	; 0
     79a:	10 e0       	ldi	r17, 0x00	; 0
	{
		for (y=0; y<CUBE_SIZE; y++)
		{
			for (x=0; x<CUBE_SIZE; x++)
			{
				if (buffer[z][y] & (0x01 << x))
     79c:	f7 01       	movw	r30, r14
     79e:	80 81       	ld	r24, Z
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	00 2e       	mov	r0, r16
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <_Z8mirror_yv+0x6a>
     7a6:	95 95       	asr	r25
     7a8:	87 95       	ror	r24
     7aa:	0a 94       	dec	r0
     7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <_Z8mirror_yv+0x66>
     7ae:	80 ff       	sbrs	r24, 0
     7b0:	06 c0       	rjmp	.+12     	; 0x7be <_Z8mirror_yv+0x7e>
				setvoxel(x,CUBE_SIZE-1-y,z);
     7b2:	a5 01       	movw	r20, r10
     7b4:	b6 01       	movw	r22, r12
     7b6:	80 2f       	mov	r24, r16
     7b8:	91 2f       	mov	r25, r17
     7ba:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
     7be:	0f 5f       	subi	r16, 0xFF	; 255
     7c0:	1f 4f       	sbci	r17, 0xFF	; 255
	fill(0x00);
	for (z=0; z<CUBE_SIZE; z++)
	{
		for (y=0; y<CUBE_SIZE; y++)
		{
			for (x=0; x<CUBE_SIZE; x++)
     7c2:	08 30       	cpi	r16, 0x08	; 8
     7c4:	11 05       	cpc	r17, r1
     7c6:	51 f7       	brne	.-44     	; 0x79c <_Z8mirror_yv+0x5c>
     7c8:	ff ef       	ldi	r31, 0xFF	; 255
     7ca:	ef 1a       	sub	r14, r31
     7cc:	ff 0a       	sbc	r15, r31
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	c8 1a       	sub	r12, r24
     7d2:	d1 08       	sbc	r13, r1
     7d4:	08 f7       	brcc	.-62     	; 0x798 <_Z8mirror_yv+0x58>
     7d6:	ef ef       	ldi	r30, 0xFF	; 255
     7d8:	ae 1a       	sub	r10, r30
     7da:	be 0a       	sbc	r11, r30
     7dc:	f8 e0       	ldi	r31, 0x08	; 8
     7de:	8f 0e       	add	r8, r31
     7e0:	91 1c       	adc	r9, r1
	unsigned char x,y,z;

	memcpy((void*)buffer, (const void*)cube, CUBE_BYTES); // copy the current cube into a buffer.

	fill(0x00);
	for (z=0; z<CUBE_SIZE; z++)
     7e2:	88 e0       	ldi	r24, 0x08	; 8
     7e4:	a8 16       	cp	r10, r24
     7e6:	b1 04       	cpc	r11, r1
     7e8:	89 f6       	brne	.-94     	; 0x78c <_Z8mirror_yv+0x4c>
				setvoxel(x,CUBE_SIZE-1-y,z);
			}
		}
	}

}
     7ea:	c0 5c       	subi	r28, 0xC0	; 192
     7ec:	df 4f       	sbci	r29, 0xFF	; 255
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	ff 90       	pop	r15
     802:	ef 90       	pop	r14
     804:	df 90       	pop	r13
     806:	cf 90       	pop	r12
     808:	bf 90       	pop	r11
     80a:	af 90       	pop	r10
     80c:	9f 90       	pop	r9
     80e:	8f 90       	pop	r8
     810:	08 95       	ret

00000812 <_Z8mirror_xv>:

// Flip the cube 180 degrees along the x axis
void mirror_x (void)
{
     812:	8f 92       	push	r8
     814:	9f 92       	push	r9
     816:	af 92       	push	r10
     818:	bf 92       	push	r11
     81a:	cf 92       	push	r12
     81c:	df 92       	push	r13
     81e:	ef 92       	push	r14
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	c0 54       	subi	r28, 0x40	; 64
     830:	d1 09       	sbc	r29, r1
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	de bf       	out	0x3e, r29	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	cd bf       	out	0x3d, r28	; 61
	unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
	unsigned char y,z;

	memcpy((void*)buffer, (const void*)cube, CUBE_BYTES); // copy the current cube into a buffer.
     83c:	80 e4       	ldi	r24, 0x40	; 64
     83e:	ed ec       	ldi	r30, 0xCD	; 205
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	de 01       	movw	r26, r28
     844:	11 96       	adiw	r26, 0x01	; 1
     846:	01 90       	ld	r0, Z+
     848:	0d 92       	st	X+, r0
     84a:	8a 95       	dec	r24
     84c:	e1 f7       	brne	.-8      	; 0x846 <_Z8mirror_xv+0x34>

	fill(0x00);
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
     854:	9e 01       	movw	r18, r28
     856:	2f 5f       	subi	r18, 0xFF	; 255
     858:	3f 4f       	sbci	r19, 0xFF	; 255
     85a:	49 01       	movw	r8, r18
     85c:	a1 2c       	mov	r10, r1
     85e:	b1 2c       	mov	r11, r1
     860:	74 01       	movw	r14, r8
     862:	00 e0       	ldi	r16, 0x00	; 0
     864:	10 e0       	ldi	r17, 0x00	; 0
	for (z=0; z<CUBE_SIZE; z++)
	{
		for (y=0; y<CUBE_SIZE; y++)
		{
			// This will break with different buffer sizes..
			cube[z][y] = flipbyte(buffer[z][y]);
     866:	c5 01       	movw	r24, r10
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	88 0f       	add	r24, r24
     86e:	99 1f       	adc	r25, r25
     870:	88 0f       	add	r24, r24
     872:	99 1f       	adc	r25, r25
     874:	fc 01       	movw	r30, r24
     876:	e3 53       	subi	r30, 0x33	; 51
     878:	ff 4f       	sbci	r31, 0xFF	; 255
     87a:	6f 01       	movw	r12, r30
     87c:	f7 01       	movw	r30, r14
     87e:	81 91       	ld	r24, Z+
     880:	7f 01       	movw	r14, r30
     882:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z8flipbytec>
     886:	f6 01       	movw	r30, r12
     888:	e0 0f       	add	r30, r16
     88a:	f1 1f       	adc	r31, r17
     88c:	80 83       	st	Z, r24
     88e:	0f 5f       	subi	r16, 0xFF	; 255
     890:	1f 4f       	sbci	r17, 0xFF	; 255

	fill(0x00);
	
	for (z=0; z<CUBE_SIZE; z++)
	{
		for (y=0; y<CUBE_SIZE; y++)
     892:	08 30       	cpi	r16, 0x08	; 8
     894:	11 05       	cpc	r17, r1
     896:	91 f7       	brne	.-28     	; 0x87c <__stack+0x1d>
     898:	ff ef       	ldi	r31, 0xFF	; 255
     89a:	af 1a       	sub	r10, r31
     89c:	bf 0a       	sbc	r11, r31
     89e:	28 e0       	ldi	r18, 0x08	; 8
     8a0:	82 0e       	add	r8, r18
     8a2:	91 1c       	adc	r9, r1

	memcpy((void*)buffer, (const void*)cube, CUBE_BYTES); // copy the current cube into a buffer.

	fill(0x00);
	
	for (z=0; z<CUBE_SIZE; z++)
     8a4:	38 e0       	ldi	r19, 0x08	; 8
     8a6:	a3 16       	cp	r10, r19
     8a8:	b1 04       	cpc	r11, r1
     8aa:	d1 f6       	brne	.-76     	; 0x860 <__stack+0x1>
		{
			// This will break with different buffer sizes..
			cube[z][y] = flipbyte(buffer[z][y]);
		}
	}
}
     8ac:	c0 5c       	subi	r28, 0xC0	; 192
     8ae:	df 4f       	sbci	r29, 0xFF	; 255
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	1f 91       	pop	r17
     8c0:	0f 91       	pop	r16
     8c2:	ff 90       	pop	r15
     8c4:	ef 90       	pop	r14
     8c6:	df 90       	pop	r13
     8c8:	cf 90       	pop	r12
     8ca:	bf 90       	pop	r11
     8cc:	af 90       	pop	r10
     8ce:	9f 90       	pop	r9
     8d0:	8f 90       	pop	r8
     8d2:	08 95       	ret

000008d4 <_Z8mirror_zv>:

// flip the cube 180 degrees along the z axis
void mirror_z (void)
{
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	c0 54       	subi	r28, 0x40	; 64
     8de:	d1 09       	sbc	r29, r1
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	f8 94       	cli
     8e4:	de bf       	out	0x3e, r29	; 62
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	cd bf       	out	0x3d, r28	; 61
	unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
	unsigned char z, y;

	memcpy((void*)buffer, (const void*)cube, CUBE_BYTES); // copy the current cube into a buffer.
     8ea:	80 e4       	ldi	r24, 0x40	; 64
     8ec:	ed ec       	ldi	r30, 0xCD	; 205
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	de 01       	movw	r26, r28
     8f2:	11 96       	adiw	r26, 0x01	; 1
     8f4:	01 90       	ld	r0, Z+
     8f6:	0d 92       	st	X+, r0
     8f8:	8a 95       	dec	r24
     8fa:	e1 f7       	brne	.-8      	; 0x8f4 <_Z8mirror_zv+0x20>
     8fc:	40 e0       	ldi	r20, 0x00	; 0
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	a1 e0       	ldi	r26, 0x01	; 1
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	ac 0f       	add	r26, r28
     906:	bd 1f       	adc	r27, r29
     908:	a4 0f       	add	r26, r20
     90a:	b5 1f       	adc	r27, r21
     90c:	87 e0       	ldi	r24, 0x07	; 7
     90e:	90 e0       	ldi	r25, 0x00	; 0

	for (y=0; y<CUBE_SIZE; y++)
	{
		for (z=0; z<CUBE_SIZE; z++)
		{
			cube[CUBE_SIZE-1-z][y] = buffer[z][y];
     910:	2c 91       	ld	r18, X
     912:	fc 01       	movw	r30, r24
     914:	ee 0f       	add	r30, r30
     916:	ff 1f       	adc	r31, r31
     918:	ee 0f       	add	r30, r30
     91a:	ff 1f       	adc	r31, r31
     91c:	ee 0f       	add	r30, r30
     91e:	ff 1f       	adc	r31, r31
     920:	e3 53       	subi	r30, 0x33	; 51
     922:	ff 4f       	sbci	r31, 0xFF	; 255
     924:	e4 0f       	add	r30, r20
     926:	f5 1f       	adc	r31, r21
     928:	20 83       	st	Z, r18
     92a:	18 96       	adiw	r26, 0x08	; 8
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	80 f7       	brcc	.-32     	; 0x910 <_Z8mirror_zv+0x3c>
     930:	4f 5f       	subi	r20, 0xFF	; 255
     932:	5f 4f       	sbci	r21, 0xFF	; 255
	unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
	unsigned char z, y;

	memcpy((void*)buffer, (const void*)cube, CUBE_BYTES); // copy the current cube into a buffer.

	for (y=0; y<CUBE_SIZE; y++)
     934:	48 30       	cpi	r20, 0x08	; 8
     936:	51 05       	cpc	r21, r1
     938:	19 f7       	brne	.-58     	; 0x900 <_Z8mirror_zv+0x2c>
		for (z=0; z<CUBE_SIZE; z++)
		{
			cube[CUBE_SIZE-1-z][y] = buffer[z][y];
		}
	}
}
     93a:	c0 5c       	subi	r28, 0xC0	; 192
     93c:	df 4f       	sbci	r29, 0xFF	; 255
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	08 95       	ret

0000094e <_Z8delay_msj>:
// but we had already made to many effects using this
// calibration when we figured it might be a good idea
// to calibrate it.
void delay_ms(uint16_t x)
{
	for(; x > 0; x--)
     94e:	00 97       	sbiw	r24, 0x00	; 0
     950:	39 f0       	breq	.+14     	; 0x960 <_Z8delay_msj+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     952:	e4 e1       	ldi	r30, 0x14	; 20
     954:	f1 e0       	ldi	r31, 0x01	; 1
     956:	31 97       	sbiw	r30, 0x01	; 1
     958:	f1 f7       	brne	.-4      	; 0x956 <_Z8delay_msj+0x8>
     95a:	00 00       	nop
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	c9 f7       	brne	.-14     	; 0x952 <_Z8delay_msj+0x4>
     960:	08 95       	ret

00000962 <_Z10flipBufferv>:
}

// Copies the contents of fb (temp cube buffer) into the rendering buffer
void flipBuffer ()
{
	memcpy((void*)cube, (const void*)fb, 64); // copy the current cube into a buffer.
     962:	80 e4       	ldi	r24, 0x40	; 64
     964:	ed e8       	ldi	r30, 0x8D	; 141
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	ad ec       	ldi	r26, 0xCD	; 205
     96a:	b0 e0       	ldi	r27, 0x00	; 0
     96c:	01 90       	ld	r0, Z+
     96e:	0d 92       	st	X+, r0
     970:	8a 95       	dec	r24
     972:	e1 f7       	brne	.-8      	; 0x96c <_Z10flipBufferv+0xa>
     974:	08 95       	ret

00000976 <_Z5shiftci>:
// Shift the entire contents of the cube along an axis
// This is great for effects where you want to draw something
// on one side of the cube and have it flow towards the other
// side. Like rain flowing down the Z axiz.
void shift (char axis, int direction)
{
     976:	4f 92       	push	r4
     978:	5f 92       	push	r5
     97a:	6f 92       	push	r6
     97c:	7f 92       	push	r7
     97e:	8f 92       	push	r8
     980:	9f 92       	push	r9
     982:	af 92       	push	r10
     984:	bf 92       	push	r11
     986:	cf 92       	push	r12
     988:	df 92       	push	r13
     98a:	ef 92       	push	r14
     98c:	ff 92       	push	r15
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	18 2f       	mov	r17, r24
     996:	5b 01       	movw	r10, r22
	int i, x ,y;
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
     998:	c1 2c       	mov	r12, r1
     99a:	d1 2c       	mov	r13, r1
     99c:	0f 2e       	mov	r0, r31
     99e:	f7 e0       	ldi	r31, 0x07	; 7
     9a0:	8f 2e       	mov	r8, r31
     9a2:	91 2c       	mov	r9, r1
     9a4:	f0 2d       	mov	r31, r0
	{
		if (direction == -1)
     9a6:	4f ef       	ldi	r20, 0xFF	; 255
     9a8:	a4 16       	cp	r10, r20
     9aa:	b4 06       	cpc	r11, r20
     9ac:	21 f0       	breq	.+8      	; 0x9b6 <_Z5shiftci+0x40>
     9ae:	74 01       	movw	r14, r8
     9b0:	ec 18       	sub	r14, r12
     9b2:	fd 08       	sbc	r15, r13
     9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <_Z5shiftci+0x42>
     9b6:	76 01       	movw	r14, r12
		{
			for (y = 0; y < CUBE_SIZE; y++)
			{
				if (direction == -1)
				{
					iii = ii+1;
     9b8:	97 01       	movw	r18, r14
     9ba:	2f 5f       	subi	r18, 0xFF	; 255
     9bc:	3f 4f       	sbci	r19, 0xFF	; 255
				} else
				{
					iii = ii-1;
     9be:	c7 01       	movw	r24, r14
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	4f ef       	ldi	r20, 0xFF	; 255
     9c4:	a4 16       	cp	r10, r20
     9c6:	b4 06       	cpc	r11, r20
     9c8:	19 f4       	brne	.+6      	; 0x9d0 <_Z5shiftci+0x5a>
     9ca:	62 2e       	mov	r6, r18
     9cc:	73 2e       	mov	r7, r19
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <_Z5shiftci+0x5e>
     9d0:	68 2e       	mov	r6, r24
     9d2:	79 2e       	mov	r7, r25
		{
			ii = (7-i);
		}
		
		
		for (x = 0; x < CUBE_SIZE; x++)
     9d4:	41 2c       	mov	r4, r1
     9d6:	51 2c       	mov	r5, r1
     9d8:	c0 e0       	ldi	r28, 0x00	; 0
     9da:	d0 e0       	ldi	r29, 0x00	; 0
				} else
				{
					iii = ii-1;
				}
				
				if (axis == AXIS_Z)
     9dc:	1a 37       	cpi	r17, 0x7A	; 122
     9de:	71 f4       	brne	.+28     	; 0x9fc <_Z5shiftci+0x86>
				{
					state = getvoxel(x,y,iii);
     9e0:	46 2d       	mov	r20, r6
     9e2:	57 2d       	mov	r21, r7
     9e4:	be 01       	movw	r22, r28
     9e6:	c2 01       	movw	r24, r4
     9e8:	0e 94 23 01 	call	0x246	; 0x246 <_Z8getvoxeliii>
					altervoxel(x,y,ii,state);
     9ec:	28 2f       	mov	r18, r24
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	a7 01       	movw	r20, r14
     9f2:	be 01       	movw	r22, r28
     9f4:	c2 01       	movw	r24, r4
     9f6:	0e 94 47 01 	call	0x28e	; 0x28e <_Z10altervoxeliiii>
     9fa:	1f c0       	rjmp	.+62     	; 0xa3a <_Z5shiftci+0xc4>
				}
				
				if (axis == AXIS_Y)
     9fc:	19 37       	cpi	r17, 0x79	; 121
     9fe:	71 f4       	brne	.+28     	; 0xa1c <_Z5shiftci+0xa6>
				{
					state = getvoxel(x,iii,y);
     a00:	ae 01       	movw	r20, r28
     a02:	66 2d       	mov	r22, r6
     a04:	77 2d       	mov	r23, r7
     a06:	c2 01       	movw	r24, r4
     a08:	0e 94 23 01 	call	0x246	; 0x246 <_Z8getvoxeliii>
					altervoxel(x,ii,y,state);
     a0c:	28 2f       	mov	r18, r24
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	ae 01       	movw	r20, r28
     a12:	b7 01       	movw	r22, r14
     a14:	c2 01       	movw	r24, r4
     a16:	0e 94 47 01 	call	0x28e	; 0x28e <_Z10altervoxeliiii>
     a1a:	0f c0       	rjmp	.+30     	; 0xa3a <_Z5shiftci+0xc4>
				}
				
				if (axis == AXIS_X)
     a1c:	18 37       	cpi	r17, 0x78	; 120
     a1e:	69 f4       	brne	.+26     	; 0xa3a <_Z5shiftci+0xc4>
				{
					state = getvoxel(iii,y,x);
     a20:	a2 01       	movw	r20, r4
     a22:	be 01       	movw	r22, r28
     a24:	86 2d       	mov	r24, r6
     a26:	97 2d       	mov	r25, r7
     a28:	0e 94 23 01 	call	0x246	; 0x246 <_Z8getvoxeliii>
					altervoxel(ii,y,x,state);
     a2c:	28 2f       	mov	r18, r24
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	a2 01       	movw	r20, r4
     a32:	be 01       	movw	r22, r28
     a34:	c7 01       	movw	r24, r14
     a36:	0e 94 47 01 	call	0x28e	; 0x28e <_Z10altervoxeliiii>
		}
		
		
		for (x = 0; x < CUBE_SIZE; x++)
		{
			for (y = 0; y < CUBE_SIZE; y++)
     a3a:	21 96       	adiw	r28, 0x01	; 1
     a3c:	c8 30       	cpi	r28, 0x08	; 8
     a3e:	d1 05       	cpc	r29, r1
     a40:	69 f6       	brne	.-102    	; 0x9dc <_Z5shiftci+0x66>
		{
			ii = (7-i);
		}
		
		
		for (x = 0; x < CUBE_SIZE; x++)
     a42:	8f ef       	ldi	r24, 0xFF	; 255
     a44:	48 1a       	sub	r4, r24
     a46:	58 0a       	sbc	r5, r24
     a48:	48 e0       	ldi	r20, 0x08	; 8
     a4a:	44 16       	cp	r4, r20
     a4c:	51 04       	cpc	r5, r1
     a4e:	21 f6       	brne	.-120    	; 0x9d8 <_Z5shiftci+0x62>
{
	int i, x ,y;
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
     a50:	8f ef       	ldi	r24, 0xFF	; 255
     a52:	c8 1a       	sub	r12, r24
     a54:	d8 0a       	sbc	r13, r24
     a56:	48 e0       	ldi	r20, 0x08	; 8
     a58:	c4 16       	cp	r12, r20
     a5a:	d1 04       	cpc	r13, r1
     a5c:	09 f0       	breq	.+2      	; 0xa60 <_Z5shiftci+0xea>
     a5e:	a3 cf       	rjmp	.-186    	; 0x9a6 <_Z5shiftci+0x30>
				}
			}
		}
	}
	
	if (direction == -1)
     a60:	ab 20       	and	r10, r11
     a62:	a0 94       	com	r10
     a64:	19 f0       	breq	.+6      	; 0xa6c <_Z5shiftci+0xf6>
	{
		i = 7;
	} else
	{
		i = 0;
     a66:	e1 2c       	mov	r14, r1
     a68:	f1 2c       	mov	r15, r1
     a6a:	05 c0       	rjmp	.+10     	; 0xa76 <_Z5shiftci+0x100>
		}
	}
	
	if (direction == -1)
	{
		i = 7;
     a6c:	0f 2e       	mov	r0, r31
     a6e:	f7 e0       	ldi	r31, 0x07	; 7
     a70:	ef 2e       	mov	r14, r31
     a72:	f1 2c       	mov	r15, r1
     a74:	f0 2d       	mov	r31, r0
	} else
	{
		i = 0;
	}
	
	for (x = 0; x < CUBE_SIZE; x++)
     a76:	c1 2c       	mov	r12, r1
     a78:	d1 2c       	mov	r13, r1
     a7a:	c0 e0       	ldi	r28, 0x00	; 0
     a7c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for (y = 0; y < CUBE_SIZE; y++)
		{
			if (axis == AXIS_Z)
     a7e:	1a 37       	cpi	r17, 0x7A	; 122
     a80:	31 f4       	brne	.+12     	; 0xa8e <_Z5shiftci+0x118>
			clrvoxel(x,y,i);
     a82:	a7 01       	movw	r20, r14
     a84:	be 01       	movw	r22, r28
     a86:	c6 01       	movw	r24, r12
     a88:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z8clrvoxeliii>
     a8c:	0f c0       	rjmp	.+30     	; 0xaac <_Z5shiftci+0x136>
			
			if (axis == AXIS_Y)
     a8e:	19 37       	cpi	r17, 0x79	; 121
     a90:	31 f4       	brne	.+12     	; 0xa9e <_Z5shiftci+0x128>
			clrvoxel(x,i,y);
     a92:	ae 01       	movw	r20, r28
     a94:	b7 01       	movw	r22, r14
     a96:	c6 01       	movw	r24, r12
     a98:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z8clrvoxeliii>
     a9c:	07 c0       	rjmp	.+14     	; 0xaac <_Z5shiftci+0x136>
			
			if (axis == AXIS_X)
     a9e:	18 37       	cpi	r17, 0x78	; 120
     aa0:	29 f4       	brne	.+10     	; 0xaac <_Z5shiftci+0x136>
			clrvoxel(i,y,x);
     aa2:	a6 01       	movw	r20, r12
     aa4:	be 01       	movw	r22, r28
     aa6:	c7 01       	movw	r24, r14
     aa8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z8clrvoxeliii>
		i = 0;
	}
	
	for (x = 0; x < CUBE_SIZE; x++)
	{
		for (y = 0; y < CUBE_SIZE; y++)
     aac:	21 96       	adiw	r28, 0x01	; 1
     aae:	c8 30       	cpi	r28, 0x08	; 8
     ab0:	d1 05       	cpc	r29, r1
     ab2:	29 f7       	brne	.-54     	; 0xa7e <_Z5shiftci+0x108>
	} else
	{
		i = 0;
	}
	
	for (x = 0; x < CUBE_SIZE; x++)
     ab4:	4f ef       	ldi	r20, 0xFF	; 255
     ab6:	c4 1a       	sub	r12, r20
     ab8:	d4 0a       	sbc	r13, r20
     aba:	88 e0       	ldi	r24, 0x08	; 8
     abc:	c8 16       	cp	r12, r24
     abe:	d1 04       	cpc	r13, r1
     ac0:	e1 f6       	brne	.-72     	; 0xa7a <_Z5shiftci+0x104>
			
			if (axis == AXIS_X)
			clrvoxel(i,y,x);
		}
	}
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	1f 91       	pop	r17
     ac8:	ff 90       	pop	r15
     aca:	ef 90       	pop	r14
     acc:	df 90       	pop	r13
     ace:	cf 90       	pop	r12
     ad0:	bf 90       	pop	r11
     ad2:	af 90       	pop	r10
     ad4:	9f 90       	pop	r9
     ad6:	8f 90       	pop	r8
     ad8:	7f 90       	pop	r7
     ada:	6f 90       	pop	r6
     adc:	5f 90       	pop	r5
     ade:	4f 90       	pop	r4
     ae0:	08 95       	ret

00000ae2 <_ZN14EffectLauncher6launchE8EffectId>:
#include "Drawing.h"
#include "Effects.h"
#include "GameOfLife.h"

void EffectLauncher::launch (const EffectId effect_id)
{
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	cf 93       	push	r28
     ae8:	c6 2f       	mov	r28, r22

	unsigned char ii;

	fill(0x00);
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>

	switch (effect_id)
     af0:	8c 2f       	mov	r24, r28
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	8b 31       	cpi	r24, 0x1B	; 27
     af6:	91 05       	cpc	r25, r1
     af8:	08 f0       	brcs	.+2      	; 0xafc <_ZN14EffectLauncher6launchE8EffectId+0x1a>
     afa:	b9 c1       	rjmp	.+882    	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
     afc:	fc 01       	movw	r30, r24
     afe:	e6 5d       	subi	r30, 0xD6	; 214
     b00:	ff 4f       	sbci	r31, 0xFF	; 255
     b02:	0c 94 f0 18 	jmp	0x31e0	; 0x31e0 <__tablejump2__>
	{
		case EffectId::RAIN:
		effect_rain(100);
     b06:	84 e6       	ldi	r24, 0x64	; 100
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_Z11effect_raini>
		break;
     b0e:	af c1       	rjmp	.+862    	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		
		case EffectId::RANDOM_Z:
		sendvoxels_rand_z(20,220,2000);
     b10:	40 ed       	ldi	r20, 0xD0	; 208
     b12:	57 e0       	ldi	r21, 0x07	; 7
     b14:	6c ed       	ldi	r22, 0xDC	; 220
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	84 e1       	ldi	r24, 0x14	; 20
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_Z17sendvoxels_rand_ziii>
		break;
     b20:	a6 c1       	rjmp	.+844    	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::ARROW_SPIN:
		effect_smileyspin(2,1000,2);	//arrow spin
     b22:	42 e0       	ldi	r20, 0x02	; 2
     b24:	68 ee       	ldi	r22, 0xE8	; 232
     b26:	73 e0       	ldi	r23, 0x03	; 3
     b28:	82 e0       	ldi	r24, 0x02	; 2
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 ef 08 	call	0x11de	; 0x11de <_Z17effect_smileyspiniic>
		break;
     b30:	9e c1       	rjmp	.+828    	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
				
		case EffectId::RANDOM_FILLER:
		effect_random_filler(5,1);
     b32:	61 e0       	ldi	r22, 0x01	; 1
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	85 e0       	ldi	r24, 0x05	; 5
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_Z20effect_random_fillerii>
		effect_random_filler(5,0);
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	85 e0       	ldi	r24, 0x05	; 5
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_Z20effect_random_fillerii>
		effect_random_filler(5,1);
     b4a:	61 e0       	ldi	r22, 0x01	; 1
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	85 e0       	ldi	r24, 0x05	; 5
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_Z20effect_random_fillerii>
		effect_random_filler(5,0);
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	85 e0       	ldi	r24, 0x05	; 5
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_Z20effect_random_fillerii>
		break;
     b62:	85 c1       	rjmp	.+778    	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::Z_UPDOWN:
		effect_z_updown(15,1000);
     b64:	68 ee       	ldi	r22, 0xE8	; 232
     b66:	73 e0       	ldi	r23, 0x03	; 3
     b68:	8f e0       	ldi	r24, 0x0F	; 15
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_Z15effect_z_updownii>
		break;
     b70:	7e c1       	rjmp	.+764    	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::WORMSQUEEZE:
		effect_wormsqueeze (2, AXIS_Z, -1, 100, 1000);
     b72:	08 ee       	ldi	r16, 0xE8	; 232
     b74:	13 e0       	ldi	r17, 0x03	; 3
     b76:	24 e6       	ldi	r18, 0x64	; 100
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	4f ef       	ldi	r20, 0xFF	; 255
     b7c:	5f ef       	ldi	r21, 0xFF	; 255
     b7e:	6a e7       	ldi	r22, 0x7A	; 122
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_Z18effect_wormsqueezeiiiii>
		break;
     b8a:	71 c1       	rjmp	.+738    	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::BLINKY2:
		effect_blinky2();
     b8c:	0e 94 04 0c 	call	0x1808	; 0x1808 <_Z14effect_blinky2v>
		break;
     b90:	6e c1       	rjmp	.+732    	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>

	unsigned char ii;

	fill(0x00);

	switch (effect_id)
     b92:	c0 e0       	ldi	r28, 0x00	; 0
		break;
		
		case EffectId::BOX_WIREFRAME:
		for (ii=0;ii<8;ii++)
		{
			effect_box_shrink_grow (1, ii%4, ii & 0x04, 450);
     b94:	4c 2f       	mov	r20, r28
     b96:	44 70       	andi	r20, 0x04	; 4
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	6c 2f       	mov	r22, r28
     b9c:	63 70       	andi	r22, 0x03	; 3
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	22 ec       	ldi	r18, 0xC2	; 194
     ba2:	31 e0       	ldi	r19, 0x01	; 1
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_Z22effect_box_shrink_growiiij>
		case EffectId::BLINKY2:
		effect_blinky2();
		break;
		
		case EffectId::BOX_WIREFRAME:
		for (ii=0;ii<8;ii++)
     bac:	cf 5f       	subi	r28, 0xFF	; 255
     bae:	c8 30       	cpi	r28, 0x08	; 8
     bb0:	89 f7       	brne	.-30     	; 0xb94 <_ZN14EffectLauncher6launchE8EffectId+0xb2>
		{
			effect_box_shrink_grow (1, ii%4, ii & 0x04, 450);
		}

		case EffectId::PATH_BITMAP_HEART:
		effect_path_bitmap(700,6,3);
     bb2:	43 e0       	ldi	r20, 0x03	; 3
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	66 e0       	ldi	r22, 0x06	; 6
     bb8:	8c eb       	ldi	r24, 0xBC	; 188
     bba:	92 e0       	ldi	r25, 0x02	; 2
     bbc:	0e 94 55 08 	call	0x10aa	; 0x10aa <_Z18effect_path_bitmapici>
		break;
     bc0:	56 c1       	rjmp	.+684    	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		effect_box_woopwoop(800,0);
		effect_box_woopwoop(800,1);
		break;
		
		case EffectId::PLANBOING:
		effect_planboing (AXIS_Z, 400);
     bc2:	60 e9       	ldi	r22, 0x90	; 144
     bc4:	71 e0       	ldi	r23, 0x01	; 1
     bc6:	8a e7       	ldi	r24, 0x7A	; 122
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <_Z16effect_planboingii>
		effect_planboing (AXIS_X, 400);
     bce:	60 e9       	ldi	r22, 0x90	; 144
     bd0:	71 e0       	ldi	r23, 0x01	; 1
     bd2:	88 e7       	ldi	r24, 0x78	; 120
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <_Z16effect_planboingii>
		effect_planboing (AXIS_Y, 400);
     bda:	60 e9       	ldi	r22, 0x90	; 144
     bdc:	71 e0       	ldi	r23, 0x01	; 1
     bde:	89 e7       	ldi	r24, 0x79	; 121
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <_Z16effect_planboingii>
		effect_planboing (AXIS_Z, 400);
     be6:	60 e9       	ldi	r22, 0x90	; 144
     be8:	71 e0       	ldi	r23, 0x01	; 1
     bea:	8a e7       	ldi	r24, 0x7A	; 122
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <_Z16effect_planboingii>
		effect_planboing (AXIS_X, 400);
     bf2:	60 e9       	ldi	r22, 0x90	; 144
     bf4:	71 e0       	ldi	r23, 0x01	; 1
     bf6:	88 e7       	ldi	r24, 0x78	; 120
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <_Z16effect_planboingii>
		effect_planboing (AXIS_Y, 400);
     bfe:	60 e9       	ldi	r22, 0x90	; 144
     c00:	71 e0       	ldi	r23, 0x01	; 1
     c02:	89 e7       	ldi	r24, 0x79	; 121
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <_Z16effect_planboingii>
		fill(0x00);
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
		break;
     c10:	2e c1       	rjmp	.+604    	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::TELCSTAIRS:
		fill(0x00);
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
		effect_telcstairs(0,800,0xff);
     c18:	4f ef       	ldi	r20, 0xFF	; 255
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	60 e2       	ldi	r22, 0x20	; 32
     c1e:	73 e0       	ldi	r23, 0x03	; 3
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_Z17effect_telcstairsiii>
		effect_telcstairs(0,800,0x00);
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	60 e2       	ldi	r22, 0x20	; 32
     c2e:	73 e0       	ldi	r23, 0x03	; 3
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_Z17effect_telcstairsiii>
		effect_telcstairs(1,800,0xff);
     c38:	4f ef       	ldi	r20, 0xFF	; 255
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	60 e2       	ldi	r22, 0x20	; 32
     c3e:	73 e0       	ldi	r23, 0x03	; 3
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_Z17effect_telcstairsiii>
		effect_telcstairs(1,800,0xff);
     c48:	4f ef       	ldi	r20, 0xFF	; 255
     c4a:	50 e0       	ldi	r21, 0x00	; 0
     c4c:	60 e2       	ldi	r22, 0x20	; 32
     c4e:	73 e0       	ldi	r23, 0x03	; 3
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_Z17effect_telcstairsiii>
		break;
     c58:	0a c1       	rjmp	.+532    	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::AXIS_RANDSUSPEND:
		effect_axis_updown_randsuspend(AXIS_Z, 550,5000,0);
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	48 e8       	ldi	r20, 0x88	; 136
     c60:	53 e1       	ldi	r21, 0x13	; 19
     c62:	66 e2       	ldi	r22, 0x26	; 38
     c64:	72 e0       	ldi	r23, 0x02	; 2
     c66:	8a e7       	ldi	r24, 0x7A	; 122
     c68:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z30effect_axis_updown_randsuspendciii>
		effect_axis_updown_randsuspend(AXIS_Z, 550,5000,1);
     c6c:	21 e0       	ldi	r18, 0x01	; 1
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	48 e8       	ldi	r20, 0x88	; 136
     c72:	53 e1       	ldi	r21, 0x13	; 19
     c74:	66 e2       	ldi	r22, 0x26	; 38
     c76:	72 e0       	ldi	r23, 0x02	; 2
     c78:	8a e7       	ldi	r24, 0x7A	; 122
     c7a:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z30effect_axis_updown_randsuspendciii>
		effect_axis_updown_randsuspend(AXIS_Z, 550,5000,0);
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	48 e8       	ldi	r20, 0x88	; 136
     c84:	53 e1       	ldi	r21, 0x13	; 19
     c86:	66 e2       	ldi	r22, 0x26	; 38
     c88:	72 e0       	ldi	r23, 0x02	; 2
     c8a:	8a e7       	ldi	r24, 0x7A	; 122
     c8c:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z30effect_axis_updown_randsuspendciii>
		effect_axis_updown_randsuspend(AXIS_Z, 550,5000,1);
     c90:	21 e0       	ldi	r18, 0x01	; 1
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	48 e8       	ldi	r20, 0x88	; 136
     c96:	53 e1       	ldi	r21, 0x13	; 19
     c98:	66 e2       	ldi	r22, 0x26	; 38
     c9a:	72 e0       	ldi	r23, 0x02	; 2
     c9c:	8a e7       	ldi	r24, 0x7A	; 122
     c9e:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z30effect_axis_updown_randsuspendciii>
		effect_axis_updown_randsuspend(AXIS_X, 550,5000,0);
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	48 e8       	ldi	r20, 0x88	; 136
     ca8:	53 e1       	ldi	r21, 0x13	; 19
     caa:	66 e2       	ldi	r22, 0x26	; 38
     cac:	72 e0       	ldi	r23, 0x02	; 2
     cae:	88 e7       	ldi	r24, 0x78	; 120
     cb0:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z30effect_axis_updown_randsuspendciii>
		effect_axis_updown_randsuspend(AXIS_X, 550,5000,1);
     cb4:	21 e0       	ldi	r18, 0x01	; 1
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	48 e8       	ldi	r20, 0x88	; 136
     cba:	53 e1       	ldi	r21, 0x13	; 19
     cbc:	66 e2       	ldi	r22, 0x26	; 38
     cbe:	72 e0       	ldi	r23, 0x02	; 2
     cc0:	88 e7       	ldi	r24, 0x78	; 120
     cc2:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z30effect_axis_updown_randsuspendciii>
		effect_axis_updown_randsuspend(AXIS_Y, 550,5000,0);
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	48 e8       	ldi	r20, 0x88	; 136
     ccc:	53 e1       	ldi	r21, 0x13	; 19
     cce:	66 e2       	ldi	r22, 0x26	; 38
     cd0:	72 e0       	ldi	r23, 0x02	; 2
     cd2:	89 e7       	ldi	r24, 0x79	; 121
     cd4:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z30effect_axis_updown_randsuspendciii>
		effect_axis_updown_randsuspend(AXIS_Y, 550,5000,1);
     cd8:	21 e0       	ldi	r18, 0x01	; 1
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	48 e8       	ldi	r20, 0x88	; 136
     cde:	53 e1       	ldi	r21, 0x13	; 19
     ce0:	66 e2       	ldi	r22, 0x26	; 38
     ce2:	72 e0       	ldi	r23, 0x02	; 2
     ce4:	89 e7       	ldi	r24, 0x79	; 121
     ce6:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z30effect_axis_updown_randsuspendciii>
		break;
     cea:	c1 c0       	rjmp	.+386    	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::LOADBAR:
		effect_loadbar(700);
     cec:	8c eb       	ldi	r24, 0xBC	; 188
     cee:	92 e0       	ldi	r25, 0x02	; 2
     cf0:	0e 94 9f 14 	call	0x293e	; 0x293e <_Z14effect_loadbari>
		break;
     cf4:	bc c0       	rjmp	.+376    	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::SMILEY_SPIN:
		effect_smileyspin(2,1000,0);	//smiley spin
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	68 ee       	ldi	r22, 0xE8	; 232
     cfa:	73 e0       	ldi	r23, 0x03	; 3
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	0e 94 ef 08 	call	0x11de	; 0x11de <_Z17effect_smileyspiniic>
		break;
     d04:	b4 c0       	rjmp	.+360    	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::WORMSQUEEZE2:
		effect_wormsqueeze (1, AXIS_Z, 1, 100, 1000);
     d06:	08 ee       	ldi	r16, 0xE8	; 232
     d08:	13 e0       	ldi	r17, 0x03	; 3
     d0a:	24 e6       	ldi	r18, 0x64	; 100
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	41 e0       	ldi	r20, 0x01	; 1
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	6a e7       	ldi	r22, 0x7A	; 122
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_Z18effect_wormsqueezeiiiii>
		break;
     d1e:	a7 c0       	rjmp	.+334    	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::BOXSIDE_RANDSEND_PARALEEL:
		effect_boxside_randsend_parallel (AXIS_Z, 0 , 200,1);
     d20:	21 e0       	ldi	r18, 0x01	; 1
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	48 ec       	ldi	r20, 0xC8	; 200
     d26:	50 e0       	ldi	r21, 0x00	; 0
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	8a e7       	ldi	r24, 0x7A	; 122
     d2e:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_Z32effect_boxside_randsend_parallelciii>
		delay_ms(1500);
     d32:	8c ed       	ldi	r24, 0xDC	; 220
     d34:	95 e0       	ldi	r25, 0x05	; 5
     d36:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
		effect_boxside_randsend_parallel (AXIS_Z, 1 , 200,1);
     d3a:	21 e0       	ldi	r18, 0x01	; 1
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	48 ec       	ldi	r20, 0xC8	; 200
     d40:	50 e0       	ldi	r21, 0x00	; 0
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	8a e7       	ldi	r24, 0x7A	; 122
     d48:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_Z32effect_boxside_randsend_parallelciii>
		delay_ms(1500);
     d4c:	8c ed       	ldi	r24, 0xDC	; 220
     d4e:	95 e0       	ldi	r25, 0x05	; 5
     d50:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
		
		effect_boxside_randsend_parallel (AXIS_Z, 0 , 200,2);
     d54:	22 e0       	ldi	r18, 0x02	; 2
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	48 ec       	ldi	r20, 0xC8	; 200
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	8a e7       	ldi	r24, 0x7A	; 122
     d62:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_Z32effect_boxside_randsend_parallelciii>
		delay_ms(1500);
     d66:	8c ed       	ldi	r24, 0xDC	; 220
     d68:	95 e0       	ldi	r25, 0x05	; 5
     d6a:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
		effect_boxside_randsend_parallel (AXIS_Z, 1 , 200,2);
     d6e:	22 e0       	ldi	r18, 0x02	; 2
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	48 ec       	ldi	r20, 0xC8	; 200
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	61 e0       	ldi	r22, 0x01	; 1
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	8a e7       	ldi	r24, 0x7A	; 122
     d7c:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_Z32effect_boxside_randsend_parallelciii>
		delay_ms(1500);
     d80:	8c ed       	ldi	r24, 0xDC	; 220
     d82:	95 e0       	ldi	r25, 0x05	; 5
     d84:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
		
		effect_boxside_randsend_parallel (AXIS_Y, 0 , 200,1);
     d88:	21 e0       	ldi	r18, 0x01	; 1
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	48 ec       	ldi	r20, 0xC8	; 200
     d8e:	50 e0       	ldi	r21, 0x00	; 0
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	89 e7       	ldi	r24, 0x79	; 121
     d96:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_Z32effect_boxside_randsend_parallelciii>
		delay_ms(1500);
     d9a:	8c ed       	ldi	r24, 0xDC	; 220
     d9c:	95 e0       	ldi	r25, 0x05	; 5
     d9e:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
		effect_boxside_randsend_parallel (AXIS_Y, 1 , 200,1);
     da2:	21 e0       	ldi	r18, 0x01	; 1
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	48 ec       	ldi	r20, 0xC8	; 200
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	61 e0       	ldi	r22, 0x01	; 1
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	89 e7       	ldi	r24, 0x79	; 121
     db0:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_Z32effect_boxside_randsend_parallelciii>
		delay_ms(1500);
     db4:	8c ed       	ldi	r24, 0xDC	; 220
     db6:	95 e0       	ldi	r25, 0x05	; 5
     db8:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
		break;
     dbc:	58 c0       	rjmp	.+176    	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::PATH_BITMAP:
		effect_path_bitmap(700,2,3);
     dbe:	43 e0       	ldi	r20, 0x03	; 3
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	62 e0       	ldi	r22, 0x02	; 2
     dc4:	8c eb       	ldi	r24, 0xBC	; 188
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	0e 94 55 08 	call	0x10aa	; 0x10aa <_Z18effect_path_bitmapici>
		break;
     dcc:	50 c0       	rjmp	.+160    	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::BOINGBOING:
		boingboing(250, 600, 0x01, 0x02);
     dce:	22 e0       	ldi	r18, 0x02	; 2
     dd0:	41 e0       	ldi	r20, 0x01	; 1
     dd2:	68 e5       	ldi	r22, 0x58	; 88
     dd4:	72 e0       	ldi	r23, 0x02	; 2
     dd6:	8a ef       	ldi	r24, 0xFA	; 250
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <_Z10boingboingjihh>
		break;
     dde:	47 c0       	rjmp	.+142    	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::WORMSQUEEZE3:
		effect_wormsqueeze (1, AXIS_Z, -1, 100, 1000);
     de0:	08 ee       	ldi	r16, 0xE8	; 232
     de2:	13 e0       	ldi	r17, 0x03	; 3
     de4:	24 e6       	ldi	r18, 0x64	; 100
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	4f ef       	ldi	r20, 0xFF	; 255
     dea:	5f ef       	ldi	r21, 0xFF	; 255
     dec:	6a e7       	ldi	r22, 0x7A	; 122
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_Z18effect_wormsqueezeiiiii>
		break;
     df8:	3a c0       	rjmp	.+116    	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::RANDOM_SPARKLE:
		effect_random_sparkle();
     dfa:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <_Z21effect_random_sparklev>
		break;
     dfe:	37 c0       	rjmp	.+110    	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::WORMSQUEEZE4:
		effect_wormsqueeze (1, AXIS_Z, -1, 100, 1000);
     e00:	08 ee       	ldi	r16, 0xE8	; 232
     e02:	13 e0       	ldi	r17, 0x03	; 3
     e04:	24 e6       	ldi	r18, 0x64	; 100
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	4f ef       	ldi	r20, 0xFF	; 255
     e0a:	5f ef       	ldi	r21, 0xFF	; 255
     e0c:	6a e7       	ldi	r22, 0x7A	; 122
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_Z18effect_wormsqueezeiiiii>
		break;
     e18:	2a c0       	rjmp	.+84     	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::BOINGBOING2:
		boingboing(250, 600, 0x01, 0x03);
     e1a:	23 e0       	ldi	r18, 0x03	; 3
     e1c:	41 e0       	ldi	r20, 0x01	; 1
     e1e:	68 e5       	ldi	r22, 0x58	; 88
     e20:	72 e0       	ldi	r23, 0x02	; 2
     e22:	8a ef       	ldi	r24, 0xFA	; 250
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <_Z10boingboingjihh>
		break;
     e2a:	21 c0       	rjmp	.+66     	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::STRINGFLY2:
		effect_stringfly2(const_cast<char*>("REGINA"));
     e2c:	84 e8       	ldi	r24, 0x84	; 132
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 55 0b 	call	0x16aa	; 0x16aa <_Z17effect_stringfly2Pc>
		break;
     e34:	1c c0       	rjmp	.+56     	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::HEART_SPIN:
		effect_smileyspin(2,1000,6);	//heart spin
     e36:	46 e0       	ldi	r20, 0x06	; 6
     e38:	68 ee       	ldi	r22, 0xE8	; 232
     e3a:	73 e0       	ldi	r23, 0x03	; 3
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 ef 08 	call	0x11de	; 0x11de <_Z17effect_smileyspiniic>
		break;
     e44:	14 c0       	rjmp	.+40     	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::PATH_AROUND:
		effect_rand_patharound(200,500);
     e46:	64 ef       	ldi	r22, 0xF4	; 244
     e48:	71 e0       	ldi	r23, 0x01	; 1
     e4a:	88 ec       	ldi	r24, 0xC8	; 200
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <_Z22effect_rand_patharoundii>
		break;
     e52:	0d c0       	rjmp	.+26     	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::PATH_SPIRAL:
		effect_pathspiral(100,500);
     e54:	64 ef       	ldi	r22, 0xF4	; 244
     e56:	71 e0       	ldi	r23, 0x01	; 1
     e58:	84 e6       	ldi	r24, 0x64	; 100
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 93 07 	call	0xf26	; 0xf26 <_Z17effect_pathspiralii>
		break;
     e60:	06 c0       	rjmp	.+12     	; 0xe6e <_ZN14EffectLauncher6launchE8EffectId+0x38c>
		
		case EffectId::GAME_OF_LIFE:
		gol_play(20, 400);
     e62:	60 e9       	ldi	r22, 0x90	; 144
     e64:	71 e0       	ldi	r23, 0x01	; 1
     e66:	84 e1       	ldi	r24, 0x14	; 20
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 15 18 	call	0x302a	; 0x302a <_Z8gol_playij>
		break;
		
		

	}
}
     e6e:	cf 91       	pop	r28
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	08 95       	ret

00000e76 <_Z15effect_pathmovePhi>:
			sendvoxel_z(x,y,z,delay);
			delay_ms(wait);
			loop--; // one down, loop-- to go. when this hits 0, the loop exits.
		}
	}
}
     e76:	cf 92       	push	r12
     e78:	df 92       	push	r13
     e7a:	ef 92       	push	r14
     e7c:	ff 92       	push	r15
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	6c 01       	movw	r12, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	18 16       	cp	r1, r24
     e8e:	19 06       	cpc	r1, r25
     e90:	f4 f5       	brge	.+124    	; 0xf0e <_Z15effect_pathmovePhi+0x98>
     e92:	62 50       	subi	r22, 0x02	; 2
     e94:	71 09       	sbc	r23, r1
     e96:	86 01       	movw	r16, r12
     e98:	06 0f       	add	r16, r22
     e9a:	17 1f       	adc	r17, r23
     e9c:	76 01       	movw	r14, r12
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	e8 1a       	sub	r14, r24
     ea2:	f1 08       	sbc	r15, r1
     ea4:	c0 e0       	ldi	r28, 0x00	; 0
     ea6:	d0 e0       	ldi	r29, 0x00	; 0
     ea8:	f8 01       	movw	r30, r16
     eaa:	80 81       	ld	r24, Z
     eac:	68 2f       	mov	r22, r24
     eae:	6f 70       	andi	r22, 0x0F	; 15
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	82 95       	swap	r24
     eb4:	8f 70       	andi	r24, 0x0F	; 15
     eb6:	ae 01       	movw	r20, r28
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 23 01 	call	0x246	; 0x246 <_Z8getvoxeliii>
     ebe:	f8 01       	movw	r30, r16
     ec0:	91 81       	ldd	r25, Z+1	; 0x01
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	69 2f       	mov	r22, r25
     ec8:	6f 70       	andi	r22, 0x0F	; 15
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	89 2f       	mov	r24, r25
     ece:	82 95       	swap	r24
     ed0:	8f 70       	andi	r24, 0x0F	; 15
     ed2:	ae 01       	movw	r20, r28
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 47 01 	call	0x28e	; 0x28e <_Z10altervoxeliiii>
     eda:	21 96       	adiw	r28, 0x01	; 1
     edc:	c8 30       	cpi	r28, 0x08	; 8
     ede:	d1 05       	cpc	r29, r1
     ee0:	19 f7       	brne	.-58     	; 0xea8 <_Z15effect_pathmovePhi+0x32>
     ee2:	01 50       	subi	r16, 0x01	; 1
     ee4:	11 09       	sbc	r17, r1
     ee6:	e0 16       	cp	r14, r16
     ee8:	f1 06       	cpc	r15, r17
     eea:	e1 f6       	brne	.-72     	; 0xea4 <_Z15effect_pathmovePhi+0x2e>
     eec:	10 c0       	rjmp	.+32     	; 0xf0e <_Z15effect_pathmovePhi+0x98>
     eee:	f6 01       	movw	r30, r12
     ef0:	80 81       	ld	r24, Z
     ef2:	68 2f       	mov	r22, r24
     ef4:	6f 70       	andi	r22, 0x0F	; 15
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	82 95       	swap	r24
     efa:	8f 70       	andi	r24, 0x0F	; 15
     efc:	ae 01       	movw	r20, r28
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z8clrvoxeliii>
     f04:	21 96       	adiw	r28, 0x01	; 1
     f06:	c8 30       	cpi	r28, 0x08	; 8
     f08:	d1 05       	cpc	r29, r1
     f0a:	89 f7       	brne	.-30     	; 0xeee <_Z15effect_pathmovePhi+0x78>
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <_Z15effect_pathmovePhi+0x9e>
     f0e:	c0 e0       	ldi	r28, 0x00	; 0
     f10:	d0 e0       	ldi	r29, 0x00	; 0
     f12:	ed cf       	rjmp	.-38     	; 0xeee <_Z15effect_pathmovePhi+0x78>
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	df 90       	pop	r13
     f22:	cf 90       	pop	r12
     f24:	08 95       	ret

00000f26 <_Z17effect_pathspiralii>:
     f26:	cf 92       	push	r12
     f28:	df 92       	push	r13
     f2a:	ef 92       	push	r14
     f2c:	ff 92       	push	r15
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	60 97       	sbiw	r28, 0x10	; 16
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	7c 01       	movw	r14, r24
     f48:	6b 01       	movw	r12, r22
     f4a:	40 e1       	ldi	r20, 0x10	; 16
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	be 01       	movw	r22, r28
     f50:	6f 5f       	subi	r22, 0xFF	; 255
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <_Z12font_getpathhPhi>
     f5a:	1e 14       	cp	r1, r14
     f5c:	1f 04       	cpc	r1, r15
     f5e:	0c f5       	brge	.+66     	; 0xfa2 <_Z17effect_pathspiralii+0x7c>
     f60:	00 e0       	ldi	r16, 0x00	; 0
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	a8 01       	movw	r20, r16
     f66:	47 70       	andi	r20, 0x07	; 7
     f68:	50 78       	andi	r21, 0x80	; 128
     f6a:	55 23       	and	r21, r21
     f6c:	34 f4       	brge	.+12     	; 0xf7a <_Z17effect_pathspiralii+0x54>
     f6e:	41 50       	subi	r20, 0x01	; 1
     f70:	51 09       	sbc	r21, r1
     f72:	48 6f       	ori	r20, 0xF8	; 248
     f74:	5f 6f       	ori	r21, 0xFF	; 255
     f76:	4f 5f       	subi	r20, 0xFF	; 255
     f78:	5f 4f       	sbci	r21, 0xFF	; 255
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	84 e0       	ldi	r24, 0x04	; 4
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
     f86:	c6 01       	movw	r24, r12
     f88:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
     f8c:	6c e1       	ldi	r22, 0x1C	; 28
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	ce 01       	movw	r24, r28
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	0e 94 3b 07 	call	0xe76	; 0xe76 <_Z15effect_pathmovePhi>
     f98:	0f 5f       	subi	r16, 0xFF	; 255
     f9a:	1f 4f       	sbci	r17, 0xFF	; 255
     f9c:	e0 16       	cp	r14, r16
     f9e:	f1 06       	cpc	r15, r17
     fa0:	09 f7       	brne	.-62     	; 0xf64 <_Z17effect_pathspiralii+0x3e>
     fa2:	60 96       	adiw	r28, 0x10	; 16
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	ff 90       	pop	r15
     fb8:	ef 90       	pop	r14
     fba:	df 90       	pop	r13
     fbc:	cf 90       	pop	r12
     fbe:	08 95       	ret

00000fc0 <_Z22effect_rand_patharoundii>:
     fc0:	4f 92       	push	r4
     fc2:	5f 92       	push	r5
     fc4:	6f 92       	push	r6
     fc6:	7f 92       	push	r7
     fc8:	8f 92       	push	r8
     fca:	9f 92       	push	r9
     fcc:	af 92       	push	r10
     fce:	bf 92       	push	r11
     fd0:	cf 92       	push	r12
     fd2:	df 92       	push	r13
     fd4:	ef 92       	push	r14
     fd6:	ff 92       	push	r15
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	6c 97       	sbiw	r28, 0x1c	; 28
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	7c 01       	movw	r14, r24
     ff2:	6b 01       	movw	r12, r22
     ff4:	4c e1       	ldi	r20, 0x1C	; 28
     ff6:	50 e0       	ldi	r21, 0x00	; 0
     ff8:	be 01       	movw	r22, r28
     ffa:	6f 5f       	subi	r22, 0xFF	; 255
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <_Z12font_getpathhPhi>
    1004:	1e 14       	cp	r1, r14
    1006:	1f 04       	cpc	r1, r15
    1008:	cc f5       	brge	.+114    	; 0x107c <_Z22effect_rand_patharoundii+0xbc>
    100a:	00 e0       	ldi	r16, 0x00	; 0
    100c:	10 e0       	ldi	r17, 0x00	; 0
    100e:	68 94       	set
    1010:	88 24       	eor	r8, r8
    1012:	82 f8       	bld	r8, 2
    1014:	91 2c       	mov	r9, r1
    1016:	0f 2e       	mov	r0, r31
    1018:	f3 e0       	ldi	r31, 0x03	; 3
    101a:	af 2e       	mov	r10, r31
    101c:	b1 2c       	mov	r11, r1
    101e:	f0 2d       	mov	r31, r0
    1020:	0f 2e       	mov	r0, r31
    1022:	f7 e0       	ldi	r31, 0x07	; 7
    1024:	6f 2e       	mov	r6, r31
    1026:	f0 2d       	mov	r31, r0
    1028:	71 2c       	mov	r7, r1
    102a:	41 2c       	mov	r4, r1
    102c:	51 2c       	mov	r5, r1
    102e:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1032:	b5 01       	movw	r22, r10
    1034:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	88 0d       	add	r24, r8
    103c:	99 1d       	adc	r25, r9
    103e:	88 30       	cpi	r24, 0x08	; 8
    1040:	91 05       	cpc	r25, r1
    1042:	14 f0       	brlt	.+4      	; 0x1048 <_Z22effect_rand_patharoundii+0x88>
    1044:	86 2d       	mov	r24, r6
    1046:	97 2d       	mov	r25, r7
    1048:	4c 01       	movw	r8, r24
    104a:	99 23       	and	r25, r25
    104c:	14 f4       	brge	.+4      	; 0x1052 <_Z22effect_rand_patharoundii+0x92>
    104e:	84 2c       	mov	r8, r4
    1050:	95 2c       	mov	r9, r5
    1052:	6c e1       	ldi	r22, 0x1C	; 28
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	ce 01       	movw	r24, r28
    1058:	01 96       	adiw	r24, 0x01	; 1
    105a:	0e 94 3b 07 	call	0xe76	; 0xe76 <_Z15effect_pathmovePhi>
    105e:	a4 01       	movw	r20, r8
    1060:	66 2d       	mov	r22, r6
    1062:	77 2d       	mov	r23, r7
    1064:	84 2d       	mov	r24, r4
    1066:	95 2d       	mov	r25, r5
    1068:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
    106c:	c6 01       	movw	r24, r12
    106e:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    1072:	0f 5f       	subi	r16, 0xFF	; 255
    1074:	1f 4f       	sbci	r17, 0xFF	; 255
    1076:	e0 16       	cp	r14, r16
    1078:	f1 06       	cpc	r15, r17
    107a:	c9 f6       	brne	.-78     	; 0x102e <_Z22effect_rand_patharoundii+0x6e>
    107c:	6c 96       	adiw	r28, 0x1c	; 28
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	ff 90       	pop	r15
    1092:	ef 90       	pop	r14
    1094:	df 90       	pop	r13
    1096:	cf 90       	pop	r12
    1098:	bf 90       	pop	r11
    109a:	af 90       	pop	r10
    109c:	9f 90       	pop	r9
    109e:	8f 90       	pop	r8
    10a0:	7f 90       	pop	r7
    10a2:	6f 90       	pop	r6
    10a4:	5f 90       	pop	r5
    10a6:	4f 90       	pop	r4
    10a8:	08 95       	ret

000010aa <_Z18effect_path_bitmapici>:
    10aa:	5f 92       	push	r5
    10ac:	6f 92       	push	r6
    10ae:	7f 92       	push	r7
    10b0:	8f 92       	push	r8
    10b2:	9f 92       	push	r9
    10b4:	af 92       	push	r10
    10b6:	bf 92       	push	r11
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	6c 97       	sbiw	r28, 0x1c	; 28
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	68 2e       	mov	r6, r24
    10da:	59 2e       	mov	r5, r25
    10dc:	d6 2e       	mov	r13, r22
    10de:	4a 01       	movw	r8, r20
    10e0:	4c e1       	ldi	r20, 0x1C	; 28
    10e2:	50 e0       	ldi	r21, 0x00	; 0
    10e4:	be 01       	movw	r22, r28
    10e6:	6f 5f       	subi	r22, 0xFF	; 255
    10e8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <_Z12font_getpathhPhi>
    10f0:	18 14       	cp	r1, r8
    10f2:	19 04       	cpc	r1, r9
    10f4:	0c f0       	brlt	.+2      	; 0x10f8 <_Z18effect_path_bitmapici+0x4e>
    10f6:	5a c0       	rjmp	.+180    	; 0x11ac <_Z18effect_path_bitmapici+0x102>
    10f8:	a1 2c       	mov	r10, r1
    10fa:	b1 2c       	mov	r11, r1
    10fc:	76 2c       	mov	r7, r6
    10fe:	c5 2c       	mov	r12, r5
    1100:	e1 2c       	mov	r14, r1
    1102:	0f 2e       	mov	r0, r31
    1104:	f7 e0       	ldi	r31, 0x07	; 7
    1106:	ff 2e       	mov	r15, r31
    1108:	f0 2d       	mov	r31, r0
    110a:	00 e0       	ldi	r16, 0x00	; 0
    110c:	10 e0       	ldi	r17, 0x00	; 0
    110e:	4e 2d       	mov	r20, r14
    1110:	6f 2d       	mov	r22, r15
    1112:	8d 2d       	mov	r24, r13
    1114:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <_Z19font_getbitmappixelccc>
    1118:	88 23       	and	r24, r24
    111a:	41 f0       	breq	.+16     	; 0x112c <_Z18effect_path_bitmapici+0x82>
    111c:	a8 01       	movw	r20, r16
    111e:	67 e0       	ldi	r22, 0x07	; 7
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
    112a:	07 c0       	rjmp	.+14     	; 0x113a <_Z18effect_path_bitmapici+0x90>
    112c:	a8 01       	movw	r20, r16
    112e:	67 e0       	ldi	r22, 0x07	; 7
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z8clrvoxeliii>
    113a:	0f 5f       	subi	r16, 0xFF	; 255
    113c:	1f 4f       	sbci	r17, 0xFF	; 255
    113e:	fa 94       	dec	r15
    1140:	08 30       	cpi	r16, 0x08	; 8
    1142:	11 05       	cpc	r17, r1
    1144:	21 f7       	brne	.-56     	; 0x110e <_Z18effect_path_bitmapici+0x64>
    1146:	87 2d       	mov	r24, r7
    1148:	9c 2d       	mov	r25, r12
    114a:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    114e:	6c e1       	ldi	r22, 0x1C	; 28
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	ce 01       	movw	r24, r28
    1154:	01 96       	adiw	r24, 0x01	; 1
    1156:	0e 94 3b 07 	call	0xe76	; 0xe76 <_Z15effect_pathmovePhi>
    115a:	e3 94       	inc	r14
    115c:	88 e0       	ldi	r24, 0x08	; 8
    115e:	e8 12       	cpse	r14, r24
    1160:	d0 cf       	rjmp	.-96     	; 0x1102 <_Z18effect_path_bitmapici+0x58>
    1162:	04 e1       	ldi	r16, 0x14	; 20
    1164:	10 e0       	ldi	r17, 0x00	; 0
    1166:	87 2d       	mov	r24, r7
    1168:	9c 2d       	mov	r25, r12
    116a:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    116e:	6c e1       	ldi	r22, 0x1C	; 28
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	ce 01       	movw	r24, r28
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	0e 94 3b 07 	call	0xe76	; 0xe76 <_Z15effect_pathmovePhi>
    117a:	01 50       	subi	r16, 0x01	; 1
    117c:	11 09       	sbc	r17, r1
    117e:	99 f7       	brne	.-26     	; 0x1166 <_Z18effect_path_bitmapici+0xbc>
    1180:	8f ef       	ldi	r24, 0xFF	; 255
    1182:	a8 1a       	sub	r10, r24
    1184:	b8 0a       	sbc	r11, r24
    1186:	8a 14       	cp	r8, r10
    1188:	9b 04       	cpc	r9, r11
    118a:	09 f0       	breq	.+2      	; 0x118e <_Z18effect_path_bitmapici+0xe4>
    118c:	b9 cf       	rjmp	.-142    	; 0x1100 <_Z18effect_path_bitmapici+0x56>
    118e:	0e c0       	rjmp	.+28     	; 0x11ac <_Z18effect_path_bitmapici+0x102>
    1190:	86 2d       	mov	r24, r6
    1192:	95 2d       	mov	r25, r5
    1194:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    1198:	6c e1       	ldi	r22, 0x1C	; 28
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	ce 01       	movw	r24, r28
    119e:	01 96       	adiw	r24, 0x01	; 1
    11a0:	0e 94 3b 07 	call	0xe76	; 0xe76 <_Z15effect_pathmovePhi>
    11a4:	01 50       	subi	r16, 0x01	; 1
    11a6:	11 09       	sbc	r17, r1
    11a8:	99 f7       	brne	.-26     	; 0x1190 <_Z18effect_path_bitmapici+0xe6>
    11aa:	03 c0       	rjmp	.+6      	; 0x11b2 <_Z18effect_path_bitmapici+0x108>
    11ac:	0a e0       	ldi	r16, 0x0A	; 10
    11ae:	10 e0       	ldi	r17, 0x00	; 0
    11b0:	ef cf       	rjmp	.-34     	; 0x1190 <_Z18effect_path_bitmapici+0xe6>
    11b2:	6c 96       	adiw	r28, 0x1c	; 28
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	ff 90       	pop	r15
    11c8:	ef 90       	pop	r14
    11ca:	df 90       	pop	r13
    11cc:	cf 90       	pop	r12
    11ce:	bf 90       	pop	r11
    11d0:	af 90       	pop	r10
    11d2:	9f 90       	pop	r9
    11d4:	8f 90       	pop	r8
    11d6:	7f 90       	pop	r7
    11d8:	6f 90       	pop	r6
    11da:	5f 90       	pop	r5
    11dc:	08 95       	ret

000011de <_Z17effect_smileyspiniic>:
    11de:	2f 92       	push	r2
    11e0:	3f 92       	push	r3
    11e2:	4f 92       	push	r4
    11e4:	5f 92       	push	r5
    11e6:	6f 92       	push	r6
    11e8:	7f 92       	push	r7
    11ea:	8f 92       	push	r8
    11ec:	9f 92       	push	r9
    11ee:	af 92       	push	r10
    11f0:	bf 92       	push	r11
    11f2:	cf 92       	push	r12
    11f4:	df 92       	push	r13
    11f6:	ef 92       	push	r14
    11f8:	ff 92       	push	r15
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	ae 97       	sbiw	r28, 0x2e	; 46
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	20 e2       	ldi	r18, 0x20	; 32
    1214:	e4 e6       	ldi	r30, 0x64	; 100
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	de 01       	movw	r26, r28
    121a:	11 96       	adiw	r26, 0x01	; 1
    121c:	01 90       	ld	r0, Z+
    121e:	0d 92       	st	X+, r0
    1220:	2a 95       	dec	r18
    1222:	e1 f7       	brne	.-8      	; 0x121c <_Z17effect_smileyspiniic+0x3e>
    1224:	18 16       	cp	r1, r24
    1226:	19 06       	cpc	r1, r25
    1228:	0c f0       	brlt	.+2      	; 0x122c <_Z17effect_smileyspiniic+0x4e>
    122a:	26 c2       	rjmp	.+1100   	; 0x1678 <_Z17effect_smileyspiniic+0x49a>
    122c:	9e a7       	std	Y+46, r25	; 0x2e
    122e:	8d a7       	std	Y+45, r24	; 0x2d
    1230:	1c a6       	std	Y+44, r1	; 0x2c
    1232:	1b a6       	std	Y+43, r1	; 0x2b
    1234:	6f a3       	std	Y+39, r22	; 0x27
    1236:	78 a7       	std	Y+40, r23	; 0x28
    1238:	74 2e       	mov	r7, r20
    123a:	27 e0       	ldi	r18, 0x07	; 7
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	3c a3       	std	Y+36, r19	; 0x24
    1240:	2b a3       	std	Y+35, r18	; 0x23
    1242:	1a a2       	std	Y+34, r1	; 0x22
    1244:	19 a2       	std	Y+33, r1	; 0x21
    1246:	41 2c       	mov	r4, r1
    1248:	51 2c       	mov	r5, r1
    124a:	37 2c       	mov	r3, r7
    124c:	41 14       	cp	r4, r1
    124e:	51 04       	cpc	r5, r1
    1250:	69 f4       	brne	.+26     	; 0x126c <_Z17effect_smileyspiniic+0x8e>
    1252:	89 a1       	ldd	r24, Y+33	; 0x21
    1254:	9a a1       	ldd	r25, Y+34	; 0x22
    1256:	01 96       	adiw	r24, 0x01	; 1
    1258:	9a a3       	std	Y+34, r25	; 0x22
    125a:	89 a3       	std	Y+33, r24	; 0x21
    125c:	04 97       	sbiw	r24, 0x04	; 4
    125e:	59 f4       	brne	.+22     	; 0x1276 <_Z17effect_smileyspiniic+0x98>
    1260:	1a a2       	std	Y+34, r1	; 0x22
    1262:	19 a2       	std	Y+33, r1	; 0x21
    1264:	44 24       	eor	r4, r4
    1266:	43 94       	inc	r4
    1268:	51 2c       	mov	r5, r1
    126a:	05 c0       	rjmp	.+10     	; 0x1276 <_Z17effect_smileyspiniic+0x98>
    126c:	e9 a1       	ldd	r30, Y+33	; 0x21
    126e:	fa a1       	ldd	r31, Y+34	; 0x22
    1270:	31 96       	adiw	r30, 0x01	; 1
    1272:	fa a3       	std	Y+34, r31	; 0x22
    1274:	e9 a3       	std	Y+33, r30	; 0x21
    1276:	89 a0       	ldd	r8, Y+33	; 0x21
    1278:	9a a0       	ldd	r9, Y+34	; 0x22
    127a:	88 0c       	add	r8, r8
    127c:	99 1c       	adc	r9, r9
    127e:	88 0c       	add	r8, r8
    1280:	99 1c       	adc	r9, r9
    1282:	88 0c       	add	r8, r8
    1284:	99 1c       	adc	r9, r9
    1286:	0f 2e       	mov	r0, r31
    1288:	ff e1       	ldi	r31, 0x1F	; 31
    128a:	6f 2e       	mov	r6, r31
    128c:	71 2c       	mov	r7, r1
    128e:	f0 2d       	mov	r31, r0
    1290:	68 18       	sub	r6, r8
    1292:	79 08       	sbc	r7, r9
    1294:	0f 2e       	mov	r0, r31
    1296:	f7 e0       	ldi	r31, 0x07	; 7
    1298:	2f 2e       	mov	r2, r31
    129a:	f0 2d       	mov	r31, r0
    129c:	a1 2c       	mov	r10, r1
    129e:	b1 2c       	mov	r11, r1
    12a0:	ee 24       	eor	r14, r14
    12a2:	e3 94       	inc	r14
    12a4:	f1 2c       	mov	r15, r1
    12a6:	ec 0e       	add	r14, r28
    12a8:	fd 1e       	adc	r15, r29
    12aa:	e6 0c       	add	r14, r6
    12ac:	f7 1c       	adc	r15, r7
    12ae:	cc 24       	eor	r12, r12
    12b0:	c3 94       	inc	r12
    12b2:	d1 2c       	mov	r13, r1
    12b4:	cc 0e       	add	r12, r28
    12b6:	dd 1e       	adc	r13, r29
    12b8:	c8 0c       	add	r12, r8
    12ba:	d9 1c       	adc	r13, r9
    12bc:	00 e0       	ldi	r16, 0x00	; 0
    12be:	10 e0       	ldi	r17, 0x00	; 0
    12c0:	40 2f       	mov	r20, r16
    12c2:	62 2d       	mov	r22, r2
    12c4:	83 2d       	mov	r24, r3
    12c6:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <_Z19font_getbitmappixelccc>
    12ca:	88 23       	and	r24, r24
    12cc:	91 f0       	breq	.+36     	; 0x12f2 <_Z17effect_smileyspiniic+0x114>
    12ce:	41 14       	cp	r4, r1
    12d0:	51 04       	cpc	r5, r1
    12d2:	41 f4       	brne	.+16     	; 0x12e4 <_Z17effect_smileyspiniic+0x106>
    12d4:	f6 01       	movw	r30, r12
    12d6:	60 81       	ld	r22, Z
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	a5 01       	movw	r20, r10
    12dc:	c8 01       	movw	r24, r16
    12de:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
    12e2:	07 c0       	rjmp	.+14     	; 0x12f2 <_Z17effect_smileyspiniic+0x114>
    12e4:	f7 01       	movw	r30, r14
    12e6:	60 81       	ld	r22, Z
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	a5 01       	movw	r20, r10
    12ec:	c8 01       	movw	r24, r16
    12ee:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
    12f2:	0f 5f       	subi	r16, 0xFF	; 255
    12f4:	1f 4f       	sbci	r17, 0xFF	; 255
    12f6:	f1 e0       	ldi	r31, 0x01	; 1
    12f8:	ef 1a       	sub	r14, r31
    12fa:	f1 08       	sbc	r15, r1
    12fc:	2f ef       	ldi	r18, 0xFF	; 255
    12fe:	c2 1a       	sub	r12, r18
    1300:	d2 0a       	sbc	r13, r18
    1302:	08 30       	cpi	r16, 0x08	; 8
    1304:	11 05       	cpc	r17, r1
    1306:	e1 f6       	brne	.-72     	; 0x12c0 <_Z17effect_smileyspiniic+0xe2>
    1308:	3f ef       	ldi	r19, 0xFF	; 255
    130a:	a3 1a       	sub	r10, r19
    130c:	b3 0a       	sbc	r11, r19
    130e:	2a 94       	dec	r2
    1310:	8f ef       	ldi	r24, 0xFF	; 255
    1312:	28 12       	cpse	r2, r24
    1314:	c5 cf       	rjmp	.-118    	; 0x12a0 <_Z17effect_smileyspiniic+0xc2>
    1316:	8f a1       	ldd	r24, Y+39	; 0x27
    1318:	98 a5       	ldd	r25, Y+40	; 0x28
    131a:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
    1324:	eb a1       	ldd	r30, Y+35	; 0x23
    1326:	fc a1       	ldd	r31, Y+36	; 0x24
    1328:	31 97       	sbiw	r30, 0x01	; 1
    132a:	fc a3       	std	Y+36, r31	; 0x24
    132c:	eb a3       	std	Y+35, r30	; 0x23
    132e:	ef 2b       	or	r30, r31
    1330:	09 f0       	breq	.+2      	; 0x1334 <_Z17effect_smileyspiniic+0x156>
    1332:	8c cf       	rjmp	.-232    	; 0x124c <_Z17effect_smileyspiniic+0x6e>
    1334:	73 2c       	mov	r7, r3
    1336:	27 e0       	ldi	r18, 0x07	; 7
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	3e a3       	std	Y+38, r19	; 0x26
    133c:	2d a3       	std	Y+37, r18	; 0x25
    133e:	1c a2       	std	Y+36, r1	; 0x24
    1340:	1b a2       	std	Y+35, r1	; 0x23
    1342:	21 2c       	mov	r2, r1
    1344:	31 2c       	mov	r3, r1
    1346:	21 14       	cp	r2, r1
    1348:	31 04       	cpc	r3, r1
    134a:	69 f4       	brne	.+26     	; 0x1366 <_Z17effect_smileyspiniic+0x188>
    134c:	8b a1       	ldd	r24, Y+35	; 0x23
    134e:	9c a1       	ldd	r25, Y+36	; 0x24
    1350:	01 96       	adiw	r24, 0x01	; 1
    1352:	9c a3       	std	Y+36, r25	; 0x24
    1354:	8b a3       	std	Y+35, r24	; 0x23
    1356:	04 97       	sbiw	r24, 0x04	; 4
    1358:	59 f4       	brne	.+22     	; 0x1370 <_Z17effect_smileyspiniic+0x192>
    135a:	1c a2       	std	Y+36, r1	; 0x24
    135c:	1b a2       	std	Y+35, r1	; 0x23
    135e:	22 24       	eor	r2, r2
    1360:	23 94       	inc	r2
    1362:	31 2c       	mov	r3, r1
    1364:	05 c0       	rjmp	.+10     	; 0x1370 <_Z17effect_smileyspiniic+0x192>
    1366:	eb a1       	ldd	r30, Y+35	; 0x23
    1368:	fc a1       	ldd	r31, Y+36	; 0x24
    136a:	31 96       	adiw	r30, 0x01	; 1
    136c:	fc a3       	std	Y+36, r31	; 0x24
    136e:	eb a3       	std	Y+35, r30	; 0x23
    1370:	8b a0       	ldd	r8, Y+35	; 0x23
    1372:	9c a0       	ldd	r9, Y+36	; 0x24
    1374:	88 0c       	add	r8, r8
    1376:	99 1c       	adc	r9, r9
    1378:	88 0c       	add	r8, r8
    137a:	99 1c       	adc	r9, r9
    137c:	88 0c       	add	r8, r8
    137e:	99 1c       	adc	r9, r9
    1380:	2f e1       	ldi	r18, 0x1F	; 31
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	28 19       	sub	r18, r8
    1386:	39 09       	sbc	r19, r9
    1388:	3a a3       	std	Y+34, r19	; 0x22
    138a:	29 a3       	std	Y+33, r18	; 0x21
    138c:	0f 2e       	mov	r0, r31
    138e:	f7 e0       	ldi	r31, 0x07	; 7
    1390:	4f 2e       	mov	r4, r31
    1392:	f0 2d       	mov	r31, r0
    1394:	a1 2c       	mov	r10, r1
    1396:	b1 2c       	mov	r11, r1
    1398:	cc 24       	eor	r12, r12
    139a:	c3 94       	inc	r12
    139c:	d1 2c       	mov	r13, r1
    139e:	cc 0e       	add	r12, r28
    13a0:	dd 1e       	adc	r13, r29
    13a2:	89 a1       	ldd	r24, Y+33	; 0x21
    13a4:	9a a1       	ldd	r25, Y+34	; 0x22
    13a6:	c8 0e       	add	r12, r24
    13a8:	d9 1e       	adc	r13, r25
    13aa:	ee 24       	eor	r14, r14
    13ac:	e3 94       	inc	r14
    13ae:	f1 2c       	mov	r15, r1
    13b0:	ec 0e       	add	r14, r28
    13b2:	fd 1e       	adc	r15, r29
    13b4:	e8 0c       	add	r14, r8
    13b6:	f9 1c       	adc	r15, r9
    13b8:	51 2c       	mov	r5, r1
    13ba:	07 e0       	ldi	r16, 0x07	; 7
    13bc:	10 e0       	ldi	r17, 0x00	; 0
    13be:	45 2d       	mov	r20, r5
    13c0:	64 2d       	mov	r22, r4
    13c2:	87 2d       	mov	r24, r7
    13c4:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <_Z19font_getbitmappixelccc>
    13c8:	88 23       	and	r24, r24
    13ca:	91 f0       	breq	.+36     	; 0x13f0 <_Z17effect_smileyspiniic+0x212>
    13cc:	21 14       	cp	r2, r1
    13ce:	31 04       	cpc	r3, r1
    13d0:	41 f4       	brne	.+16     	; 0x13e2 <_Z17effect_smileyspiniic+0x204>
    13d2:	f7 01       	movw	r30, r14
    13d4:	80 81       	ld	r24, Z
    13d6:	a5 01       	movw	r20, r10
    13d8:	b8 01       	movw	r22, r16
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
    13e0:	07 c0       	rjmp	.+14     	; 0x13f0 <_Z17effect_smileyspiniic+0x212>
    13e2:	f6 01       	movw	r30, r12
    13e4:	80 81       	ld	r24, Z
    13e6:	a5 01       	movw	r20, r10
    13e8:	b8 01       	movw	r22, r16
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
    13f0:	01 50       	subi	r16, 0x01	; 1
    13f2:	11 09       	sbc	r17, r1
    13f4:	53 94       	inc	r5
    13f6:	f1 e0       	ldi	r31, 0x01	; 1
    13f8:	cf 1a       	sub	r12, r31
    13fa:	d1 08       	sbc	r13, r1
    13fc:	2f ef       	ldi	r18, 0xFF	; 255
    13fe:	e2 1a       	sub	r14, r18
    1400:	f2 0a       	sbc	r15, r18
    1402:	38 e0       	ldi	r19, 0x08	; 8
    1404:	53 12       	cpse	r5, r19
    1406:	db cf       	rjmp	.-74     	; 0x13be <_Z17effect_smileyspiniic+0x1e0>
    1408:	8f ef       	ldi	r24, 0xFF	; 255
    140a:	a8 1a       	sub	r10, r24
    140c:	b8 0a       	sbc	r11, r24
    140e:	4a 94       	dec	r4
    1410:	9f ef       	ldi	r25, 0xFF	; 255
    1412:	49 12       	cpse	r4, r25
    1414:	c1 cf       	rjmp	.-126    	; 0x1398 <_Z17effect_smileyspiniic+0x1ba>
    1416:	8f a1       	ldd	r24, Y+39	; 0x27
    1418:	98 a5       	ldd	r25, Y+40	; 0x28
    141a:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
    1424:	ed a1       	ldd	r30, Y+37	; 0x25
    1426:	fe a1       	ldd	r31, Y+38	; 0x26
    1428:	31 97       	sbiw	r30, 0x01	; 1
    142a:	fe a3       	std	Y+38, r31	; 0x26
    142c:	ed a3       	std	Y+37, r30	; 0x25
    142e:	ef 2b       	or	r30, r31
    1430:	09 f0       	breq	.+2      	; 0x1434 <_Z17effect_smileyspiniic+0x256>
    1432:	89 cf       	rjmp	.-238    	; 0x1346 <_Z17effect_smileyspiniic+0x168>
    1434:	27 e0       	ldi	r18, 0x07	; 7
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	3a a7       	std	Y+42, r19	; 0x2a
    143a:	29 a7       	std	Y+41, r18	; 0x29
    143c:	1e a2       	std	Y+38, r1	; 0x26
    143e:	1d a2       	std	Y+37, r1	; 0x25
    1440:	41 2c       	mov	r4, r1
    1442:	51 2c       	mov	r5, r1
    1444:	41 14       	cp	r4, r1
    1446:	51 04       	cpc	r5, r1
    1448:	69 f4       	brne	.+26     	; 0x1464 <_Z17effect_smileyspiniic+0x286>
    144a:	8d a1       	ldd	r24, Y+37	; 0x25
    144c:	9e a1       	ldd	r25, Y+38	; 0x26
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	9e a3       	std	Y+38, r25	; 0x26
    1452:	8d a3       	std	Y+37, r24	; 0x25
    1454:	04 97       	sbiw	r24, 0x04	; 4
    1456:	59 f4       	brne	.+22     	; 0x146e <_Z17effect_smileyspiniic+0x290>
    1458:	1e a2       	std	Y+38, r1	; 0x26
    145a:	1d a2       	std	Y+37, r1	; 0x25
    145c:	44 24       	eor	r4, r4
    145e:	43 94       	inc	r4
    1460:	51 2c       	mov	r5, r1
    1462:	05 c0       	rjmp	.+10     	; 0x146e <_Z17effect_smileyspiniic+0x290>
    1464:	ed a1       	ldd	r30, Y+37	; 0x25
    1466:	fe a1       	ldd	r31, Y+38	; 0x26
    1468:	31 96       	adiw	r30, 0x01	; 1
    146a:	fe a3       	std	Y+38, r31	; 0x26
    146c:	ed a3       	std	Y+37, r30	; 0x25
    146e:	2d a1       	ldd	r18, Y+37	; 0x25
    1470:	3e a1       	ldd	r19, Y+38	; 0x26
    1472:	22 0f       	add	r18, r18
    1474:	33 1f       	adc	r19, r19
    1476:	22 0f       	add	r18, r18
    1478:	33 1f       	adc	r19, r19
    147a:	22 0f       	add	r18, r18
    147c:	33 1f       	adc	r19, r19
    147e:	3a a3       	std	Y+34, r19	; 0x22
    1480:	29 a3       	std	Y+33, r18	; 0x21
    1482:	8f e1       	ldi	r24, 0x1F	; 31
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	82 1b       	sub	r24, r18
    1488:	93 0b       	sbc	r25, r19
    148a:	9c a3       	std	Y+36, r25	; 0x24
    148c:	8b a3       	std	Y+35, r24	; 0x23
    148e:	0f 2e       	mov	r0, r31
    1490:	f7 e0       	ldi	r31, 0x07	; 7
    1492:	2f 2e       	mov	r2, r31
    1494:	f0 2d       	mov	r31, r0
    1496:	81 2c       	mov	r8, r1
    1498:	91 2c       	mov	r9, r1
    149a:	67 2c       	mov	r6, r7
    149c:	72 2c       	mov	r7, r2
    149e:	cc 24       	eor	r12, r12
    14a0:	c3 94       	inc	r12
    14a2:	d1 2c       	mov	r13, r1
    14a4:	cc 0e       	add	r12, r28
    14a6:	dd 1e       	adc	r13, r29
    14a8:	eb a1       	ldd	r30, Y+35	; 0x23
    14aa:	fc a1       	ldd	r31, Y+36	; 0x24
    14ac:	ce 0e       	add	r12, r30
    14ae:	df 1e       	adc	r13, r31
    14b0:	ee 24       	eor	r14, r14
    14b2:	e3 94       	inc	r14
    14b4:	f1 2c       	mov	r15, r1
    14b6:	ec 0e       	add	r14, r28
    14b8:	fd 1e       	adc	r15, r29
    14ba:	29 a1       	ldd	r18, Y+33	; 0x21
    14bc:	3a a1       	ldd	r19, Y+34	; 0x22
    14be:	e2 0e       	add	r14, r18
    14c0:	f3 1e       	adc	r15, r19
    14c2:	0f 2e       	mov	r0, r31
    14c4:	f7 e0       	ldi	r31, 0x07	; 7
    14c6:	3f 2e       	mov	r3, r31
    14c8:	f0 2d       	mov	r31, r0
    14ca:	01 e0       	ldi	r16, 0x01	; 1
    14cc:	10 e0       	ldi	r17, 0x00	; 0
    14ce:	58 01       	movw	r10, r16
    14d0:	31 e0       	ldi	r19, 0x01	; 1
    14d2:	a3 1a       	sub	r10, r19
    14d4:	b1 08       	sbc	r11, r1
    14d6:	43 2d       	mov	r20, r3
    14d8:	67 2d       	mov	r22, r7
    14da:	86 2d       	mov	r24, r6
    14dc:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <_Z19font_getbitmappixelccc>
    14e0:	88 23       	and	r24, r24
    14e2:	91 f0       	breq	.+36     	; 0x1508 <_Z17effect_smileyspiniic+0x32a>
    14e4:	41 14       	cp	r4, r1
    14e6:	51 04       	cpc	r5, r1
    14e8:	41 f4       	brne	.+16     	; 0x14fa <_Z17effect_smileyspiniic+0x31c>
    14ea:	f7 01       	movw	r30, r14
    14ec:	60 81       	ld	r22, Z
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	a4 01       	movw	r20, r8
    14f2:	c5 01       	movw	r24, r10
    14f4:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
    14f8:	07 c0       	rjmp	.+14     	; 0x1508 <_Z17effect_smileyspiniic+0x32a>
    14fa:	f6 01       	movw	r30, r12
    14fc:	60 81       	ld	r22, Z
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	a4 01       	movw	r20, r8
    1502:	c5 01       	movw	r24, r10
    1504:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
    1508:	0f 5f       	subi	r16, 0xFF	; 255
    150a:	1f 4f       	sbci	r17, 0xFF	; 255
    150c:	3a 94       	dec	r3
    150e:	f1 e0       	ldi	r31, 0x01	; 1
    1510:	cf 1a       	sub	r12, r31
    1512:	d1 08       	sbc	r13, r1
    1514:	2f ef       	ldi	r18, 0xFF	; 255
    1516:	e2 1a       	sub	r14, r18
    1518:	f2 0a       	sbc	r15, r18
    151a:	3f ef       	ldi	r19, 0xFF	; 255
    151c:	33 12       	cpse	r3, r19
    151e:	d7 cf       	rjmp	.-82     	; 0x14ce <_Z17effect_smileyspiniic+0x2f0>
    1520:	8f ef       	ldi	r24, 0xFF	; 255
    1522:	88 1a       	sub	r8, r24
    1524:	98 0a       	sbc	r9, r24
    1526:	7a 94       	dec	r7
    1528:	73 12       	cpse	r7, r19
    152a:	b9 cf       	rjmp	.-142    	; 0x149e <_Z17effect_smileyspiniic+0x2c0>
    152c:	76 2c       	mov	r7, r6
    152e:	8f a1       	ldd	r24, Y+39	; 0x27
    1530:	98 a5       	ldd	r25, Y+40	; 0x28
    1532:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
    153c:	e9 a5       	ldd	r30, Y+41	; 0x29
    153e:	fa a5       	ldd	r31, Y+42	; 0x2a
    1540:	31 97       	sbiw	r30, 0x01	; 1
    1542:	fa a7       	std	Y+42, r31	; 0x2a
    1544:	e9 a7       	std	Y+41, r30	; 0x29
    1546:	ef 2b       	or	r30, r31
    1548:	09 f0       	breq	.+2      	; 0x154c <_Z17effect_smileyspiniic+0x36e>
    154a:	7c cf       	rjmp	.-264    	; 0x1444 <_Z17effect_smileyspiniic+0x266>
    154c:	27 e0       	ldi	r18, 0x07	; 7
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	3e a3       	std	Y+38, r19	; 0x26
    1552:	2d a3       	std	Y+37, r18	; 0x25
    1554:	1c a2       	std	Y+36, r1	; 0x24
    1556:	1b a2       	std	Y+35, r1	; 0x23
    1558:	41 2c       	mov	r4, r1
    155a:	51 2c       	mov	r5, r1
    155c:	36 2c       	mov	r3, r6
    155e:	41 14       	cp	r4, r1
    1560:	51 04       	cpc	r5, r1
    1562:	69 f4       	brne	.+26     	; 0x157e <_Z17effect_smileyspiniic+0x3a0>
    1564:	8b a1       	ldd	r24, Y+35	; 0x23
    1566:	9c a1       	ldd	r25, Y+36	; 0x24
    1568:	01 96       	adiw	r24, 0x01	; 1
    156a:	9c a3       	std	Y+36, r25	; 0x24
    156c:	8b a3       	std	Y+35, r24	; 0x23
    156e:	04 97       	sbiw	r24, 0x04	; 4
    1570:	59 f4       	brne	.+22     	; 0x1588 <_Z17effect_smileyspiniic+0x3aa>
    1572:	1c a2       	std	Y+36, r1	; 0x24
    1574:	1b a2       	std	Y+35, r1	; 0x23
    1576:	44 24       	eor	r4, r4
    1578:	43 94       	inc	r4
    157a:	51 2c       	mov	r5, r1
    157c:	05 c0       	rjmp	.+10     	; 0x1588 <_Z17effect_smileyspiniic+0x3aa>
    157e:	eb a1       	ldd	r30, Y+35	; 0x23
    1580:	fc a1       	ldd	r31, Y+36	; 0x24
    1582:	31 96       	adiw	r30, 0x01	; 1
    1584:	fc a3       	std	Y+36, r31	; 0x24
    1586:	eb a3       	std	Y+35, r30	; 0x23
    1588:	6b a0       	ldd	r6, Y+35	; 0x23
    158a:	7c a0       	ldd	r7, Y+36	; 0x24
    158c:	66 0c       	add	r6, r6
    158e:	77 1c       	adc	r7, r7
    1590:	66 0c       	add	r6, r6
    1592:	77 1c       	adc	r7, r7
    1594:	66 0c       	add	r6, r6
    1596:	77 1c       	adc	r7, r7
    1598:	2f e1       	ldi	r18, 0x1F	; 31
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	26 19       	sub	r18, r6
    159e:	37 09       	sbc	r19, r7
    15a0:	3a a3       	std	Y+34, r19	; 0x22
    15a2:	29 a3       	std	Y+33, r18	; 0x21
    15a4:	0f 2e       	mov	r0, r31
    15a6:	f7 e0       	ldi	r31, 0x07	; 7
    15a8:	2f 2e       	mov	r2, r31
    15aa:	f0 2d       	mov	r31, r0
    15ac:	81 2c       	mov	r8, r1
    15ae:	91 2c       	mov	r9, r1
    15b0:	83 2d       	mov	r24, r3
    15b2:	32 2c       	mov	r3, r2
    15b4:	28 2e       	mov	r2, r24
    15b6:	aa 24       	eor	r10, r10
    15b8:	a3 94       	inc	r10
    15ba:	b1 2c       	mov	r11, r1
    15bc:	ac 0e       	add	r10, r28
    15be:	bd 1e       	adc	r11, r29
    15c0:	89 a1       	ldd	r24, Y+33	; 0x21
    15c2:	9a a1       	ldd	r25, Y+34	; 0x22
    15c4:	a8 0e       	add	r10, r24
    15c6:	b9 1e       	adc	r11, r25
    15c8:	cc 24       	eor	r12, r12
    15ca:	c3 94       	inc	r12
    15cc:	d1 2c       	mov	r13, r1
    15ce:	cc 0e       	add	r12, r28
    15d0:	dd 1e       	adc	r13, r29
    15d2:	c6 0c       	add	r12, r6
    15d4:	d7 1c       	adc	r13, r7
    15d6:	07 e0       	ldi	r16, 0x07	; 7
    15d8:	10 e0       	ldi	r17, 0x00	; 0
    15da:	ee 24       	eor	r14, r14
    15dc:	e3 94       	inc	r14
    15de:	f1 2c       	mov	r15, r1
    15e0:	40 2f       	mov	r20, r16
    15e2:	63 2d       	mov	r22, r3
    15e4:	82 2d       	mov	r24, r2
    15e6:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <_Z19font_getbitmappixelccc>
    15ea:	88 23       	and	r24, r24
    15ec:	91 f0       	breq	.+36     	; 0x1612 <_Z17effect_smileyspiniic+0x434>
    15ee:	41 14       	cp	r4, r1
    15f0:	51 04       	cpc	r5, r1
    15f2:	41 f4       	brne	.+16     	; 0x1604 <_Z17effect_smileyspiniic+0x426>
    15f4:	f6 01       	movw	r30, r12
    15f6:	80 81       	ld	r24, Z
    15f8:	a4 01       	movw	r20, r8
    15fa:	b8 01       	movw	r22, r16
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
    1602:	07 c0       	rjmp	.+14     	; 0x1612 <_Z17effect_smileyspiniic+0x434>
    1604:	f5 01       	movw	r30, r10
    1606:	80 81       	ld	r24, Z
    1608:	a4 01       	movw	r20, r8
    160a:	b8 01       	movw	r22, r16
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
    1612:	ff ef       	ldi	r31, 0xFF	; 255
    1614:	ef 1a       	sub	r14, r31
    1616:	ff 0a       	sbc	r15, r31
    1618:	01 50       	subi	r16, 0x01	; 1
    161a:	11 09       	sbc	r17, r1
    161c:	21 e0       	ldi	r18, 0x01	; 1
    161e:	a2 1a       	sub	r10, r18
    1620:	b1 08       	sbc	r11, r1
    1622:	3f ef       	ldi	r19, 0xFF	; 255
    1624:	c3 1a       	sub	r12, r19
    1626:	d3 0a       	sbc	r13, r19
    1628:	89 e0       	ldi	r24, 0x09	; 9
    162a:	e8 16       	cp	r14, r24
    162c:	f1 04       	cpc	r15, r1
    162e:	c1 f6       	brne	.-80     	; 0x15e0 <_Z17effect_smileyspiniic+0x402>
    1630:	9f ef       	ldi	r25, 0xFF	; 255
    1632:	89 1a       	sub	r8, r25
    1634:	99 0a       	sbc	r9, r25
    1636:	3a 94       	dec	r3
    1638:	ef ef       	ldi	r30, 0xFF	; 255
    163a:	3e 12       	cpse	r3, r30
    163c:	bc cf       	rjmp	.-136    	; 0x15b6 <_Z17effect_smileyspiniic+0x3d8>
    163e:	32 2c       	mov	r3, r2
    1640:	8f a1       	ldd	r24, Y+39	; 0x27
    1642:	98 a5       	ldd	r25, Y+40	; 0x28
    1644:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
    164e:	2d a1       	ldd	r18, Y+37	; 0x25
    1650:	3e a1       	ldd	r19, Y+38	; 0x26
    1652:	21 50       	subi	r18, 0x01	; 1
    1654:	31 09       	sbc	r19, r1
    1656:	3e a3       	std	Y+38, r19	; 0x26
    1658:	2d a3       	std	Y+37, r18	; 0x25
    165a:	23 2b       	or	r18, r19
    165c:	09 f0       	breq	.+2      	; 0x1660 <_Z17effect_smileyspiniic+0x482>
    165e:	7f cf       	rjmp	.-258    	; 0x155e <_Z17effect_smileyspiniic+0x380>
    1660:	72 2c       	mov	r7, r2
    1662:	8b a5       	ldd	r24, Y+43	; 0x2b
    1664:	9c a5       	ldd	r25, Y+44	; 0x2c
    1666:	01 96       	adiw	r24, 0x01	; 1
    1668:	9c a7       	std	Y+44, r25	; 0x2c
    166a:	8b a7       	std	Y+43, r24	; 0x2b
    166c:	ed a5       	ldd	r30, Y+45	; 0x2d
    166e:	fe a5       	ldd	r31, Y+46	; 0x2e
    1670:	e8 17       	cp	r30, r24
    1672:	f9 07       	cpc	r31, r25
    1674:	09 f0       	breq	.+2      	; 0x1678 <_Z17effect_smileyspiniic+0x49a>
    1676:	e1 cd       	rjmp	.-1086   	; 0x123a <_Z17effect_smileyspiniic+0x5c>
    1678:	ae 96       	adiw	r28, 0x2e	; 46
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	ff 90       	pop	r15
    168e:	ef 90       	pop	r14
    1690:	df 90       	pop	r13
    1692:	cf 90       	pop	r12
    1694:	bf 90       	pop	r11
    1696:	af 90       	pop	r10
    1698:	9f 90       	pop	r9
    169a:	8f 90       	pop	r8
    169c:	7f 90       	pop	r7
    169e:	6f 90       	pop	r6
    16a0:	5f 90       	pop	r5
    16a2:	4f 90       	pop	r4
    16a4:	3f 90       	pop	r3
    16a6:	2f 90       	pop	r2
    16a8:	08 95       	ret

000016aa <_Z17effect_stringfly2Pc>:
    16aa:	8f 92       	push	r8
    16ac:	9f 92       	push	r9
    16ae:	af 92       	push	r10
    16b0:	bf 92       	push	r11
    16b2:	cf 92       	push	r12
    16b4:	df 92       	push	r13
    16b6:	ef 92       	push	r14
    16b8:	ff 92       	push	r15
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <_Z17effect_stringfly2Pc+0x1a>
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <_Z17effect_stringfly2Pc+0x1c>
    16c6:	1f 92       	push	r1
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	4c 01       	movw	r8, r24
    16ce:	68 94       	set
    16d0:	cc 24       	eor	r12, r12
    16d2:	c7 f8       	bld	r12, 7
    16d4:	d1 2c       	mov	r13, r1
    16d6:	f4 01       	movw	r30, r8
    16d8:	81 91       	ld	r24, Z+
    16da:	4f 01       	movw	r8, r30
    16dc:	88 23       	and	r24, r24
    16de:	09 f4       	brne	.+2      	; 0x16e2 <_Z17effect_stringfly2Pc+0x38>
    16e0:	41 c0       	rjmp	.+130    	; 0x1764 <_Z17effect_stringfly2Pc+0xba>
    16e2:	be 01       	movw	r22, r28
    16e4:	6f 5f       	subi	r22, 0xFF	; 255
    16e6:	7f 4f       	sbci	r23, 0xFF	; 255
    16e8:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_Z12font_getcharcPh>
    16ec:	ce 01       	movw	r24, r28
    16ee:	01 96       	adiw	r24, 0x01	; 1
    16f0:	7c 01       	movw	r14, r24
    16f2:	68 94       	set
    16f4:	aa 24       	eor	r10, r10
    16f6:	a1 f8       	bld	r10, 1
    16f8:	b1 2c       	mov	r11, r1
    16fa:	00 e0       	ldi	r16, 0x00	; 0
    16fc:	10 e0       	ldi	r17, 0x00	; 0
    16fe:	f7 01       	movw	r30, r14
    1700:	80 81       	ld	r24, Z
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	c6 01       	movw	r24, r12
    1708:	00 2e       	mov	r0, r16
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <_Z17effect_stringfly2Pc+0x66>
    170c:	95 95       	asr	r25
    170e:	87 95       	ror	r24
    1710:	0a 94       	dec	r0
    1712:	e2 f7       	brpl	.-8      	; 0x170c <_Z17effect_stringfly2Pc+0x62>
    1714:	82 23       	and	r24, r18
    1716:	93 23       	and	r25, r19
    1718:	89 2b       	or	r24, r25
    171a:	31 f0       	breq	.+12     	; 0x1728 <_Z17effect_stringfly2Pc+0x7e>
    171c:	a8 01       	movw	r20, r16
    171e:	67 e0       	ldi	r22, 0x07	; 7
    1720:	70 e0       	ldi	r23, 0x00	; 0
    1722:	c5 01       	movw	r24, r10
    1724:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
    1728:	0f 5f       	subi	r16, 0xFF	; 255
    172a:	1f 4f       	sbci	r17, 0xFF	; 255
    172c:	08 30       	cpi	r16, 0x08	; 8
    172e:	11 05       	cpc	r17, r1
    1730:	31 f7       	brne	.-52     	; 0x16fe <_Z17effect_stringfly2Pc+0x54>
    1732:	ff ef       	ldi	r31, 0xFF	; 255
    1734:	ef 1a       	sub	r14, r31
    1736:	ff 0a       	sbc	r15, r31
    1738:	8f ef       	ldi	r24, 0xFF	; 255
    173a:	a8 1a       	sub	r10, r24
    173c:	b8 0a       	sbc	r11, r24
    173e:	97 e0       	ldi	r25, 0x07	; 7
    1740:	a9 16       	cp	r10, r25
    1742:	b1 04       	cpc	r11, r1
    1744:	d1 f6       	brne	.-76     	; 0x16fa <_Z17effect_stringfly2Pc+0x50>
    1746:	06 e0       	ldi	r16, 0x06	; 6
    1748:	10 e0       	ldi	r17, 0x00	; 0
    174a:	88 ee       	ldi	r24, 0xE8	; 232
    174c:	93 e0       	ldi	r25, 0x03	; 3
    174e:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    1752:	6f ef       	ldi	r22, 0xFF	; 255
    1754:	7f ef       	ldi	r23, 0xFF	; 255
    1756:	89 e7       	ldi	r24, 0x79	; 121
    1758:	0e 94 bb 04 	call	0x976	; 0x976 <_Z5shiftci>
    175c:	01 50       	subi	r16, 0x01	; 1
    175e:	11 09       	sbc	r17, r1
    1760:	a1 f7       	brne	.-24     	; 0x174a <_Z17effect_stringfly2Pc+0xa0>
    1762:	b9 cf       	rjmp	.-142    	; 0x16d6 <_Z17effect_stringfly2Pc+0x2c>
    1764:	08 e0       	ldi	r16, 0x08	; 8
    1766:	10 e0       	ldi	r17, 0x00	; 0
    1768:	88 ee       	ldi	r24, 0xE8	; 232
    176a:	93 e0       	ldi	r25, 0x03	; 3
    176c:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    1770:	6f ef       	ldi	r22, 0xFF	; 255
    1772:	7f ef       	ldi	r23, 0xFF	; 255
    1774:	89 e7       	ldi	r24, 0x79	; 121
    1776:	0e 94 bb 04 	call	0x976	; 0x976 <_Z5shiftci>
    177a:	01 50       	subi	r16, 0x01	; 1
    177c:	11 09       	sbc	r17, r1
    177e:	a1 f7       	brne	.-24     	; 0x1768 <_Z17effect_stringfly2Pc+0xbe>
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	ff 90       	pop	r15
    1794:	ef 90       	pop	r14
    1796:	df 90       	pop	r13
    1798:	cf 90       	pop	r12
    179a:	bf 90       	pop	r11
    179c:	af 90       	pop	r10
    179e:	9f 90       	pop	r9
    17a0:	8f 90       	pop	r8
    17a2:	08 95       	ret

000017a4 <_Z16effect_planboingii>:
    17a4:	df 92       	push	r13
    17a6:	ef 92       	push	r14
    17a8:	ff 92       	push	r15
    17aa:	0f 93       	push	r16
    17ac:	1f 93       	push	r17
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	c0 e0       	ldi	r28, 0x00	; 0
    17b4:	08 2f       	mov	r16, r24
    17b6:	16 2f       	mov	r17, r22
    17b8:	d7 2f       	mov	r29, r23
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
    17c0:	f0 2e       	mov	r15, r16
    17c2:	6c 2f       	mov	r22, r28
    17c4:	80 2f       	mov	r24, r16
    17c6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_Z8setplanech>
    17ca:	e1 2e       	mov	r14, r17
    17cc:	dd 2e       	mov	r13, r29
    17ce:	81 2f       	mov	r24, r17
    17d0:	9d 2f       	mov	r25, r29
    17d2:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    17d6:	cf 5f       	subi	r28, 0xFF	; 255
    17d8:	c8 30       	cpi	r28, 0x08	; 8
    17da:	79 f7       	brne	.-34     	; 0x17ba <_Z16effect_planboingii+0x16>
    17dc:	c7 e0       	ldi	r28, 0x07	; 7
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
    17e4:	6c 2f       	mov	r22, r28
    17e6:	8f 2d       	mov	r24, r15
    17e8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_Z8setplanech>
    17ec:	8e 2d       	mov	r24, r14
    17ee:	9d 2d       	mov	r25, r13
    17f0:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    17f4:	c1 50       	subi	r28, 0x01	; 1
    17f6:	98 f7       	brcc	.-26     	; 0x17de <_Z16effect_planboingii+0x3a>
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	1f 91       	pop	r17
    17fe:	0f 91       	pop	r16
    1800:	ff 90       	pop	r15
    1802:	ef 90       	pop	r14
    1804:	df 90       	pop	r13
    1806:	08 95       	ret

00001808 <_Z14effect_blinky2v>:
    1808:	af 92       	push	r10
    180a:	bf 92       	push	r11
    180c:	cf 92       	push	r12
    180e:	df 92       	push	r13
    1810:	ef 92       	push	r14
    1812:	ff 92       	push	r15
    1814:	0f 93       	push	r16
    1816:	1f 93       	push	r17
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
    1822:	68 94       	set
    1824:	aa 24       	eor	r10, r10
    1826:	a1 f8       	bld	r10, 1
    1828:	b1 2c       	mov	r11, r1
    182a:	0f 2e       	mov	r0, r31
    182c:	fa e0       	ldi	r31, 0x0A	; 10
    182e:	ef 2e       	mov	r14, r31
    1830:	f1 2c       	mov	r15, r1
    1832:	f0 2d       	mov	r31, r0
    1834:	08 ee       	ldi	r16, 0xE8	; 232
    1836:	13 e0       	ldi	r17, 0x03	; 3
    1838:	0f 2e       	mov	r0, r31
    183a:	ff ee       	ldi	r31, 0xEF	; 239
    183c:	cf 2e       	mov	r12, r31
    183e:	f2 e0       	ldi	r31, 0x02	; 2
    1840:	df 2e       	mov	r13, r31
    1842:	f0 2d       	mov	r31, r0
    1844:	ce ee       	ldi	r28, 0xEE	; 238
    1846:	d2 e0       	ldi	r29, 0x02	; 2
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
    184e:	ce 01       	movw	r24, r28
    1850:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    1854:	8f ef       	ldi	r24, 0xFF	; 255
    1856:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
    185a:	84 e6       	ldi	r24, 0x64	; 100
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    1862:	ce 01       	movw	r24, r28
    1864:	b7 01       	movw	r22, r14
    1866:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
    186a:	c8 01       	movw	r24, r16
    186c:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
    1870:	61 5f       	subi	r22, 0xF1	; 241
    1872:	7f 4f       	sbci	r23, 0xFF	; 255
    1874:	c6 1b       	sub	r28, r22
    1876:	d7 0b       	sbc	r29, r23
    1878:	1c 16       	cp	r1, r28
    187a:	1d 06       	cpc	r1, r29
    187c:	2c f3       	brlt	.-54     	; 0x1848 <_Z14effect_blinky2v+0x40>
    187e:	c8 01       	movw	r24, r16
    1880:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    1884:	ce ee       	ldi	r28, 0xEE	; 238
    1886:	d2 e0       	ldi	r29, 0x02	; 2
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
    188e:	c6 01       	movw	r24, r12
    1890:	8c 1b       	sub	r24, r28
    1892:	9d 0b       	sbc	r25, r29
    1894:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    1898:	8f ef       	ldi	r24, 0xFF	; 255
    189a:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
    189e:	84 e6       	ldi	r24, 0x64	; 100
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    18a6:	ce 01       	movw	r24, r28
    18a8:	b7 01       	movw	r22, r14
    18aa:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
    18ae:	c8 01       	movw	r24, r16
    18b0:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
    18b4:	61 5f       	subi	r22, 0xF1	; 241
    18b6:	7f 4f       	sbci	r23, 0xFF	; 255
    18b8:	c6 1b       	sub	r28, r22
    18ba:	d7 0b       	sbc	r29, r23
    18bc:	1c 16       	cp	r1, r28
    18be:	1d 06       	cpc	r1, r29
    18c0:	1c f3       	brlt	.-58     	; 0x1888 <_Z14effect_blinky2v+0x80>
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	a8 1a       	sub	r10, r24
    18c6:	b1 08       	sbc	r11, r1
    18c8:	09 f0       	breq	.+2      	; 0x18cc <_Z14effect_blinky2v+0xc4>
    18ca:	bc cf       	rjmp	.-136    	; 0x1844 <_Z14effect_blinky2v+0x3c>
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	ff 90       	pop	r15
    18d6:	ef 90       	pop	r14
    18d8:	df 90       	pop	r13
    18da:	cf 90       	pop	r12
    18dc:	bf 90       	pop	r11
    18de:	af 90       	pop	r10
    18e0:	08 95       	ret

000018e2 <_Z22effect_box_shrink_growiiij>:
    18e2:	2f 92       	push	r2
    18e4:	3f 92       	push	r3
    18e6:	4f 92       	push	r4
    18e8:	5f 92       	push	r5
    18ea:	6f 92       	push	r6
    18ec:	7f 92       	push	r7
    18ee:	8f 92       	push	r8
    18f0:	9f 92       	push	r9
    18f2:	af 92       	push	r10
    18f4:	bf 92       	push	r11
    18f6:	cf 92       	push	r12
    18f8:	df 92       	push	r13
    18fa:	ef 92       	push	r14
    18fc:	ff 92       	push	r15
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	00 d0       	rcall	.+0      	; 0x1908 <_Z22effect_box_shrink_growiiij+0x26>
    1908:	00 d0       	rcall	.+0      	; 0x190a <_Z22effect_box_shrink_growiiij+0x28>
    190a:	00 d0       	rcall	.+0      	; 0x190c <_Z22effect_box_shrink_growiiij+0x2a>
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	18 16       	cp	r1, r24
    1912:	19 06       	cpc	r1, r25
    1914:	0c f0       	brlt	.+2      	; 0x1918 <_Z22effect_box_shrink_growiiij+0x36>
    1916:	63 c0       	rjmp	.+198    	; 0x19de <_Z22effect_box_shrink_growiiij+0xfc>
    1918:	19 01       	movw	r2, r18
    191a:	2a 01       	movw	r4, r20
    191c:	3b 01       	movw	r6, r22
    191e:	9c 83       	std	Y+4, r25	; 0x04
    1920:	8b 83       	std	Y+3, r24	; 0x03
    1922:	1a 82       	std	Y+2, r1	; 0x02
    1924:	19 82       	std	Y+1, r1	; 0x01
    1926:	0f 2e       	mov	r0, r31
    1928:	f7 e0       	ldi	r31, 0x07	; 7
    192a:	8f 2e       	mov	r8, r31
    192c:	91 2c       	mov	r9, r1
    192e:	f0 2d       	mov	r31, r0
    1930:	5b 01       	movw	r10, r22
    1932:	e8 94       	clt
    1934:	a1 f8       	bld	r10, 1
    1936:	22 e0       	ldi	r18, 0x02	; 2
    1938:	62 1a       	sub	r6, r18
    193a:	71 08       	sbc	r7, r1
    193c:	1e 82       	std	Y+6, r1	; 0x06
    193e:	1d 82       	std	Y+5, r1	; 0x05
    1940:	64 01       	movw	r12, r8
    1942:	0e c0       	rjmp	.+28     	; 0x1960 <_Z22effect_box_shrink_growiiij+0x7e>
    1944:	8d 81       	ldd	r24, Y+5	; 0x05
    1946:	9e 81       	ldd	r25, Y+6	; 0x06
    1948:	88 30       	cpi	r24, 0x08	; 8
    194a:	91 05       	cpc	r25, r1
    194c:	24 f4       	brge	.+8      	; 0x1956 <_Z22effect_box_shrink_growiiij+0x74>
    194e:	64 01       	movw	r12, r8
    1950:	c8 1a       	sub	r12, r24
    1952:	d9 0a       	sbc	r13, r25
    1954:	05 c0       	rjmp	.+10     	; 0x1960 <_Z22effect_box_shrink_growiiij+0x7e>
    1956:	cd 80       	ldd	r12, Y+5	; 0x05
    1958:	de 80       	ldd	r13, Y+6	; 0x06
    195a:	98 e0       	ldi	r25, 0x08	; 8
    195c:	c9 1a       	sub	r12, r25
    195e:	d1 08       	sbc	r13, r1
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    196e:	f8 94       	cli
    1970:	76 01       	movw	r14, r12
    1972:	86 01       	movw	r16, r12
    1974:	96 01       	movw	r18, r12
    1976:	40 e0       	ldi	r20, 0x00	; 0
    1978:	50 e0       	ldi	r21, 0x00	; 0
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	0e 94 2c 02 	call	0x458	; 0x458 <_Z13box_wireframeiiiiii>
    1986:	14 14       	cp	r1, r4
    1988:	15 04       	cpc	r1, r5
    198a:	14 f4       	brge	.+4      	; 0x1990 <_Z22effect_box_shrink_growiiij+0xae>
    198c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <_Z8mirror_zv>
    1990:	21 e0       	ldi	r18, 0x01	; 1
    1992:	a2 16       	cp	r10, r18
    1994:	b1 04       	cpc	r11, r1
    1996:	11 f4       	brne	.+4      	; 0x199c <_Z22effect_box_shrink_growiiij+0xba>
    1998:	0e 94 a0 03 	call	0x740	; 0x740 <_Z8mirror_yv>
    199c:	32 e0       	ldi	r19, 0x02	; 2
    199e:	63 16       	cp	r6, r19
    19a0:	71 04       	cpc	r7, r1
    19a2:	10 f4       	brcc	.+4      	; 0x19a8 <_Z22effect_box_shrink_growiiij+0xc6>
    19a4:	0e 94 09 04 	call	0x812	; 0x812 <_Z8mirror_xv>
    19a8:	78 94       	sei
    19aa:	c1 01       	movw	r24, r2
    19ac:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
    19b6:	8d 81       	ldd	r24, Y+5	; 0x05
    19b8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	9e 83       	std	Y+6, r25	; 0x06
    19be:	8d 83       	std	Y+5, r24	; 0x05
    19c0:	40 97       	sbiw	r24, 0x10	; 16
    19c2:	09 f0       	breq	.+2      	; 0x19c6 <_Z22effect_box_shrink_growiiij+0xe4>
    19c4:	bf cf       	rjmp	.-130    	; 0x1944 <_Z22effect_box_shrink_growiiij+0x62>
    19c6:	29 81       	ldd	r18, Y+1	; 0x01
    19c8:	3a 81       	ldd	r19, Y+2	; 0x02
    19ca:	2f 5f       	subi	r18, 0xFF	; 255
    19cc:	3f 4f       	sbci	r19, 0xFF	; 255
    19ce:	3a 83       	std	Y+2, r19	; 0x02
    19d0:	29 83       	std	Y+1, r18	; 0x01
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	9c 81       	ldd	r25, Y+4	; 0x04
    19d6:	82 17       	cp	r24, r18
    19d8:	93 07       	cpc	r25, r19
    19da:	09 f0       	breq	.+2      	; 0x19de <_Z22effect_box_shrink_growiiij+0xfc>
    19dc:	af cf       	rjmp	.-162    	; 0x193c <_Z22effect_box_shrink_growiiij+0x5a>
    19de:	26 96       	adiw	r28, 0x06	; 6
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	1f 91       	pop	r17
    19f0:	0f 91       	pop	r16
    19f2:	ff 90       	pop	r15
    19f4:	ef 90       	pop	r14
    19f6:	df 90       	pop	r13
    19f8:	cf 90       	pop	r12
    19fa:	bf 90       	pop	r11
    19fc:	af 90       	pop	r10
    19fe:	9f 90       	pop	r9
    1a00:	8f 90       	pop	r8
    1a02:	7f 90       	pop	r7
    1a04:	6f 90       	pop	r6
    1a06:	5f 90       	pop	r5
    1a08:	4f 90       	pop	r4
    1a0a:	3f 90       	pop	r3
    1a0c:	2f 90       	pop	r2
    1a0e:	08 95       	ret

00001a10 <_Z11sendvoxel_zhhhi>:
    1a10:	5f 92       	push	r5
    1a12:	6f 92       	push	r6
    1a14:	7f 92       	push	r7
    1a16:	8f 92       	push	r8
    1a18:	9f 92       	push	r9
    1a1a:	af 92       	push	r10
    1a1c:	bf 92       	push	r11
    1a1e:	cf 92       	push	r12
    1a20:	df 92       	push	r13
    1a22:	ef 92       	push	r14
    1a24:	ff 92       	push	r15
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	54 2e       	mov	r5, r20
    1a30:	39 01       	movw	r6, r18
    1a32:	c0 e0       	ldi	r28, 0x00	; 0
    1a34:	d0 e0       	ldi	r29, 0x00	; 0
    1a36:	06 2f       	mov	r16, r22
    1a38:	10 e0       	ldi	r17, 0x00	; 0
    1a3a:	88 2e       	mov	r8, r24
    1a3c:	91 2c       	mov	r9, r1
    1a3e:	0f 2e       	mov	r0, r31
    1a40:	f7 e0       	ldi	r31, 0x07	; 7
    1a42:	af 2e       	mov	r10, r31
    1a44:	b1 2c       	mov	r11, r1
    1a46:	f0 2d       	mov	r31, r0
    1a48:	68 94       	set
    1a4a:	cc 24       	eor	r12, r12
    1a4c:	c3 f8       	bld	r12, 3
    1a4e:	d1 2c       	mov	r13, r1
    1a50:	87 e0       	ldi	r24, 0x07	; 7
    1a52:	58 12       	cpse	r5, r24
    1a54:	0b c0       	rjmp	.+22     	; 0x1a6c <_Z11sendvoxel_zhhhi+0x5c>
    1a56:	75 01       	movw	r14, r10
    1a58:	ec 1a       	sub	r14, r28
    1a5a:	fd 0a       	sbc	r15, r29
    1a5c:	a6 01       	movw	r20, r12
    1a5e:	4c 1b       	sub	r20, r28
    1a60:	5d 0b       	sbc	r21, r29
    1a62:	b8 01       	movw	r22, r16
    1a64:	c4 01       	movw	r24, r8
    1a66:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z8clrvoxeliii>
    1a6a:	08 c0       	rjmp	.+16     	; 0x1a7c <_Z11sendvoxel_zhhhi+0x6c>
    1a6c:	ae 01       	movw	r20, r28
    1a6e:	41 50       	subi	r20, 0x01	; 1
    1a70:	51 09       	sbc	r21, r1
    1a72:	b8 01       	movw	r22, r16
    1a74:	c4 01       	movw	r24, r8
    1a76:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z8clrvoxeliii>
    1a7a:	7e 01       	movw	r14, r28
    1a7c:	a7 01       	movw	r20, r14
    1a7e:	b8 01       	movw	r22, r16
    1a80:	c4 01       	movw	r24, r8
    1a82:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
    1a86:	c3 01       	movw	r24, r6
    1a88:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    1a8c:	21 96       	adiw	r28, 0x01	; 1
    1a8e:	c8 30       	cpi	r28, 0x08	; 8
    1a90:	d1 05       	cpc	r29, r1
    1a92:	f1 f6       	brne	.-68     	; 0x1a50 <_Z11sendvoxel_zhhhi+0x40>
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	1f 91       	pop	r17
    1a9a:	0f 91       	pop	r16
    1a9c:	ff 90       	pop	r15
    1a9e:	ef 90       	pop	r14
    1aa0:	df 90       	pop	r13
    1aa2:	cf 90       	pop	r12
    1aa4:	bf 90       	pop	r11
    1aa6:	af 90       	pop	r10
    1aa8:	9f 90       	pop	r9
    1aaa:	8f 90       	pop	r8
    1aac:	7f 90       	pop	r7
    1aae:	6f 90       	pop	r6
    1ab0:	5f 90       	pop	r5
    1ab2:	08 95       	ret

00001ab4 <_Z17sendvoxels_rand_ziii>:

// For each coordinate along X and Y, a voxel is set either at level 0 or at level 7
// for n iterations, a random voxel is sent to the opposite side of where it was.
void sendvoxels_rand_z (int iterations, int delay, int wait)
{
    1ab4:	8f 92       	push	r8
    1ab6:	9f 92       	push	r9
    1ab8:	af 92       	push	r10
    1aba:	bf 92       	push	r11
    1abc:	cf 92       	push	r12
    1abe:	df 92       	push	r13
    1ac0:	ef 92       	push	r14
    1ac2:	ff 92       	push	r15
    1ac4:	0f 93       	push	r16
    1ac6:	1f 93       	push	r17
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	7c 01       	movw	r14, r24
    1ace:	5b 01       	movw	r10, r22
    1ad0:	6a 01       	movw	r12, r20
	unsigned char x, y, last_x = 0, last_y = 0, i;

	fill(0x00);
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
    1ad8:	00 e0       	ldi	r16, 0x00	; 0
    1ada:	10 e0       	ldi	r17, 0x00	; 0
    1adc:	c0 e0       	ldi	r28, 0x00	; 0
    1ade:	d0 e0       	ldi	r29, 0x00	; 0
    1ae0:	08 c0       	rjmp	.+16     	; 0x1af2 <_Z17sendvoxels_rand_ziii+0x3e>
			// rand()%2 returns either 0 or 1. multiplying by 7 gives either 0 or 7.
			setvoxel(x,y,((rand()%2)*7));
		}
	}

	for (i=0;i<iterations;i++)
    1ae2:	1e 14       	cp	r1, r14
    1ae4:	1f 04       	cpc	r1, r15
    1ae6:	0c f0       	brlt	.+2      	; 0x1aea <_Z17sendvoxels_rand_ziii+0x36>
    1ae8:	62 c0       	rjmp	.+196    	; 0x1bae <_Z17sendvoxels_rand_ziii+0xfa>
    1aea:	d0 e0       	ldi	r29, 0x00	; 0
    1aec:	91 2c       	mov	r9, r1
    1aee:	81 2c       	mov	r8, r1
    1af0:	21 c0       	rjmp	.+66     	; 0x1b34 <_Z17sendvoxels_rand_ziii+0x80>
	{
		for (y=0;y<8;y++)
		{
			// Then set a voxel either at the top or at the bottom
			// rand()%2 returns either 0 or 1. multiplying by 7 gives either 0 or 7.
			setvoxel(x,y,((rand()%2)*7));
    1af2:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1af6:	81 70       	andi	r24, 0x01	; 1
    1af8:	90 78       	andi	r25, 0x80	; 128
    1afa:	99 23       	and	r25, r25
    1afc:	24 f4       	brge	.+8      	; 0x1b06 <_Z17sendvoxels_rand_ziii+0x52>
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	8e 6f       	ori	r24, 0xFE	; 254
    1b02:	9f 6f       	ori	r25, 0xFF	; 255
    1b04:	01 96       	adiw	r24, 0x01	; 1
    1b06:	ac 01       	movw	r20, r24
    1b08:	44 0f       	add	r20, r20
    1b0a:	55 1f       	adc	r21, r21
    1b0c:	44 0f       	add	r20, r20
    1b0e:	55 1f       	adc	r21, r21
    1b10:	44 0f       	add	r20, r20
    1b12:	55 1f       	adc	r21, r21
    1b14:	48 1b       	sub	r20, r24
    1b16:	59 0b       	sbc	r21, r25
    1b18:	be 01       	movw	r22, r28
    1b1a:	c8 01       	movw	r24, r16
    1b1c:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
    1b20:	21 96       	adiw	r28, 0x01	; 1
	fill(0x00);

	// Loop through all the X and Y coordinates
	for (x=0;x<8;x++)
	{
		for (y=0;y<8;y++)
    1b22:	c8 30       	cpi	r28, 0x08	; 8
    1b24:	d1 05       	cpc	r29, r1
    1b26:	29 f7       	brne	.-54     	; 0x1af2 <_Z17sendvoxels_rand_ziii+0x3e>
    1b28:	0f 5f       	subi	r16, 0xFF	; 255
    1b2a:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned char x, y, last_x = 0, last_y = 0, i;

	fill(0x00);

	// Loop through all the X and Y coordinates
	for (x=0;x<8;x++)
    1b2c:	08 30       	cpi	r16, 0x08	; 8
    1b2e:	11 05       	cpc	r17, r1
    1b30:	a9 f6       	brne	.-86     	; 0x1adc <_Z17sendvoxels_rand_ziii+0x28>
    1b32:	d7 cf       	rjmp	.-82     	; 0x1ae2 <_Z17sendvoxels_rand_ziii+0x2e>
	}

	for (i=0;i<iterations;i++)
	{
		// Pick a random x,y position
		x = rand()%8;
    1b34:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1b38:	8c 01       	movw	r16, r24
		y = rand()%8;
    1b3a:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1b3e:	87 70       	andi	r24, 0x07	; 7
    1b40:	90 78       	andi	r25, 0x80	; 128
    1b42:	99 23       	and	r25, r25
    1b44:	24 f4       	brge	.+8      	; 0x1b4e <_Z17sendvoxels_rand_ziii+0x9a>
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	88 6f       	ori	r24, 0xF8	; 248
    1b4a:	9f 6f       	ori	r25, 0xFF	; 255
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	bc 01       	movw	r22, r24
    1b50:	c8 2f       	mov	r28, r24
		// but not the sameone twice in a row
		if (y != last_y && x != last_x)
    1b52:	89 15       	cp	r24, r9
    1b54:	31 f1       	breq	.+76     	; 0x1ba2 <_Z17sendvoxels_rand_ziii+0xee>
	}

	for (i=0;i<iterations;i++)
	{
		// Pick a random x,y position
		x = rand()%8;
    1b56:	c8 01       	movw	r24, r16
    1b58:	87 70       	andi	r24, 0x07	; 7
    1b5a:	90 78       	andi	r25, 0x80	; 128
    1b5c:	99 23       	and	r25, r25
    1b5e:	24 f4       	brge	.+8      	; 0x1b68 <_Z17sendvoxels_rand_ziii+0xb4>
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	88 6f       	ori	r24, 0xF8	; 248
    1b64:	9f 6f       	ori	r25, 0xFF	; 255
    1b66:	01 96       	adiw	r24, 0x01	; 1
    1b68:	18 2f       	mov	r17, r24
		y = rand()%8;
		// but not the sameone twice in a row
		if (y != last_y && x != last_x)
    1b6a:	88 15       	cp	r24, r8
    1b6c:	d1 f0       	breq	.+52     	; 0x1ba2 <_Z17sendvoxels_rand_ziii+0xee>
		{
			// If the voxel at this x,y is at the bottom
			if (getvoxel(x,y,0))
    1b6e:	77 27       	eor	r23, r23
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	50 e0       	ldi	r21, 0x00	; 0
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	0e 94 23 01 	call	0x246	; 0x246 <_Z8getvoxeliii>
    1b7a:	88 23       	and	r24, r24
    1b7c:	39 f0       	breq	.+14     	; 0x1b8c <_Z17sendvoxels_rand_ziii+0xd8>
			{
				// send it to the top
				sendvoxel_z(x,y,0,delay);
    1b7e:	95 01       	movw	r18, r10
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	6c 2f       	mov	r22, r28
    1b84:	81 2f       	mov	r24, r17
    1b86:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <_Z11sendvoxel_zhhhi>
    1b8a:	06 c0       	rjmp	.+12     	; 0x1b98 <_Z17sendvoxels_rand_ziii+0xe4>
			} else
			{
				// if its at the top, send it to the bottom
				sendvoxel_z(x,y,7,delay);
    1b8c:	95 01       	movw	r18, r10
    1b8e:	47 e0       	ldi	r20, 0x07	; 7
    1b90:	6c 2f       	mov	r22, r28
    1b92:	81 2f       	mov	r24, r17
    1b94:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <_Z11sendvoxel_zhhhi>
			}
			delay_ms(wait);
    1b98:	c6 01       	movw	r24, r12
    1b9a:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
			
			// Remember the last move
			last_y = y;
    1b9e:	9c 2e       	mov	r9, r28
			last_x = x;
    1ba0:	81 2e       	mov	r8, r17
			// rand()%2 returns either 0 or 1. multiplying by 7 gives either 0 or 7.
			setvoxel(x,y,((rand()%2)*7));
		}
	}

	for (i=0;i<iterations;i++)
    1ba2:	df 5f       	subi	r29, 0xFF	; 255
    1ba4:	8d 2f       	mov	r24, r29
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	8e 15       	cp	r24, r14
    1baa:	9f 05       	cpc	r25, r15
    1bac:	1c f2       	brlt	.-122    	; 0x1b34 <_Z17sendvoxels_rand_ziii+0x80>
			last_y = y;
			last_x = x;
		}
	}

}
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	1f 91       	pop	r17
    1bb4:	0f 91       	pop	r16
    1bb6:	ff 90       	pop	r15
    1bb8:	ef 90       	pop	r14
    1bba:	df 90       	pop	r13
    1bbc:	cf 90       	pop	r12
    1bbe:	bf 90       	pop	r11
    1bc0:	af 90       	pop	r10
    1bc2:	9f 90       	pop	r9
    1bc4:	8f 90       	pop	r8
    1bc6:	08 95       	ret

00001bc8 <_Z10boingboingjihh>:


// Big ugly function :p but it looks pretty
void boingboing(uint16_t iterations, int delay, unsigned char mode, unsigned char drawmode)
{
    1bc8:	2f 92       	push	r2
    1bca:	3f 92       	push	r3
    1bcc:	4f 92       	push	r4
    1bce:	5f 92       	push	r5
    1bd0:	6f 92       	push	r6
    1bd2:	7f 92       	push	r7
    1bd4:	8f 92       	push	r8
    1bd6:	9f 92       	push	r9
    1bd8:	af 92       	push	r10
    1bda:	bf 92       	push	r11
    1bdc:	cf 92       	push	r12
    1bde:	df 92       	push	r13
    1be0:	ef 92       	push	r14
    1be2:	ff 92       	push	r15
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	e8 97       	sbiw	r28, 0x38	; 56
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	9c ab       	std	Y+52, r25	; 0x34
    1bfe:	8b ab       	std	Y+51, r24	; 0x33
    1c00:	78 af       	std	Y+56, r23	; 0x38
    1c02:	6f ab       	std	Y+55, r22	; 0x37
    1c04:	2d ab       	std	Y+53, r18	; 0x35
	fill(0x00);		// Blank the cube
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
	int x, y, z;		// Current coordinates for the point
	int dx, dy, dz;	// Direction of movement
	int lol, i;		// lol?
	unsigned char crash_x, crash_y, crash_z;

	y = rand()%8;
    1c0c:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1c10:	87 70       	andi	r24, 0x07	; 7
    1c12:	90 78       	andi	r25, 0x80	; 128
    1c14:	99 23       	and	r25, r25
    1c16:	24 f4       	brge	.+8      	; 0x1c20 <_Z10boingboingjihh+0x58>
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	88 6f       	ori	r24, 0xF8	; 248
    1c1c:	9f 6f       	ori	r25, 0xFF	; 255
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	5c 01       	movw	r10, r24
	x = rand()%8;
    1c22:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1c26:	87 70       	andi	r24, 0x07	; 7
    1c28:	90 78       	andi	r25, 0x80	; 128
    1c2a:	99 23       	and	r25, r25
    1c2c:	24 f4       	brge	.+8      	; 0x1c36 <_Z10boingboingjihh+0x6e>
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	88 6f       	ori	r24, 0xF8	; 248
    1c32:	9f 6f       	ori	r25, 0xFF	; 255
    1c34:	01 96       	adiw	r24, 0x01	; 1
    1c36:	4c 01       	movw	r8, r24
	z = rand()%8;
    1c38:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1c3c:	87 70       	andi	r24, 0x07	; 7
    1c3e:	90 78       	andi	r25, 0x80	; 128
    1c40:	99 23       	and	r25, r25
    1c42:	24 f4       	brge	.+8      	; 0x1c4c <_Z10boingboingjihh+0x84>
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	88 6f       	ori	r24, 0xF8	; 248
    1c48:	9f 6f       	ori	r25, 0xFF	; 255
    1c4a:	01 96       	adiw	r24, 0x01	; 1
    1c4c:	6c 01       	movw	r12, r24
    1c4e:	1e 01       	movw	r2, r28
    1c50:	21 e3       	ldi	r18, 0x31	; 49
    1c52:	22 0e       	add	r2, r18
    1c54:	31 1c       	adc	r3, r1
    1c56:	fe 01       	movw	r30, r28
    1c58:	31 96       	adiw	r30, 0x01	; 1
    1c5a:	13 c0       	rjmp	.+38     	; 0x1c82 <_Z10boingboingjihh+0xba>
	
	dx = 1;
	dy = 1;
	dz = 1;
	
	while(iterations)
    1c5c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c5e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c60:	89 2b       	or	r24, r25
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <_Z10boingboingjihh+0x9e>
    1c64:	b1 c2       	rjmp	.+1378   	; 0x21c8 <_Z10boingboingjihh+0x600>
    1c66:	44 24       	eor	r4, r4
    1c68:	43 94       	inc	r4
    1c6a:	51 2c       	mov	r5, r1
    1c6c:	66 24       	eor	r6, r6
    1c6e:	63 94       	inc	r6
    1c70:	71 2c       	mov	r7, r1
    1c72:	ee 24       	eor	r14, r14
    1c74:	e3 94       	inc	r14
    1c76:	f1 2c       	mov	r15, r1
    1c78:	fe 01       	movw	r30, r28
    1c7a:	b9 97       	sbiw	r30, 0x29	; 41
    1c7c:	fa ab       	std	Y+50, r31	; 0x32
    1c7e:	e9 ab       	std	Y+49, r30	; 0x31
    1c80:	0b c0       	rjmp	.+22     	; 0x1c98 <_Z10boingboingjihh+0xd0>

	// Coordinate array for the snake.
	int snake[8][3];
	for (i=0;i<8;i++)
	{
		snake[i][0] = x;
    1c82:	91 82       	std	Z+1, r9	; 0x01
    1c84:	80 82       	st	Z, r8
		snake[i][1] = y;
    1c86:	b3 82       	std	Z+3, r11	; 0x03
    1c88:	a2 82       	std	Z+2, r10	; 0x02
		snake[i][2] = z;
    1c8a:	d5 82       	std	Z+5, r13	; 0x05
    1c8c:	c4 82       	std	Z+4, r12	; 0x04
    1c8e:	36 96       	adiw	r30, 0x06	; 6
	x = rand()%8;
	z = rand()%8;

	// Coordinate array for the snake.
	int snake[8][3];
	for (i=0;i<8;i++)
    1c90:	2e 16       	cp	r2, r30
    1c92:	3f 06       	cpc	r3, r31
    1c94:	b1 f7       	brne	.-20     	; 0x1c82 <_Z10boingboingjihh+0xba>
    1c96:	e2 cf       	rjmp	.-60     	; 0x1c5c <_Z10boingboingjihh+0x94>
		crash_y = 0;
		crash_z = 0;
		

		// Let's mix things up a little:
		if (rand()%3 == 0)
    1c98:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1c9c:	63 e0       	ldi	r22, 0x03	; 3
    1c9e:	70 e0       	ldi	r23, 0x00	; 0
    1ca0:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
    1ca4:	89 2b       	or	r24, r25
    1ca6:	69 f5       	brne	.+90     	; 0x1d02 <_Z10boingboingjihh+0x13a>
		{
			// Pick a random axis, and set the speed to a random number.
			lol = rand()%3;
    1ca8:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1cac:	63 e0       	ldi	r22, 0x03	; 3
    1cae:	70 e0       	ldi	r23, 0x00	; 0
    1cb0:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
			if (lol == 0)
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	59 f4       	brne	.+22     	; 0x1cce <_Z10boingboingjihh+0x106>
			dx = rand()%3 - 1;
    1cb8:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1cbc:	63 e0       	ldi	r22, 0x03	; 3
    1cbe:	70 e0       	ldi	r23, 0x00	; 0
    1cc0:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
    1cc4:	7c 01       	movw	r14, r24
    1cc6:	f1 e0       	ldi	r31, 0x01	; 1
    1cc8:	ef 1a       	sub	r14, r31
    1cca:	f1 08       	sbc	r15, r1
    1ccc:	1a c0       	rjmp	.+52     	; 0x1d02 <_Z10boingboingjihh+0x13a>
			
			if (lol == 1)
    1cce:	81 30       	cpi	r24, 0x01	; 1
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	59 f4       	brne	.+22     	; 0x1cea <_Z10boingboingjihh+0x122>
			dy = rand()%3 - 1;
    1cd4:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1cd8:	63 e0       	ldi	r22, 0x03	; 3
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
    1ce0:	3c 01       	movw	r6, r24
    1ce2:	21 e0       	ldi	r18, 0x01	; 1
    1ce4:	62 1a       	sub	r6, r18
    1ce6:	71 08       	sbc	r7, r1
    1ce8:	0c c0       	rjmp	.+24     	; 0x1d02 <_Z10boingboingjihh+0x13a>
			
			if (lol == 2)
    1cea:	02 97       	sbiw	r24, 0x02	; 2
    1cec:	51 f4       	brne	.+20     	; 0x1d02 <_Z10boingboingjihh+0x13a>
			dz = rand()%3 - 1;
    1cee:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1cf2:	63 e0       	ldi	r22, 0x03	; 3
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
    1cfa:	2c 01       	movw	r4, r24
    1cfc:	e1 e0       	ldi	r30, 0x01	; 1
    1cfe:	4e 1a       	sub	r4, r30
    1d00:	51 08       	sbc	r5, r1
		}

		// The point has reached 0 on the x-axis and is trying to go to -1
		// aka a crash
		if (dx == -1 && x == 0)
    1d02:	ff ef       	ldi	r31, 0xFF	; 255
    1d04:	ef 16       	cp	r14, r31
    1d06:	ff 06       	cpc	r15, r31
    1d08:	99 f4       	brne	.+38     	; 0x1d30 <_Z10boingboingjihh+0x168>
    1d0a:	81 14       	cp	r8, r1
    1d0c:	91 04       	cpc	r9, r1
    1d0e:	91 f4       	brne	.+36     	; 0x1d34 <_Z10boingboingjihh+0x16c>
		{
			crash_x = 0x01;
			if (rand()%3 == 1)
    1d10:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1d14:	63 e0       	ldi	r22, 0x03	; 3
    1d16:	70 e0       	ldi	r23, 0x00	; 0
    1d18:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
    1d1c:	21 e0       	ldi	r18, 0x01	; 1
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <_Z10boingboingjihh+0x15e>
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	e2 2e       	mov	r14, r18
    1d28:	f3 2e       	mov	r15, r19

		// The point has reached 0 on the x-axis and is trying to go to -1
		// aka a crash
		if (dx == -1 && x == 0)
		{
			crash_x = 0x01;
    1d2a:	21 e0       	ldi	r18, 0x01	; 1
    1d2c:	2e ab       	std	Y+54, r18	; 0x36
    1d2e:	03 c0       	rjmp	.+6      	; 0x1d36 <_Z10boingboingjihh+0x16e>
	dy = 1;
	dz = 1;
	
	while(iterations)
	{
		crash_x = 0;
    1d30:	1e aa       	std	Y+54, r1	; 0x36
    1d32:	01 c0       	rjmp	.+2      	; 0x1d36 <_Z10boingboingjihh+0x16e>
    1d34:	1e aa       	std	Y+54, r1	; 0x36
				dx = 0;
			}
		}
		
		// y axis 0 crash
		if (dy == -1 && y == 0)
    1d36:	8f ef       	ldi	r24, 0xFF	; 255
    1d38:	68 16       	cp	r6, r24
    1d3a:	78 06       	cpc	r7, r24
    1d3c:	91 f4       	brne	.+36     	; 0x1d62 <_Z10boingboingjihh+0x19a>
    1d3e:	a1 14       	cp	r10, r1
    1d40:	b1 04       	cpc	r11, r1
    1d42:	89 f4       	brne	.+34     	; 0x1d66 <_Z10boingboingjihh+0x19e>
		{
			crash_y = 0x01;
			if (rand()%3 == 1)
    1d44:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1d48:	63 e0       	ldi	r22, 0x03	; 3
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
    1d4c:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
    1d50:	21 e0       	ldi	r18, 0x01	; 1
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <_Z10boingboingjihh+0x192>
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	62 2e       	mov	r6, r18
    1d5c:	73 2e       	mov	r7, r19
		}
		
		// y axis 0 crash
		if (dy == -1 && y == 0)
		{
			crash_y = 0x01;
    1d5e:	01 e0       	ldi	r16, 0x01	; 1
    1d60:	03 c0       	rjmp	.+6      	; 0x1d68 <_Z10boingboingjihh+0x1a0>
	dz = 1;
	
	while(iterations)
	{
		crash_x = 0;
		crash_y = 0;
    1d62:	00 e0       	ldi	r16, 0x00	; 0
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <_Z10boingboingjihh+0x1a0>
    1d66:	00 e0       	ldi	r16, 0x00	; 0
				dy = 0;
			}
		}
		
		// z axis 0 crash
		if (dz == -1 && z == 0)
    1d68:	9f ef       	ldi	r25, 0xFF	; 255
    1d6a:	49 16       	cp	r4, r25
    1d6c:	59 06       	cpc	r5, r25
    1d6e:	91 f4       	brne	.+36     	; 0x1d94 <_Z10boingboingjihh+0x1cc>
    1d70:	c1 14       	cp	r12, r1
    1d72:	d1 04       	cpc	r13, r1
    1d74:	89 f4       	brne	.+34     	; 0x1d98 <_Z10boingboingjihh+0x1d0>
		{
			crash_z = 0x01;
			if (rand()%3 == 1)
    1d76:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1d7a:	63 e0       	ldi	r22, 0x03	; 3
    1d7c:	70 e0       	ldi	r23, 0x00	; 0
    1d7e:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
    1d82:	21 e0       	ldi	r18, 0x01	; 1
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	09 f0       	breq	.+2      	; 0x1d8c <_Z10boingboingjihh+0x1c4>
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	42 2e       	mov	r4, r18
    1d8e:	53 2e       	mov	r5, r19
		}
		
		// z axis 0 crash
		if (dz == -1 && z == 0)
		{
			crash_z = 0x01;
    1d90:	11 e0       	ldi	r17, 0x01	; 1
    1d92:	03 c0       	rjmp	.+6      	; 0x1d9a <_Z10boingboingjihh+0x1d2>
	
	while(iterations)
	{
		crash_x = 0;
		crash_y = 0;
		crash_z = 0;
    1d94:	10 e0       	ldi	r17, 0x00	; 0
    1d96:	01 c0       	rjmp	.+2      	; 0x1d9a <_Z10boingboingjihh+0x1d2>
    1d98:	10 e0       	ldi	r17, 0x00	; 0
				dz = 0;
			}
		}
		
		// x axis 7 crash
		if (dx == 1 && x == 7)
    1d9a:	e1 e0       	ldi	r30, 0x01	; 1
    1d9c:	ee 16       	cp	r14, r30
    1d9e:	f1 04       	cpc	r15, r1
    1da0:	a9 f4       	brne	.+42     	; 0x1dcc <_Z10boingboingjihh+0x204>
    1da2:	f7 e0       	ldi	r31, 0x07	; 7
    1da4:	8f 16       	cp	r8, r31
    1da6:	91 04       	cpc	r9, r1
    1da8:	89 f4       	brne	.+34     	; 0x1dcc <_Z10boingboingjihh+0x204>
		{
			crash_x = 0x01;
			if (rand()%3 == 1)
    1daa:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1dae:	63 e0       	ldi	r22, 0x03	; 3
    1db0:	70 e0       	ldi	r23, 0x00	; 0
    1db2:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
    1db6:	ee 24       	eor	r14, r14
    1db8:	e3 94       	inc	r14
    1dba:	f1 2c       	mov	r15, r1
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <_Z10boingboingjihh+0x1fa>
    1dc0:	e1 2c       	mov	r14, r1
    1dc2:	f1 94       	neg	r15
    1dc4:	e1 94       	neg	r14
    1dc6:	f1 08       	sbc	r15, r1
		}
		
		// x axis 7 crash
		if (dx == 1 && x == 7)
		{
			crash_x = 0x01;
    1dc8:	21 e0       	ldi	r18, 0x01	; 1
    1dca:	2e ab       	std	Y+54, r18	; 0x36
				dx = 0;
			}
		}
		
		// y axis 7 crash
		if (dy == 1 && y == 7)
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	68 16       	cp	r6, r24
    1dd0:	71 04       	cpc	r7, r1
    1dd2:	a1 f4       	brne	.+40     	; 0x1dfc <_Z10boingboingjihh+0x234>
    1dd4:	97 e0       	ldi	r25, 0x07	; 7
    1dd6:	a9 16       	cp	r10, r25
    1dd8:	b1 04       	cpc	r11, r1
    1dda:	81 f4       	brne	.+32     	; 0x1dfc <_Z10boingboingjihh+0x234>
		{
			crash_y = 0x01;
			if (rand()%3 == 1)
    1ddc:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1de0:	63 e0       	ldi	r22, 0x03	; 3
    1de2:	70 e0       	ldi	r23, 0x00	; 0
    1de4:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
    1de8:	66 24       	eor	r6, r6
    1dea:	63 94       	inc	r6
    1dec:	71 2c       	mov	r7, r1
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	09 f0       	breq	.+2      	; 0x1df4 <_Z10boingboingjihh+0x22c>
    1df2:	61 2c       	mov	r6, r1
    1df4:	71 94       	neg	r7
    1df6:	61 94       	neg	r6
    1df8:	71 08       	sbc	r7, r1
		}
		
		// y axis 7 crash
		if (dy == 1 && y == 7)
		{
			crash_y = 0x01;
    1dfa:	01 e0       	ldi	r16, 0x01	; 1
				dy = 0;
			}
		}
		
		// z azis 7 crash
		if (dz == 1 && z == 7)
    1dfc:	e1 e0       	ldi	r30, 0x01	; 1
    1dfe:	4e 16       	cp	r4, r30
    1e00:	51 04       	cpc	r5, r1
    1e02:	a1 f4       	brne	.+40     	; 0x1e2c <_Z10boingboingjihh+0x264>
    1e04:	f7 e0       	ldi	r31, 0x07	; 7
    1e06:	cf 16       	cp	r12, r31
    1e08:	d1 04       	cpc	r13, r1
    1e0a:	81 f4       	brne	.+32     	; 0x1e2c <_Z10boingboingjihh+0x264>
		{
			crash_z = 0x01;
			if (rand()%3 == 1)
    1e0c:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1e10:	63 e0       	ldi	r22, 0x03	; 3
    1e12:	70 e0       	ldi	r23, 0x00	; 0
    1e14:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
    1e18:	44 24       	eor	r4, r4
    1e1a:	43 94       	inc	r4
    1e1c:	51 2c       	mov	r5, r1
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	09 f0       	breq	.+2      	; 0x1e24 <_Z10boingboingjihh+0x25c>
    1e22:	41 2c       	mov	r4, r1
    1e24:	51 94       	neg	r5
    1e26:	41 94       	neg	r4
    1e28:	51 08       	sbc	r5, r1
		}
		
		// z azis 7 crash
		if (dz == 1 && z == 7)
		{
			crash_z = 0x01;
    1e2a:	11 e0       	ldi	r17, 0x01	; 1
		}
		
		// mode bit 0 sets crash action enable
		if (mode | 0x01)
		{
			if (crash_x)
    1e2c:	2e a9       	ldd	r18, Y+54	; 0x36
    1e2e:	22 23       	and	r18, r18
    1e30:	f1 f1       	breq	.+124    	; 0x1eae <_Z10boingboingjihh+0x2e6>
			{
				if (dy == 0)
    1e32:	61 14       	cp	r6, r1
    1e34:	71 04       	cpc	r7, r1
    1e36:	e1 f4       	brne	.+56     	; 0x1e70 <_Z10boingboingjihh+0x2a8>
				{
					if (y == 7)
    1e38:	87 e0       	ldi	r24, 0x07	; 7
    1e3a:	a8 16       	cp	r10, r24
    1e3c:	b1 04       	cpc	r11, r1
    1e3e:	59 f0       	breq	.+22     	; 0x1e56 <_Z10boingboingjihh+0x28e>
					{
						dy = -1;
					} else if (y == 0)
    1e40:	a1 14       	cp	r10, r1
    1e42:	b1 04       	cpc	r11, r1
    1e44:	69 f0       	breq	.+26     	; 0x1e60 <_Z10boingboingjihh+0x298>
					{
						dy = +1;
					} else
					{
						if (rand()%2 == 0)
    1e46:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1e4a:	80 ff       	sbrs	r24, 0
    1e4c:	0d c0       	rjmp	.+26     	; 0x1e68 <_Z10boingboingjihh+0x2a0>
						{
							dy = -1;
						} else
						{
							dy = 1;
    1e4e:	66 24       	eor	r6, r6
    1e50:	63 94       	inc	r6
    1e52:	71 2c       	mov	r7, r1
    1e54:	0d c0       	rjmp	.+26     	; 0x1e70 <_Z10boingboingjihh+0x2a8>
			{
				if (dy == 0)
				{
					if (y == 7)
					{
						dy = -1;
    1e56:	66 24       	eor	r6, r6
    1e58:	6a 94       	dec	r6
    1e5a:	77 24       	eor	r7, r7
    1e5c:	7a 94       	dec	r7
    1e5e:	08 c0       	rjmp	.+16     	; 0x1e70 <_Z10boingboingjihh+0x2a8>
					} else if (y == 0)
					{
						dy = +1;
    1e60:	66 24       	eor	r6, r6
    1e62:	63 94       	inc	r6
    1e64:	71 2c       	mov	r7, r1
    1e66:	04 c0       	rjmp	.+8      	; 0x1e70 <_Z10boingboingjihh+0x2a8>
					} else
					{
						if (rand()%2 == 0)
						{
							dy = -1;
    1e68:	66 24       	eor	r6, r6
    1e6a:	6a 94       	dec	r6
    1e6c:	77 24       	eor	r7, r7
    1e6e:	7a 94       	dec	r7
						{
							dy = 1;
						}
					}
				}
				if (dz == 0)
    1e70:	41 14       	cp	r4, r1
    1e72:	51 04       	cpc	r5, r1
    1e74:	e1 f4       	brne	.+56     	; 0x1eae <_Z10boingboingjihh+0x2e6>
				{
					if (z == 7)
    1e76:	97 e0       	ldi	r25, 0x07	; 7
    1e78:	c9 16       	cp	r12, r25
    1e7a:	d1 04       	cpc	r13, r1
    1e7c:	59 f0       	breq	.+22     	; 0x1e94 <_Z10boingboingjihh+0x2cc>
					{
						dz = -1;
					} else if (z == 0)
    1e7e:	c1 14       	cp	r12, r1
    1e80:	d1 04       	cpc	r13, r1
    1e82:	69 f0       	breq	.+26     	; 0x1e9e <_Z10boingboingjihh+0x2d6>
					{
						dz = 1;
					} else
					{
						if (rand()%2 == 0)
    1e84:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1e88:	80 ff       	sbrs	r24, 0
    1e8a:	0d c0       	rjmp	.+26     	; 0x1ea6 <_Z10boingboingjihh+0x2de>
						{
							dz = -1;
						} else
						{
							dz = 1;
    1e8c:	44 24       	eor	r4, r4
    1e8e:	43 94       	inc	r4
    1e90:	51 2c       	mov	r5, r1
    1e92:	0d c0       	rjmp	.+26     	; 0x1eae <_Z10boingboingjihh+0x2e6>
				}
				if (dz == 0)
				{
					if (z == 7)
					{
						dz = -1;
    1e94:	44 24       	eor	r4, r4
    1e96:	4a 94       	dec	r4
    1e98:	55 24       	eor	r5, r5
    1e9a:	5a 94       	dec	r5
    1e9c:	08 c0       	rjmp	.+16     	; 0x1eae <_Z10boingboingjihh+0x2e6>
					} else if (z == 0)
					{
						dz = 1;
    1e9e:	44 24       	eor	r4, r4
    1ea0:	43 94       	inc	r4
    1ea2:	51 2c       	mov	r5, r1
    1ea4:	04 c0       	rjmp	.+8      	; 0x1eae <_Z10boingboingjihh+0x2e6>
					} else
					{
						if (rand()%2 == 0)
						{
							dz = -1;
    1ea6:	44 24       	eor	r4, r4
    1ea8:	4a 94       	dec	r4
    1eaa:	55 24       	eor	r5, r5
    1eac:	5a 94       	dec	r5
						}
					}
				}
			}
			
			if (crash_y)
    1eae:	00 23       	and	r16, r16
    1eb0:	f1 f1       	breq	.+124    	; 0x1f2e <_Z10boingboingjihh+0x366>
			{
				if (dx == 0)
    1eb2:	e1 14       	cp	r14, r1
    1eb4:	f1 04       	cpc	r15, r1
    1eb6:	e1 f4       	brne	.+56     	; 0x1ef0 <_Z10boingboingjihh+0x328>
				{
					if (x == 7)
    1eb8:	e7 e0       	ldi	r30, 0x07	; 7
    1eba:	8e 16       	cp	r8, r30
    1ebc:	91 04       	cpc	r9, r1
    1ebe:	59 f0       	breq	.+22     	; 0x1ed6 <_Z10boingboingjihh+0x30e>
					{
						dx = -1;
					} else if (x == 0)
    1ec0:	81 14       	cp	r8, r1
    1ec2:	91 04       	cpc	r9, r1
    1ec4:	69 f0       	breq	.+26     	; 0x1ee0 <_Z10boingboingjihh+0x318>
					{
						dx = 1;
					} else
					{
						if (rand()%2 == 0)
    1ec6:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1eca:	80 ff       	sbrs	r24, 0
    1ecc:	0d c0       	rjmp	.+26     	; 0x1ee8 <_Z10boingboingjihh+0x320>
						{
							dx = -1;
						} else
						{
							dx = 1;
    1ece:	ee 24       	eor	r14, r14
    1ed0:	e3 94       	inc	r14
    1ed2:	f1 2c       	mov	r15, r1
    1ed4:	0d c0       	rjmp	.+26     	; 0x1ef0 <_Z10boingboingjihh+0x328>
			{
				if (dx == 0)
				{
					if (x == 7)
					{
						dx = -1;
    1ed6:	ee 24       	eor	r14, r14
    1ed8:	ea 94       	dec	r14
    1eda:	ff 24       	eor	r15, r15
    1edc:	fa 94       	dec	r15
    1ede:	08 c0       	rjmp	.+16     	; 0x1ef0 <_Z10boingboingjihh+0x328>
					} else if (x == 0)
					{
						dx = 1;
    1ee0:	ee 24       	eor	r14, r14
    1ee2:	e3 94       	inc	r14
    1ee4:	f1 2c       	mov	r15, r1
    1ee6:	04 c0       	rjmp	.+8      	; 0x1ef0 <_Z10boingboingjihh+0x328>
					} else
					{
						if (rand()%2 == 0)
						{
							dx = -1;
    1ee8:	ee 24       	eor	r14, r14
    1eea:	ea 94       	dec	r14
    1eec:	ff 24       	eor	r15, r15
    1eee:	fa 94       	dec	r15
						{
							dx = 1;
						}
					}
				}
				if (dz == 0)
    1ef0:	41 14       	cp	r4, r1
    1ef2:	51 04       	cpc	r5, r1
    1ef4:	e1 f4       	brne	.+56     	; 0x1f2e <_Z10boingboingjihh+0x366>
				{
					if (z == 3)
    1ef6:	f3 e0       	ldi	r31, 0x03	; 3
    1ef8:	cf 16       	cp	r12, r31
    1efa:	d1 04       	cpc	r13, r1
    1efc:	59 f0       	breq	.+22     	; 0x1f14 <_Z10boingboingjihh+0x34c>
					{
						dz = -1;
					} else if (z == 0)
    1efe:	c1 14       	cp	r12, r1
    1f00:	d1 04       	cpc	r13, r1
    1f02:	69 f0       	breq	.+26     	; 0x1f1e <_Z10boingboingjihh+0x356>
					{
						dz = 1;
					} else
					{
						if (rand()%2 == 0)
    1f04:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1f08:	80 ff       	sbrs	r24, 0
    1f0a:	0d c0       	rjmp	.+26     	; 0x1f26 <_Z10boingboingjihh+0x35e>
						{
							dz = -1;
						} else
						{
							dz = 1;
    1f0c:	44 24       	eor	r4, r4
    1f0e:	43 94       	inc	r4
    1f10:	51 2c       	mov	r5, r1
    1f12:	0d c0       	rjmp	.+26     	; 0x1f2e <_Z10boingboingjihh+0x366>
				}
				if (dz == 0)
				{
					if (z == 3)
					{
						dz = -1;
    1f14:	44 24       	eor	r4, r4
    1f16:	4a 94       	dec	r4
    1f18:	55 24       	eor	r5, r5
    1f1a:	5a 94       	dec	r5
    1f1c:	08 c0       	rjmp	.+16     	; 0x1f2e <_Z10boingboingjihh+0x366>
					} else if (z == 0)
					{
						dz = 1;
    1f1e:	44 24       	eor	r4, r4
    1f20:	43 94       	inc	r4
    1f22:	51 2c       	mov	r5, r1
    1f24:	04 c0       	rjmp	.+8      	; 0x1f2e <_Z10boingboingjihh+0x366>
					} else
					{
						if (rand()%2 == 0)
						{
							dz = -1;
    1f26:	44 24       	eor	r4, r4
    1f28:	4a 94       	dec	r4
    1f2a:	55 24       	eor	r5, r5
    1f2c:	5a 94       	dec	r5
						}
					}
				}
			}
			
			if (crash_z)
    1f2e:	11 23       	and	r17, r17
    1f30:	89 f1       	breq	.+98     	; 0x1f94 <_Z10boingboingjihh+0x3cc>
			{
				if (dy == 0)
    1f32:	61 14       	cp	r6, r1
    1f34:	71 04       	cpc	r7, r1
    1f36:	e1 f4       	brne	.+56     	; 0x1f70 <_Z10boingboingjihh+0x3a8>
				{
					if (y == 7)
    1f38:	27 e0       	ldi	r18, 0x07	; 7
    1f3a:	a2 16       	cp	r10, r18
    1f3c:	b1 04       	cpc	r11, r1
    1f3e:	59 f0       	breq	.+22     	; 0x1f56 <_Z10boingboingjihh+0x38e>
					{
						dy = -1;
					} else if (y == 0)
    1f40:	a1 14       	cp	r10, r1
    1f42:	b1 04       	cpc	r11, r1
    1f44:	69 f0       	breq	.+26     	; 0x1f60 <_Z10boingboingjihh+0x398>
					{
						dy = 1;
					} else
					{
						if (rand()%2 == 0)
    1f46:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1f4a:	80 ff       	sbrs	r24, 0
    1f4c:	0d c0       	rjmp	.+26     	; 0x1f68 <_Z10boingboingjihh+0x3a0>
						{
							dy = -1;
						} else
						{
							dy = 1;
    1f4e:	66 24       	eor	r6, r6
    1f50:	63 94       	inc	r6
    1f52:	71 2c       	mov	r7, r1
    1f54:	0d c0       	rjmp	.+26     	; 0x1f70 <_Z10boingboingjihh+0x3a8>
			{
				if (dy == 0)
				{
					if (y == 7)
					{
						dy = -1;
    1f56:	66 24       	eor	r6, r6
    1f58:	6a 94       	dec	r6
    1f5a:	77 24       	eor	r7, r7
    1f5c:	7a 94       	dec	r7
    1f5e:	08 c0       	rjmp	.+16     	; 0x1f70 <_Z10boingboingjihh+0x3a8>
					} else if (y == 0)
					{
						dy = 1;
    1f60:	66 24       	eor	r6, r6
    1f62:	63 94       	inc	r6
    1f64:	71 2c       	mov	r7, r1
    1f66:	04 c0       	rjmp	.+8      	; 0x1f70 <_Z10boingboingjihh+0x3a8>
					} else
					{
						if (rand()%2 == 0)
						{
							dy = -1;
    1f68:	66 24       	eor	r6, r6
    1f6a:	6a 94       	dec	r6
    1f6c:	77 24       	eor	r7, r7
    1f6e:	7a 94       	dec	r7
						{
							dy = 1;
						}
					}
				}
				if (dx == 0)
    1f70:	e1 14       	cp	r14, r1
    1f72:	f1 04       	cpc	r15, r1
    1f74:	79 f4       	brne	.+30     	; 0x1f94 <_Z10boingboingjihh+0x3cc>
				{
					if (x == 7)
    1f76:	87 e0       	ldi	r24, 0x07	; 7
    1f78:	88 16       	cp	r8, r24
    1f7a:	91 04       	cpc	r9, r1
    1f7c:	89 f1       	breq	.+98     	; 0x1fe0 <_Z10boingboingjihh+0x418>
					{
						dx = -1;
					} else if (x == 0)
    1f7e:	81 14       	cp	r8, r1
    1f80:	91 04       	cpc	r9, r1
    1f82:	61 f0       	breq	.+24     	; 0x1f9c <_Z10boingboingjihh+0x3d4>
					{
						dx = 1;
					} else
					{
						if (rand()%2 == 0)
    1f84:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    1f88:	80 ff       	sbrs	r24, 0
    1f8a:	0f c1       	rjmp	.+542    	; 0x21aa <_Z10boingboingjihh+0x5e2>
						{
							dx = -1;
						} else
						{
							dx = 1;
    1f8c:	ee 24       	eor	r14, r14
    1f8e:	e3 94       	inc	r14
    1f90:	f1 2c       	mov	r15, r1
    1f92:	61 c0       	rjmp	.+194    	; 0x2056 <_Z10boingboingjihh+0x48e>
		}
		
		// mode bit 1 sets corner avoid enable
		if (mode | 0x02)
		{
			if (	// We are in one of 8 corner positions
    1f94:	81 14       	cp	r8, r1
    1f96:	91 04       	cpc	r9, r1
    1f98:	f1 f4       	brne	.+60     	; 0x1fd6 <_Z10boingboingjihh+0x40e>
    1f9a:	03 c0       	rjmp	.+6      	; 0x1fa2 <_Z10boingboingjihh+0x3da>
					if (x == 7)
					{
						dx = -1;
					} else if (x == 0)
					{
						dx = 1;
    1f9c:	ee 24       	eor	r14, r14
    1f9e:	e3 94       	inc	r14
    1fa0:	f1 2c       	mov	r15, r1
		
		// mode bit 1 sets corner avoid enable
		if (mode | 0x02)
		{
			if (	// We are in one of 8 corner positions
			(x == 0 && y == 0 && z == 0) ||
    1fa2:	a1 14       	cp	r10, r1
    1fa4:	b1 04       	cpc	r11, r1
    1fa6:	49 f4       	brne	.+18     	; 0x1fba <_Z10boingboingjihh+0x3f2>
    1fa8:	c1 14       	cp	r12, r1
    1faa:	d1 04       	cpc	r13, r1
    1fac:	a9 f1       	breq	.+106    	; 0x2018 <_Z10boingboingjihh+0x450>
    1fae:	97 e0       	ldi	r25, 0x07	; 7
    1fb0:	c9 16       	cp	r12, r25
    1fb2:	d1 04       	cpc	r13, r1
    1fb4:	09 f0       	breq	.+2      	; 0x1fb8 <_Z10boingboingjihh+0x3f0>
    1fb6:	fe c0       	rjmp	.+508    	; 0x21b4 <_Z10boingboingjihh+0x5ec>
    1fb8:	2f c0       	rjmp	.+94     	; 0x2018 <_Z10boingboingjihh+0x450>
			(x == 0 && y == 0 && z == 7) ||
			(x == 0 && y == 7 && z == 0) ||
    1fba:	e7 e0       	ldi	r30, 0x07	; 7
    1fbc:	ae 16       	cp	r10, r30
    1fbe:	b1 04       	cpc	r11, r1
    1fc0:	09 f0       	breq	.+2      	; 0x1fc4 <_Z10boingboingjihh+0x3fc>
    1fc2:	fd c0       	rjmp	.+506    	; 0x21be <_Z10boingboingjihh+0x5f6>
    1fc4:	c1 14       	cp	r12, r1
    1fc6:	d1 04       	cpc	r13, r1
    1fc8:	39 f1       	breq	.+78     	; 0x2018 <_Z10boingboingjihh+0x450>
			(x == 0 && y == 7 && z == 7) ||
    1fca:	f7 e0       	ldi	r31, 0x07	; 7
    1fcc:	cf 16       	cp	r12, r31
    1fce:	d1 04       	cpc	r13, r1
    1fd0:	09 f0       	breq	.+2      	; 0x1fd4 <_Z10boingboingjihh+0x40c>
    1fd2:	f5 c0       	rjmp	.+490    	; 0x21be <_Z10boingboingjihh+0x5f6>
    1fd4:	21 c0       	rjmp	.+66     	; 0x2018 <_Z10boingboingjihh+0x450>
    1fd6:	27 e0       	ldi	r18, 0x07	; 7
    1fd8:	82 16       	cp	r8, r18
    1fda:	91 04       	cpc	r9, r1
    1fdc:	e1 f5       	brne	.+120    	; 0x2056 <_Z10boingboingjihh+0x48e>
    1fde:	04 c0       	rjmp	.+8      	; 0x1fe8 <_Z10boingboingjihh+0x420>
				}
				if (dx == 0)
				{
					if (x == 7)
					{
						dx = -1;
    1fe0:	ee 24       	eor	r14, r14
    1fe2:	ea 94       	dec	r14
    1fe4:	ff 24       	eor	r15, r15
    1fe6:	fa 94       	dec	r15
			if (	// We are in one of 8 corner positions
			(x == 0 && y == 0 && z == 0) ||
			(x == 0 && y == 0 && z == 7) ||
			(x == 0 && y == 7 && z == 0) ||
			(x == 0 && y == 7 && z == 7) ||
			(x == 7 && y == 0 && z == 0) ||
    1fe8:	a1 14       	cp	r10, r1
    1fea:	b1 04       	cpc	r11, r1
    1fec:	49 f4       	brne	.+18     	; 0x2000 <_Z10boingboingjihh+0x438>
    1fee:	c1 14       	cp	r12, r1
    1ff0:	d1 04       	cpc	r13, r1
    1ff2:	91 f0       	breq	.+36     	; 0x2018 <_Z10boingboingjihh+0x450>
			(x == 7 && y == 0 && z == 7) ||
    1ff4:	87 e0       	ldi	r24, 0x07	; 7
    1ff6:	c8 16       	cp	r12, r24
    1ff8:	d1 04       	cpc	r13, r1
    1ffa:	09 f0       	breq	.+2      	; 0x1ffe <_Z10boingboingjihh+0x436>
    1ffc:	db c0       	rjmp	.+438    	; 0x21b4 <_Z10boingboingjihh+0x5ec>
    1ffe:	0c c0       	rjmp	.+24     	; 0x2018 <_Z10boingboingjihh+0x450>
			(x == 7 && y == 7 && z == 0) ||
    2000:	97 e0       	ldi	r25, 0x07	; 7
    2002:	a9 16       	cp	r10, r25
    2004:	b1 04       	cpc	r11, r1
    2006:	09 f0       	breq	.+2      	; 0x200a <_Z10boingboingjihh+0x442>
    2008:	da c0       	rjmp	.+436    	; 0x21be <_Z10boingboingjihh+0x5f6>
    200a:	c1 14       	cp	r12, r1
    200c:	d1 04       	cpc	r13, r1
    200e:	21 f0       	breq	.+8      	; 0x2018 <_Z10boingboingjihh+0x450>
			(x == 7 && y == 7 && z == 7)
    2010:	e7 e0       	ldi	r30, 0x07	; 7
    2012:	ce 16       	cp	r12, r30
    2014:	d1 04       	cpc	r13, r1
    2016:	49 f5       	brne	.+82     	; 0x206a <_Z10boingboingjihh+0x4a2>
				// and the exact opposite corner
				// We don't want that!
				
				// So we alter the trajectory a bit,
				// to avoid corner stickyness
				lol = rand()%3;
    2018:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    201c:	63 e0       	ldi	r22, 0x03	; 3
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
				if (lol == 0)
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	41 f0       	breq	.+16     	; 0x2038 <_Z10boingboingjihh+0x470>
				dx = 0;
				
				if (lol == 1)
    2028:	81 30       	cpi	r24, 0x01	; 1
    202a:	91 05       	cpc	r25, r1
    202c:	41 f0       	breq	.+16     	; 0x203e <_Z10boingboingjihh+0x476>
				dy = 0;
				
				if (lol == 2)
    202e:	02 97       	sbiw	r24, 0x02	; 2
    2030:	41 f4       	brne	.+16     	; 0x2042 <_Z10boingboingjihh+0x47a>
				dz = 0;
    2032:	41 2c       	mov	r4, r1
    2034:	51 2c       	mov	r5, r1
    2036:	05 c0       	rjmp	.+10     	; 0x2042 <_Z10boingboingjihh+0x47a>
				
				// So we alter the trajectory a bit,
				// to avoid corner stickyness
				lol = rand()%3;
				if (lol == 0)
				dx = 0;
    2038:	e1 2c       	mov	r14, r1
    203a:	f1 2c       	mov	r15, r1
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <_Z10boingboingjihh+0x47a>
				
				if (lol == 1)
				dy = 0;
    203e:	61 2c       	mov	r6, r1
    2040:	71 2c       	mov	r7, r1
				dz = 0;
			}
		}

		// one last sanity check
		if (x == 0 && dx == -1)
    2042:	81 14       	cp	r8, r1
    2044:	91 04       	cpc	r9, r1
    2046:	39 f4       	brne	.+14     	; 0x2056 <_Z10boingboingjihh+0x48e>
    2048:	ff ef       	ldi	r31, 0xFF	; 255
    204a:	ef 16       	cp	r14, r31
    204c:	ff 06       	cpc	r15, r31
    204e:	19 f4       	brne	.+6      	; 0x2056 <_Z10boingboingjihh+0x48e>
		dx = 1;
    2050:	ee 24       	eor	r14, r14
    2052:	e3 94       	inc	r14
    2054:	f1 2c       	mov	r15, r1
		
		if (y == 0 && dy == -1)
    2056:	a1 14       	cp	r10, r1
    2058:	b1 04       	cpc	r11, r1
    205a:	39 f4       	brne	.+14     	; 0x206a <_Z10boingboingjihh+0x4a2>
    205c:	2f ef       	ldi	r18, 0xFF	; 255
    205e:	62 16       	cp	r6, r18
    2060:	72 06       	cpc	r7, r18
    2062:	19 f4       	brne	.+6      	; 0x206a <_Z10boingboingjihh+0x4a2>
		dy = 1;
    2064:	66 24       	eor	r6, r6
    2066:	63 94       	inc	r6
    2068:	71 2c       	mov	r7, r1
		
		if (z == 0 && dz == -1)
    206a:	c1 14       	cp	r12, r1
    206c:	d1 04       	cpc	r13, r1
    206e:	39 f4       	brne	.+14     	; 0x207e <_Z10boingboingjihh+0x4b6>
    2070:	8f ef       	ldi	r24, 0xFF	; 255
    2072:	48 16       	cp	r4, r24
    2074:	58 06       	cpc	r5, r24
    2076:	19 f4       	brne	.+6      	; 0x207e <_Z10boingboingjihh+0x4b6>
		dz = 1;
    2078:	44 24       	eor	r4, r4
    207a:	43 94       	inc	r4
    207c:	51 2c       	mov	r5, r1
		
		if (x == 7 && dx == 1)
    207e:	97 e0       	ldi	r25, 0x07	; 7
    2080:	89 16       	cp	r8, r25
    2082:	91 04       	cpc	r9, r1
    2084:	41 f4       	brne	.+16     	; 0x2096 <_Z10boingboingjihh+0x4ce>
    2086:	e1 e0       	ldi	r30, 0x01	; 1
    2088:	ee 16       	cp	r14, r30
    208a:	f1 04       	cpc	r15, r1
    208c:	21 f4       	brne	.+8      	; 0x2096 <_Z10boingboingjihh+0x4ce>
		dx = -1;
    208e:	ee 24       	eor	r14, r14
    2090:	ea 94       	dec	r14
    2092:	ff 24       	eor	r15, r15
    2094:	fa 94       	dec	r15
		
		if (y == 7 && dy == 1)
    2096:	f7 e0       	ldi	r31, 0x07	; 7
    2098:	af 16       	cp	r10, r31
    209a:	b1 04       	cpc	r11, r1
    209c:	41 f4       	brne	.+16     	; 0x20ae <_Z10boingboingjihh+0x4e6>
    209e:	21 e0       	ldi	r18, 0x01	; 1
    20a0:	62 16       	cp	r6, r18
    20a2:	71 04       	cpc	r7, r1
    20a4:	21 f4       	brne	.+8      	; 0x20ae <_Z10boingboingjihh+0x4e6>
		dy = -1;
    20a6:	66 24       	eor	r6, r6
    20a8:	6a 94       	dec	r6
    20aa:	77 24       	eor	r7, r7
    20ac:	7a 94       	dec	r7
		
		if (z == 7 && dz == 1)
    20ae:	87 e0       	ldi	r24, 0x07	; 7
    20b0:	c8 16       	cp	r12, r24
    20b2:	d1 04       	cpc	r13, r1
    20b4:	41 f4       	brne	.+16     	; 0x20c6 <_Z10boingboingjihh+0x4fe>
    20b6:	91 e0       	ldi	r25, 0x01	; 1
    20b8:	49 16       	cp	r4, r25
    20ba:	51 04       	cpc	r5, r1
    20bc:	21 f4       	brne	.+8      	; 0x20c6 <_Z10boingboingjihh+0x4fe>
		dz = -1;
    20be:	44 24       	eor	r4, r4
    20c0:	4a 94       	dec	r4
    20c2:	55 24       	eor	r5, r5
    20c4:	5a 94       	dec	r5
		
		
		// Finally, move the voxel.
		x = x + dx;
    20c6:	8e 0c       	add	r8, r14
    20c8:	9f 1c       	adc	r9, r15
		y = y + dy;
    20ca:	a6 0c       	add	r10, r6
    20cc:	b7 1c       	adc	r11, r7
		z = z + dz;
    20ce:	c4 0c       	add	r12, r4
    20d0:	d5 1c       	adc	r13, r5
		
		if (drawmode == 0x01) // show one voxel at time
    20d2:	ed a9       	ldd	r30, Y+53	; 0x35
    20d4:	e1 30       	cpi	r30, 0x01	; 1
    20d6:	79 f4       	brne	.+30     	; 0x20f6 <_Z10boingboingjihh+0x52e>
		{
			setvoxel(x,y,z);
    20d8:	a6 01       	movw	r20, r12
    20da:	b5 01       	movw	r22, r10
    20dc:	c4 01       	movw	r24, r8
    20de:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
			delay_ms(delay);
    20e2:	8f a9       	ldd	r24, Y+55	; 0x37
    20e4:	98 ad       	ldd	r25, Y+56	; 0x38
    20e6:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
			clrvoxel(x,y,z);
    20ea:	a6 01       	movw	r20, r12
    20ec:	b5 01       	movw	r22, r10
    20ee:	c4 01       	movw	r24, r8
    20f0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z8clrvoxeliii>
    20f4:	51 c0       	rjmp	.+162    	; 0x2198 <_Z10boingboingjihh+0x5d0>
		} else if (drawmode == 0x02) // flip the voxel in question
    20f6:	fd a9       	ldd	r31, Y+53	; 0x35
    20f8:	f2 30       	cpi	r31, 0x02	; 2
    20fa:	51 f4       	brne	.+20     	; 0x2110 <_Z10boingboingjihh+0x548>
		{
			flpvoxel(x,y,z);
    20fc:	a6 01       	movw	r20, r12
    20fe:	b5 01       	movw	r22, r10
    2100:	c4 01       	movw	r24, r8
    2102:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_Z8flpvoxeliii>
			delay_ms(delay);
    2106:	8f a9       	ldd	r24, Y+55	; 0x37
    2108:	98 ad       	ldd	r25, Y+56	; 0x38
    210a:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    210e:	44 c0       	rjmp	.+136    	; 0x2198 <_Z10boingboingjihh+0x5d0>
		} if (drawmode == 0x03) // draw a snake
    2110:	2d a9       	ldd	r18, Y+53	; 0x35
    2112:	23 30       	cpi	r18, 0x03	; 3
    2114:	09 f0       	breq	.+2      	; 0x2118 <_Z10boingboingjihh+0x550>
    2116:	40 c0       	rjmp	.+128    	; 0x2198 <_Z10boingboingjihh+0x5d0>
    2118:	fe 01       	movw	r30, r28
    211a:	31 96       	adiw	r30, 0x01	; 1
		{
			for (i=7;i>0;i--)
			{
				snake[i][0] = snake[i-1][0];
    211c:	84 a1       	ldd	r24, Z+36	; 0x24
    211e:	95 a1       	ldd	r25, Z+37	; 0x25
    2120:	93 a7       	std	Z+43, r25	; 0x2b
    2122:	82 a7       	std	Z+42, r24	; 0x2a
				snake[i][1] = snake[i-1][1];
    2124:	86 a1       	ldd	r24, Z+38	; 0x26
    2126:	97 a1       	ldd	r25, Z+39	; 0x27
    2128:	95 a7       	std	Z+45, r25	; 0x2d
    212a:	84 a7       	std	Z+44, r24	; 0x2c
				snake[i][2] = snake[i-1][2];
    212c:	80 a5       	ldd	r24, Z+40	; 0x28
    212e:	91 a5       	ldd	r25, Z+41	; 0x29
    2130:	97 a7       	std	Z+47, r25	; 0x2f
    2132:	86 a7       	std	Z+46, r24	; 0x2e
    2134:	36 97       	sbiw	r30, 0x06	; 6
		{
			flpvoxel(x,y,z);
			delay_ms(delay);
		} if (drawmode == 0x03) // draw a snake
		{
			for (i=7;i>0;i--)
    2136:	89 a9       	ldd	r24, Y+49	; 0x31
    2138:	9a a9       	ldd	r25, Y+50	; 0x32
    213a:	8e 17       	cp	r24, r30
    213c:	9f 07       	cpc	r25, r31
    213e:	71 f7       	brne	.-36     	; 0x211c <_Z10boingboingjihh+0x554>
			{
				snake[i][0] = snake[i-1][0];
				snake[i][1] = snake[i-1][1];
				snake[i][2] = snake[i-1][2];
			}
			snake[0][0] = x;
    2140:	9a 82       	std	Y+2, r9	; 0x02
    2142:	89 82       	std	Y+1, r8	; 0x01
			snake[0][1] = y;
    2144:	bc 82       	std	Y+4, r11	; 0x04
    2146:	ab 82       	std	Y+3, r10	; 0x03
			snake[0][2] = z;
    2148:	de 82       	std	Y+6, r13	; 0x06
    214a:	cd 82       	std	Y+5, r12	; 0x05
    214c:	8e 01       	movw	r16, r28
    214e:	0f 5f       	subi	r16, 0xFF	; 255
    2150:	1f 4f       	sbci	r17, 0xFF	; 255
			
			for (i=0;i<8;i++)
			{
				setvoxel(snake[i][0],snake[i][1],snake[i][2]);
    2152:	f8 01       	movw	r30, r16
    2154:	44 81       	ldd	r20, Z+4	; 0x04
    2156:	55 81       	ldd	r21, Z+5	; 0x05
    2158:	62 81       	ldd	r22, Z+2	; 0x02
    215a:	73 81       	ldd	r23, Z+3	; 0x03
    215c:	80 81       	ld	r24, Z
    215e:	91 81       	ldd	r25, Z+1	; 0x01
    2160:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
    2164:	0a 5f       	subi	r16, 0xFA	; 250
    2166:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			snake[0][0] = x;
			snake[0][1] = y;
			snake[0][2] = z;
			
			for (i=0;i<8;i++)
    2168:	20 16       	cp	r2, r16
    216a:	31 06       	cpc	r3, r17
    216c:	91 f7       	brne	.-28     	; 0x2152 <_Z10boingboingjihh+0x58a>
			{
				setvoxel(snake[i][0],snake[i][1],snake[i][2]);
			}
			delay_ms(delay);
    216e:	8f a9       	ldd	r24, Y+55	; 0x37
    2170:	98 ad       	ldd	r25, Y+56	; 0x38
    2172:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    2176:	8e 01       	movw	r16, r28
    2178:	0f 5f       	subi	r16, 0xFF	; 255
    217a:	1f 4f       	sbci	r17, 0xFF	; 255
			for (i=0;i<8;i++)
			{
				clrvoxel(snake[i][0],snake[i][1],snake[i][2]);
    217c:	f8 01       	movw	r30, r16
    217e:	44 81       	ldd	r20, Z+4	; 0x04
    2180:	55 81       	ldd	r21, Z+5	; 0x05
    2182:	62 81       	ldd	r22, Z+2	; 0x02
    2184:	73 81       	ldd	r23, Z+3	; 0x03
    2186:	80 81       	ld	r24, Z
    2188:	91 81       	ldd	r25, Z+1	; 0x01
    218a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z8clrvoxeliii>
    218e:	0a 5f       	subi	r16, 0xFA	; 250
    2190:	1f 4f       	sbci	r17, 0xFF	; 255
			for (i=0;i<8;i++)
			{
				setvoxel(snake[i][0],snake[i][1],snake[i][2]);
			}
			delay_ms(delay);
			for (i=0;i<8;i++)
    2192:	20 16       	cp	r2, r16
    2194:	31 06       	cpc	r3, r17
    2196:	91 f7       	brne	.-28     	; 0x217c <_Z10boingboingjihh+0x5b4>
				clrvoxel(snake[i][0],snake[i][1],snake[i][2]);
			}
		}
		
		
		iterations--;
    2198:	8b a9       	ldd	r24, Y+51	; 0x33
    219a:	9c a9       	ldd	r25, Y+52	; 0x34
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	9c ab       	std	Y+52, r25	; 0x34
    21a0:	8b ab       	std	Y+51, r24	; 0x33
	
	dx = 1;
	dy = 1;
	dz = 1;
	
	while(iterations)
    21a2:	89 2b       	or	r24, r25
    21a4:	09 f0       	breq	.+2      	; 0x21a8 <_Z10boingboingjihh+0x5e0>
    21a6:	78 cd       	rjmp	.-1296   	; 0x1c98 <_Z10boingboingjihh+0xd0>
    21a8:	0f c0       	rjmp	.+30     	; 0x21c8 <_Z10boingboingjihh+0x600>
						dx = 1;
					} else
					{
						if (rand()%2 == 0)
						{
							dx = -1;
    21aa:	ee 24       	eor	r14, r14
    21ac:	ea 94       	dec	r14
    21ae:	ff 24       	eor	r15, r15
    21b0:	fa 94       	dec	r15
    21b2:	51 cf       	rjmp	.-350    	; 0x2056 <_Z10boingboingjihh+0x48e>
				dz = 0;
			}
		}

		// one last sanity check
		if (x == 0 && dx == -1)
    21b4:	81 14       	cp	r8, r1
    21b6:	91 04       	cpc	r9, r1
    21b8:	09 f0       	breq	.+2      	; 0x21bc <_Z10boingboingjihh+0x5f4>
    21ba:	50 cf       	rjmp	.-352    	; 0x205c <_Z10boingboingjihh+0x494>
    21bc:	45 cf       	rjmp	.-374    	; 0x2048 <_Z10boingboingjihh+0x480>
    21be:	81 14       	cp	r8, r1
    21c0:	91 04       	cpc	r9, r1
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <_Z10boingboingjihh+0x5fe>
    21c4:	41 cf       	rjmp	.-382    	; 0x2048 <_Z10boingboingjihh+0x480>
    21c6:	51 cf       	rjmp	.-350    	; 0x206a <_Z10boingboingjihh+0x4a2>
		}
		
		
		iterations--;
	}
}
    21c8:	e8 96       	adiw	r28, 0x38	; 56
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	1f 91       	pop	r17
    21da:	0f 91       	pop	r16
    21dc:	ff 90       	pop	r15
    21de:	ef 90       	pop	r14
    21e0:	df 90       	pop	r13
    21e2:	cf 90       	pop	r12
    21e4:	bf 90       	pop	r11
    21e6:	af 90       	pop	r10
    21e8:	9f 90       	pop	r9
    21ea:	8f 90       	pop	r8
    21ec:	7f 90       	pop	r7
    21ee:	6f 90       	pop	r6
    21f0:	5f 90       	pop	r5
    21f2:	4f 90       	pop	r4
    21f4:	3f 90       	pop	r3
    21f6:	2f 90       	pop	r2
    21f8:	08 95       	ret

000021fa <_Z20effect_random_fillerii>:

// Set or clear exactly 512 voxels in a random order.
void effect_random_filler (int delay, int state)
{
    21fa:	8f 92       	push	r8
    21fc:	9f 92       	push	r9
    21fe:	af 92       	push	r10
    2200:	bf 92       	push	r11
    2202:	cf 92       	push	r12
    2204:	df 92       	push	r13
    2206:	ef 92       	push	r14
    2208:	ff 92       	push	r15
    220a:	0f 93       	push	r16
    220c:	1f 93       	push	r17
    220e:	cf 93       	push	r28
    2210:	df 93       	push	r29
    2212:	7c 01       	movw	r14, r24
    2214:	eb 01       	movw	r28, r22
	int x,y,z;
	int loop = 0;
	
	
	if (state == 1)
    2216:	61 30       	cpi	r22, 0x01	; 1
    2218:	71 05       	cpc	r23, r1
    221a:	31 f4       	brne	.+12     	; 0x2228 <_Z20effect_random_fillerii+0x2e>
	{
		fill(0x00);
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
	}
}

// Set or clear exactly 512 voxels in a random order.
void effect_random_filler (int delay, int state)
{
    2222:	00 e0       	ldi	r16, 0x00	; 0
    2224:	10 e0       	ldi	r17, 0x00	; 0
    2226:	09 c0       	rjmp	.+18     	; 0x223a <_Z20effect_random_fillerii+0x40>
	if (state == 1)
	{
		fill(0x00);
	} else
	{
		fill(0xff);
    2228:	8f ef       	ldi	r24, 0xFF	; 255
    222a:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
    222e:	f9 cf       	rjmp	.-14     	; 0x2222 <_Z20effect_random_fillerii+0x28>
	}
	
	while (loop<511)
    2230:	0f 3f       	cpi	r16, 0xFF	; 255
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	18 07       	cpc	r17, r24
    2236:	0c f0       	brlt	.+2      	; 0x223a <_Z20effect_random_fillerii+0x40>
    2238:	50 c0       	rjmp	.+160    	; 0x22da <_Z20effect_random_fillerii+0xe0>
	{
		x = rand()%8;
    223a:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    223e:	87 70       	andi	r24, 0x07	; 7
    2240:	90 78       	andi	r25, 0x80	; 128
    2242:	99 23       	and	r25, r25
    2244:	24 f4       	brge	.+8      	; 0x224e <_Z20effect_random_fillerii+0x54>
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	88 6f       	ori	r24, 0xF8	; 248
    224a:	9f 6f       	ori	r25, 0xFF	; 255
    224c:	01 96       	adiw	r24, 0x01	; 1
    224e:	c8 2e       	mov	r12, r24
    2250:	d9 2e       	mov	r13, r25
		y = rand()%8;
    2252:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    2256:	87 70       	andi	r24, 0x07	; 7
    2258:	90 78       	andi	r25, 0x80	; 128
    225a:	99 23       	and	r25, r25
    225c:	24 f4       	brge	.+8      	; 0x2266 <_Z20effect_random_fillerii+0x6c>
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	88 6f       	ori	r24, 0xF8	; 248
    2262:	9f 6f       	ori	r25, 0xFF	; 255
    2264:	01 96       	adiw	r24, 0x01	; 1
    2266:	a8 2e       	mov	r10, r24
    2268:	b9 2e       	mov	r11, r25
		z = rand()%8;
    226a:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    226e:	87 70       	andi	r24, 0x07	; 7
    2270:	90 78       	andi	r25, 0x80	; 128
    2272:	99 23       	and	r25, r25
    2274:	24 f4       	brge	.+8      	; 0x227e <_Z20effect_random_fillerii+0x84>
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	88 6f       	ori	r24, 0xF8	; 248
    227a:	9f 6f       	ori	r25, 0xFF	; 255
    227c:	01 96       	adiw	r24, 0x01	; 1
    227e:	88 2e       	mov	r8, r24
    2280:	99 2e       	mov	r9, r25

		if ((state == 0 && getvoxel(x,y,z) == 0x01) || (state == 1 && getvoxel(x,y,z) == 0x00))
    2282:	20 97       	sbiw	r28, 0x00	; 0
    2284:	51 f4       	brne	.+20     	; 0x229a <_Z20effect_random_fillerii+0xa0>
    2286:	ac 01       	movw	r20, r24
    2288:	6a 2d       	mov	r22, r10
    228a:	7b 2d       	mov	r23, r11
    228c:	8c 2d       	mov	r24, r12
    228e:	9d 2d       	mov	r25, r13
    2290:	0e 94 23 01 	call	0x246	; 0x246 <_Z8getvoxeliii>
    2294:	88 23       	and	r24, r24
    2296:	61 f2       	breq	.-104    	; 0x2230 <_Z20effect_random_fillerii+0x36>
    2298:	0d c0       	rjmp	.+26     	; 0x22b4 <_Z20effect_random_fillerii+0xba>
    229a:	c1 30       	cpi	r28, 0x01	; 1
    229c:	d1 05       	cpc	r29, r1
    229e:	41 f6       	brne	.-112    	; 0x2230 <_Z20effect_random_fillerii+0x36>
    22a0:	48 2f       	mov	r20, r24
    22a2:	59 2f       	mov	r21, r25
    22a4:	6a 2d       	mov	r22, r10
    22a6:	7b 2d       	mov	r23, r11
    22a8:	8c 2d       	mov	r24, r12
    22aa:	9d 2d       	mov	r25, r13
    22ac:	0e 94 23 01 	call	0x246	; 0x246 <_Z8getvoxeliii>
    22b0:	81 11       	cpse	r24, r1
    22b2:	be cf       	rjmp	.-132    	; 0x2230 <_Z20effect_random_fillerii+0x36>
		{
			altervoxel(x,y,z,state);
    22b4:	9e 01       	movw	r18, r28
    22b6:	48 2d       	mov	r20, r8
    22b8:	59 2d       	mov	r21, r9
    22ba:	6a 2d       	mov	r22, r10
    22bc:	7b 2d       	mov	r23, r11
    22be:	8c 2d       	mov	r24, r12
    22c0:	9d 2d       	mov	r25, r13
    22c2:	0e 94 47 01 	call	0x28e	; 0x28e <_Z10altervoxeliiii>
			delay_ms(delay);
    22c6:	c7 01       	movw	r24, r14
    22c8:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
			loop++;
    22cc:	0f 5f       	subi	r16, 0xFF	; 255
    22ce:	1f 4f       	sbci	r17, 0xFF	; 255
	} else
	{
		fill(0xff);
	}
	
	while (loop<511)
    22d0:	0f 3f       	cpi	r16, 0xFF	; 255
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	18 07       	cpc	r17, r24
    22d6:	09 f0       	breq	.+2      	; 0x22da <_Z20effect_random_fillerii+0xe0>
    22d8:	b0 cf       	rjmp	.-160    	; 0x223a <_Z20effect_random_fillerii+0x40>
			altervoxel(x,y,z,state);
			delay_ms(delay);
			loop++;
		}
	}
}
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	1f 91       	pop	r17
    22e0:	0f 91       	pop	r16
    22e2:	ff 90       	pop	r15
    22e4:	ef 90       	pop	r14
    22e6:	df 90       	pop	r13
    22e8:	cf 90       	pop	r12
    22ea:	bf 90       	pop	r11
    22ec:	af 90       	pop	r10
    22ee:	9f 90       	pop	r9
    22f0:	8f 90       	pop	r8
    22f2:	08 95       	ret

000022f4 <_Z11effect_raini>:


void effect_rain (int iterations)
{
    22f4:	af 92       	push	r10
    22f6:	bf 92       	push	r11
    22f8:	cf 92       	push	r12
    22fa:	df 92       	push	r13
    22fc:	ef 92       	push	r14
    22fe:	ff 92       	push	r15
    2300:	0f 93       	push	r16
    2302:	1f 93       	push	r17
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
	int i, ii;
	int rnd_x;
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
    2308:	18 16       	cp	r1, r24
    230a:	19 06       	cpc	r1, r25
    230c:	0c f0       	brlt	.+2      	; 0x2310 <_Z11effect_raini+0x1c>
    230e:	44 c0       	rjmp	.+136    	; 0x2398 <_Z11effect_raini+0xa4>
    2310:	6c 01       	movw	r12, r24
    2312:	e1 2c       	mov	r14, r1
    2314:	f1 2c       	mov	r15, r1
	{
		rnd_num = rand()%4;
    2316:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    231a:	83 70       	andi	r24, 0x03	; 3
    231c:	90 78       	andi	r25, 0x80	; 128
    231e:	99 23       	and	r25, r25
    2320:	24 f4       	brge	.+8      	; 0x232a <_Z11effect_raini+0x36>
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	8c 6f       	ori	r24, 0xFC	; 252
    2326:	9f 6f       	ori	r25, 0xFF	; 255
    2328:	01 96       	adiw	r24, 0x01	; 1
    232a:	8c 01       	movw	r16, r24
		
		for (i=0; i < rnd_num;i++)
    232c:	18 16       	cp	r1, r24
    232e:	19 06       	cpc	r1, r25
    2330:	1c f5       	brge	.+70     	; 0x2378 <_Z11effect_raini+0x84>
    2332:	c0 e0       	ldi	r28, 0x00	; 0
    2334:	d0 e0       	ldi	r29, 0x00	; 0
		{
			rnd_x = rand()%8;
    2336:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    233a:	5c 01       	movw	r10, r24
			rnd_y = rand()%8;
    233c:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
			setvoxel(rnd_x,rnd_y,7);
    2340:	bc 01       	movw	r22, r24
    2342:	67 70       	andi	r22, 0x07	; 7
    2344:	70 78       	andi	r23, 0x80	; 128
    2346:	77 23       	and	r23, r23
    2348:	34 f4       	brge	.+12     	; 0x2356 <_Z11effect_raini+0x62>
    234a:	61 50       	subi	r22, 0x01	; 1
    234c:	71 09       	sbc	r23, r1
    234e:	68 6f       	ori	r22, 0xF8	; 248
    2350:	7f 6f       	ori	r23, 0xFF	; 255
    2352:	6f 5f       	subi	r22, 0xFF	; 255
    2354:	7f 4f       	sbci	r23, 0xFF	; 255
    2356:	c5 01       	movw	r24, r10
    2358:	87 70       	andi	r24, 0x07	; 7
    235a:	90 78       	andi	r25, 0x80	; 128
    235c:	99 23       	and	r25, r25
    235e:	24 f4       	brge	.+8      	; 0x2368 <_Z11effect_raini+0x74>
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	88 6f       	ori	r24, 0xF8	; 248
    2364:	9f 6f       	ori	r25, 0xFF	; 255
    2366:	01 96       	adiw	r24, 0x01	; 1
    2368:	47 e0       	ldi	r20, 0x07	; 7
    236a:	50 e0       	ldi	r21, 0x00	; 0
    236c:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
	
	for (ii=0;ii<iterations;ii++)
	{
		rnd_num = rand()%4;
		
		for (i=0; i < rnd_num;i++)
    2370:	21 96       	adiw	r28, 0x01	; 1
    2372:	0c 17       	cp	r16, r28
    2374:	1d 07       	cpc	r17, r29
    2376:	f9 f6       	brne	.-66     	; 0x2336 <_Z11effect_raini+0x42>
			rnd_x = rand()%8;
			rnd_y = rand()%8;
			setvoxel(rnd_x,rnd_y,7);
		}
		
		delay_ms(1000);
    2378:	88 ee       	ldi	r24, 0xE8	; 232
    237a:	93 e0       	ldi	r25, 0x03	; 3
    237c:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
		shift(AXIS_Z,-1);
    2380:	6f ef       	ldi	r22, 0xFF	; 255
    2382:	7f ef       	ldi	r23, 0xFF	; 255
    2384:	8a e7       	ldi	r24, 0x7A	; 122
    2386:	0e 94 bb 04 	call	0x976	; 0x976 <_Z5shiftci>
	int i, ii;
	int rnd_x;
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
    238a:	8f ef       	ldi	r24, 0xFF	; 255
    238c:	e8 1a       	sub	r14, r24
    238e:	f8 0a       	sbc	r15, r24
    2390:	ce 14       	cp	r12, r14
    2392:	df 04       	cpc	r13, r15
    2394:	09 f0       	breq	.+2      	; 0x2398 <_Z11effect_raini+0xa4>
    2396:	bf cf       	rjmp	.-130    	; 0x2316 <_Z11effect_raini+0x22>
		}
		
		delay_ms(1000);
		shift(AXIS_Z,-1);
	}
}
    2398:	df 91       	pop	r29
    239a:	cf 91       	pop	r28
    239c:	1f 91       	pop	r17
    239e:	0f 91       	pop	r16
    23a0:	ff 90       	pop	r15
    23a2:	ef 90       	pop	r14
    23a4:	df 90       	pop	r13
    23a6:	cf 90       	pop	r12
    23a8:	bf 90       	pop	r11
    23aa:	af 90       	pop	r10
    23ac:	08 95       	ret

000023ae <_Z19draw_positions_axiscPhi>:
		delay_ms(delay);
	}
}

void draw_positions_axis (char axis, unsigned char positions[64], int invert)
{
    23ae:	5f 92       	push	r5
    23b0:	6f 92       	push	r6
    23b2:	7f 92       	push	r7
    23b4:	8f 92       	push	r8
    23b6:	9f 92       	push	r9
    23b8:	af 92       	push	r10
    23ba:	bf 92       	push	r11
    23bc:	cf 92       	push	r12
    23be:	df 92       	push	r13
    23c0:	ef 92       	push	r14
    23c2:	ff 92       	push	r15
    23c4:	0f 93       	push	r16
    23c6:	1f 93       	push	r17
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	58 2e       	mov	r5, r24
    23ce:	d6 2f       	mov	r29, r22
    23d0:	c7 2f       	mov	r28, r23
    23d2:	7a 01       	movw	r14, r20
	int x, y, p;
	
	fill(0x00);
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
    23da:	6d 2e       	mov	r6, r29
    23dc:	7c 2e       	mov	r7, r28
	
	for (x=0; x<8; x++)
    23de:	c1 2c       	mov	r12, r1
    23e0:	d1 2c       	mov	r13, r1
	{
		for (y=0; y<8; y++)
		{
			if (invert)
			{
				p = (7-positions[(x*8)+y]);
    23e2:	0f 2e       	mov	r0, r31
    23e4:	f7 e0       	ldi	r31, 0x07	; 7
    23e6:	af 2e       	mov	r10, r31
    23e8:	b1 2c       	mov	r11, r1
    23ea:	f0 2d       	mov	r31, r0
{
	int x, y, p;
	
	fill(0x00);
	
	for (x=0; x<8; x++)
    23ec:	43 01       	movw	r8, r6
    23ee:	83 01       	movw	r16, r6
    23f0:	c0 e0       	ldi	r28, 0x00	; 0
    23f2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for (y=0; y<8; y++)
		{
			if (invert)
    23f4:	e1 14       	cp	r14, r1
    23f6:	f1 04       	cpc	r15, r1
    23f8:	39 f0       	breq	.+14     	; 0x2408 <_Z19draw_positions_axiscPhi+0x5a>
			{
				p = (7-positions[(x*8)+y]);
    23fa:	f8 01       	movw	r30, r16
    23fc:	80 81       	ld	r24, Z
    23fe:	95 01       	movw	r18, r10
    2400:	28 1b       	sub	r18, r24
    2402:	31 09       	sbc	r19, r1
    2404:	c9 01       	movw	r24, r18
    2406:	03 c0       	rjmp	.+6      	; 0x240e <_Z19draw_positions_axiscPhi+0x60>
			} else
			{
				p = positions[(x*8)+y];
    2408:	f4 01       	movw	r30, r8
    240a:	80 81       	ld	r24, Z
    240c:	90 e0       	ldi	r25, 0x00	; 0
			}
			
			if (axis == AXIS_Z)
    240e:	fa e7       	ldi	r31, 0x7A	; 122
    2410:	5f 12       	cpse	r5, r31
    2412:	06 c0       	rjmp	.+12     	; 0x2420 <_Z19draw_positions_axiscPhi+0x72>
			setvoxel(x,y,p);
    2414:	ac 01       	movw	r20, r24
    2416:	be 01       	movw	r22, r28
    2418:	c6 01       	movw	r24, r12
    241a:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
    241e:	10 c0       	rjmp	.+32     	; 0x2440 <_Z19draw_positions_axiscPhi+0x92>
			
			if (axis == AXIS_Y)
    2420:	29 e7       	ldi	r18, 0x79	; 121
    2422:	52 12       	cpse	r5, r18
    2424:	06 c0       	rjmp	.+12     	; 0x2432 <_Z19draw_positions_axiscPhi+0x84>
			setvoxel(x,p,y);
    2426:	ae 01       	movw	r20, r28
    2428:	bc 01       	movw	r22, r24
    242a:	c6 01       	movw	r24, r12
    242c:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
    2430:	07 c0       	rjmp	.+14     	; 0x2440 <_Z19draw_positions_axiscPhi+0x92>
			
			if (axis == AXIS_X)
    2432:	38 e7       	ldi	r19, 0x78	; 120
    2434:	53 12       	cpse	r5, r19
    2436:	04 c0       	rjmp	.+8      	; 0x2440 <_Z19draw_positions_axiscPhi+0x92>
			setvoxel(p,y,x);
    2438:	a6 01       	movw	r20, r12
    243a:	be 01       	movw	r22, r28
    243c:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
	
	fill(0x00);
	
	for (x=0; x<8; x++)
	{
		for (y=0; y<8; y++)
    2440:	21 96       	adiw	r28, 0x01	; 1
    2442:	0f 5f       	subi	r16, 0xFF	; 255
    2444:	1f 4f       	sbci	r17, 0xFF	; 255
    2446:	8f ef       	ldi	r24, 0xFF	; 255
    2448:	88 1a       	sub	r8, r24
    244a:	98 0a       	sbc	r9, r24
    244c:	c8 30       	cpi	r28, 0x08	; 8
    244e:	d1 05       	cpc	r29, r1
    2450:	89 f6       	brne	.-94     	; 0x23f4 <_Z19draw_positions_axiscPhi+0x46>
{
	int x, y, p;
	
	fill(0x00);
	
	for (x=0; x<8; x++)
    2452:	ef ef       	ldi	r30, 0xFF	; 255
    2454:	ce 1a       	sub	r12, r30
    2456:	de 0a       	sbc	r13, r30
    2458:	f8 e0       	ldi	r31, 0x08	; 8
    245a:	6f 0e       	add	r6, r31
    245c:	71 1c       	adc	r7, r1
    245e:	28 e0       	ldi	r18, 0x08	; 8
    2460:	c2 16       	cp	r12, r18
    2462:	d1 04       	cpc	r13, r1
    2464:	19 f6       	brne	.-122    	; 0x23ec <_Z19draw_positions_axiscPhi+0x3e>
			if (axis == AXIS_X)
			setvoxel(p,y,x);
		}
	}
	
}
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	1f 91       	pop	r17
    246c:	0f 91       	pop	r16
    246e:	ff 90       	pop	r15
    2470:	ef 90       	pop	r14
    2472:	df 90       	pop	r13
    2474:	cf 90       	pop	r12
    2476:	bf 90       	pop	r11
    2478:	af 90       	pop	r10
    247a:	9f 90       	pop	r9
    247c:	8f 90       	pop	r8
    247e:	7f 90       	pop	r7
    2480:	6f 90       	pop	r6
    2482:	5f 90       	pop	r5
    2484:	08 95       	ret

00002486 <_Z20effect_z_updown_movePhS_c>:
	}

}

void effect_z_updown_move (unsigned char positions[64], unsigned char destinations[64], char axis)
{
    2486:	ef 92       	push	r14
    2488:	ff 92       	push	r15
    248a:	0f 93       	push	r16
    248c:	1f 93       	push	r17
    248e:	cf 93       	push	r28
    2490:	df 93       	push	r29
    2492:	8c 01       	movw	r16, r24
    2494:	fc 01       	movw	r30, r24
    2496:	a6 2f       	mov	r26, r22
    2498:	b7 2f       	mov	r27, r23
    249a:	bc 01       	movw	r22, r24
    249c:	60 5c       	subi	r22, 0xC0	; 192
    249e:	7f 4f       	sbci	r23, 0xFF	; 255
    24a0:	7f 01       	movw	r14, r30
	int px;
	for (px=0; px<64; px++)
	{
		if (positions[px]<destinations[px])
    24a2:	90 81       	ld	r25, Z
    24a4:	9d 01       	movw	r18, r26
    24a6:	4c 91       	ld	r20, X
    24a8:	94 17       	cp	r25, r20
    24aa:	10 f4       	brcc	.+4      	; 0x24b0 <_Z20effect_z_updown_movePhS_c+0x2a>
		{
			positions[px]++;
    24ac:	9f 5f       	subi	r25, 0xFF	; 255
    24ae:	90 83       	st	Z, r25
		}
		if (positions[px]>destinations[px])
    24b0:	e7 01       	movw	r28, r14
    24b2:	98 81       	ld	r25, Y
    24b4:	11 96       	adiw	r26, 0x01	; 1
    24b6:	e9 01       	movw	r28, r18
    24b8:	28 81       	ld	r18, Y
    24ba:	29 17       	cp	r18, r25
    24bc:	18 f4       	brcc	.+6      	; 0x24c4 <_Z20effect_z_updown_movePhS_c+0x3e>
		{
			positions[px]--;
    24be:	91 50       	subi	r25, 0x01	; 1
    24c0:	e7 01       	movw	r28, r14
    24c2:	98 83       	st	Y, r25
    24c4:	31 96       	adiw	r30, 0x01	; 1
}

void effect_z_updown_move (unsigned char positions[64], unsigned char destinations[64], char axis)
{
	int px;
	for (px=0; px<64; px++)
    24c6:	e6 17       	cp	r30, r22
    24c8:	f7 07       	cpc	r31, r23
    24ca:	51 f7       	brne	.-44     	; 0x24a0 <_Z20effect_z_updown_movePhS_c+0x1a>
		{
			positions[px]--;
		}
	}
	
	draw_positions_axis (AXIS_Z, positions,0);
    24cc:	40 e0       	ldi	r20, 0x00	; 0
    24ce:	50 e0       	ldi	r21, 0x00	; 0
    24d0:	b8 01       	movw	r22, r16
    24d2:	8a e7       	ldi	r24, 0x7A	; 122
    24d4:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z19draw_positions_axiscPhi>
}
    24d8:	df 91       	pop	r29
    24da:	cf 91       	pop	r28
    24dc:	1f 91       	pop	r17
    24de:	0f 91       	pop	r16
    24e0:	ff 90       	pop	r15
    24e2:	ef 90       	pop	r14
    24e4:	08 95       	ret

000024e6 <_Z15effect_z_updownii>:
		shift(AXIS_Z,-1);
	}
}

void effect_z_updown (int iterations, int delay)
{
    24e6:	2f 92       	push	r2
    24e8:	3f 92       	push	r3
    24ea:	4f 92       	push	r4
    24ec:	5f 92       	push	r5
    24ee:	6f 92       	push	r6
    24f0:	7f 92       	push	r7
    24f2:	8f 92       	push	r8
    24f4:	9f 92       	push	r9
    24f6:	af 92       	push	r10
    24f8:	bf 92       	push	r11
    24fa:	cf 92       	push	r12
    24fc:	df 92       	push	r13
    24fe:	ef 92       	push	r14
    2500:	ff 92       	push	r15
    2502:	0f 93       	push	r16
    2504:	1f 93       	push	r17
    2506:	cf 93       	push	r28
    2508:	df 93       	push	r29
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	c0 58       	subi	r28, 0x80	; 128
    2510:	d1 09       	sbc	r29, r1
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	f8 94       	cli
    2516:	de bf       	out	0x3e, r29	; 62
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	cd bf       	out	0x3d, r28	; 61
    251c:	4c 01       	movw	r8, r24
    251e:	1b 01       	movw	r2, r22
    2520:	8e 01       	movw	r16, r28
    2522:	0f 5f       	subi	r16, 0xFF	; 255
    2524:	1f 4f       	sbci	r17, 0xFF	; 255
    2526:	7e 01       	movw	r14, r28
    2528:	81 e4       	ldi	r24, 0x41	; 65
    252a:	e8 0e       	add	r14, r24
    252c:	f1 1c       	adc	r15, r1
    252e:	67 01       	movw	r12, r14

	int i,y,move;
	
	for (i=0; i<64; i++)
	{
		positions[i] = 4;
    2530:	68 94       	set
    2532:	bb 24       	eor	r11, r11
    2534:	b2 f8       	bld	r11, 2
    2536:	f8 01       	movw	r30, r16
    2538:	b1 92       	st	Z+, r11
    253a:	8f 01       	movw	r16, r30
		destinations[i] = rand()%8;
    253c:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    2540:	87 70       	andi	r24, 0x07	; 7
    2542:	90 78       	andi	r25, 0x80	; 128
    2544:	99 23       	and	r25, r25
    2546:	24 f4       	brge	.+8      	; 0x2550 <_Z15effect_z_updownii+0x6a>
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	88 6f       	ori	r24, 0xF8	; 248
    254c:	9f 6f       	ori	r25, 0xFF	; 255
    254e:	01 96       	adiw	r24, 0x01	; 1
    2550:	f7 01       	movw	r30, r14
    2552:	81 93       	st	Z+, r24
    2554:	7f 01       	movw	r14, r30
	unsigned char positions[64];
	unsigned char destinations[64];

	int i,y,move;
	
	for (i=0; i<64; i++)
    2556:	c0 16       	cp	r12, r16
    2558:	d1 06       	cpc	r13, r17
    255a:	69 f7       	brne	.-38     	; 0x2536 <_Z15effect_z_updownii+0x50>
    255c:	04 c0       	rjmp	.+8      	; 0x2566 <_Z15effect_z_updownii+0x80>
	{
		effect_z_updown_move(positions, destinations, AXIS_Z);
		delay_ms(delay);
	}
	
	for (i=0;i<iterations;i++)
    255e:	18 14       	cp	r1, r8
    2560:	19 04       	cpc	r1, r9
    2562:	bc f0       	brlt	.+46     	; 0x2592 <_Z15effect_z_updownii+0xac>
    2564:	5f c0       	rjmp	.+190    	; 0x2624 <_Z15effect_z_updownii+0x13e>
    2566:	08 e0       	ldi	r16, 0x08	; 8
    2568:	10 e0       	ldi	r17, 0x00	; 0
	}

	for (i=0; i<8; i++)
	{
		effect_z_updown_move(positions, destinations, AXIS_Z);
		delay_ms(delay);
    256a:	e2 2c       	mov	r14, r2
    256c:	f3 2c       	mov	r15, r3
		destinations[i] = rand()%8;
	}

	for (i=0; i<8; i++)
	{
		effect_z_updown_move(positions, destinations, AXIS_Z);
    256e:	4a e7       	ldi	r20, 0x7A	; 122
    2570:	be 01       	movw	r22, r28
    2572:	6f 5b       	subi	r22, 0xBF	; 191
    2574:	7f 4f       	sbci	r23, 0xFF	; 255
    2576:	ce 01       	movw	r24, r28
    2578:	01 96       	adiw	r24, 0x01	; 1
    257a:	0e 94 43 12 	call	0x2486	; 0x2486 <_Z20effect_z_updown_movePhS_c>
		delay_ms(delay);
    257e:	7e 2c       	mov	r7, r14
    2580:	6f 2c       	mov	r6, r15
    2582:	8e 2d       	mov	r24, r14
    2584:	9f 2d       	mov	r25, r15
    2586:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    258a:	01 50       	subi	r16, 0x01	; 1
    258c:	11 09       	sbc	r17, r1
	{
		positions[i] = 4;
		destinations[i] = rand()%8;
	}

	for (i=0; i<8; i++)
    258e:	79 f7       	brne	.-34     	; 0x256e <_Z15effect_z_updownii+0x88>
    2590:	e6 cf       	rjmp	.-52     	; 0x255e <_Z15effect_z_updownii+0x78>
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
			delay_ms(delay);
		}

		delay_ms(delay*4);
    2592:	22 0c       	add	r2, r2
    2594:	33 1c       	adc	r3, r3
    2596:	22 0c       	add	r2, r2
    2598:	33 1c       	adc	r3, r3
    259a:	a1 2c       	mov	r10, r1
    259c:	b1 2c       	mov	r11, r1
	
	for (i=0;i<iterations;i++)
	{
		for (move=0;move<8;move++)
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
    259e:	6e 01       	movw	r12, r28
    25a0:	f1 e4       	ldi	r31, 0x41	; 65
    25a2:	cf 0e       	add	r12, r31
    25a4:	d1 1c       	adc	r13, r1
    25a6:	4c 2c       	mov	r4, r12
    25a8:	5d 2c       	mov	r5, r13
			delay_ms(delay);
		}

		delay_ms(delay*4);
    25aa:	08 e0       	ldi	r16, 0x08	; 8
    25ac:	10 e0       	ldi	r17, 0x00	; 0
	
	for (i=0;i<iterations;i++)
	{
		for (move=0;move<8;move++)
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
    25ae:	4a e7       	ldi	r20, 0x7A	; 122
    25b0:	64 2d       	mov	r22, r4
    25b2:	75 2d       	mov	r23, r5
    25b4:	ce 01       	movw	r24, r28
    25b6:	01 96       	adiw	r24, 0x01	; 1
    25b8:	0e 94 43 12 	call	0x2486	; 0x2486 <_Z20effect_z_updown_movePhS_c>
			delay_ms(delay);
    25bc:	87 2d       	mov	r24, r7
    25be:	96 2d       	mov	r25, r6
    25c0:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    25c4:	01 50       	subi	r16, 0x01	; 1
    25c6:	11 09       	sbc	r17, r1
		delay_ms(delay);
	}
	
	for (i=0;i<iterations;i++)
	{
		for (move=0;move<8;move++)
    25c8:	91 f7       	brne	.-28     	; 0x25ae <_Z15effect_z_updownii+0xc8>
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
			delay_ms(delay);
		}

		delay_ms(delay*4);
    25ca:	c1 01       	movw	r24, r2
    25cc:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    25d0:	68 94       	set
    25d2:	ee 24       	eor	r14, r14
    25d4:	e5 f8       	bld	r14, 5
    25d6:	f1 2c       	mov	r15, r1


		for (y=0;y<32;y++)
		{
			destinations[rand()%64] = rand()%8;
    25d8:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    25dc:	8c 01       	movw	r16, r24
    25de:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    25e2:	0f 73       	andi	r16, 0x3F	; 63
    25e4:	10 78       	andi	r17, 0x80	; 128
    25e6:	11 23       	and	r17, r17
    25e8:	34 f4       	brge	.+12     	; 0x25f6 <_Z15effect_z_updownii+0x110>
    25ea:	01 50       	subi	r16, 0x01	; 1
    25ec:	11 09       	sbc	r17, r1
    25ee:	00 6c       	ori	r16, 0xC0	; 192
    25f0:	1f 6f       	ori	r17, 0xFF	; 255
    25f2:	0f 5f       	subi	r16, 0xFF	; 255
    25f4:	1f 4f       	sbci	r17, 0xFF	; 255
    25f6:	f6 01       	movw	r30, r12
    25f8:	e0 0f       	add	r30, r16
    25fa:	f1 1f       	adc	r31, r17
    25fc:	87 70       	andi	r24, 0x07	; 7
    25fe:	90 78       	andi	r25, 0x80	; 128
    2600:	99 23       	and	r25, r25
    2602:	24 f4       	brge	.+8      	; 0x260c <_Z15effect_z_updownii+0x126>
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	88 6f       	ori	r24, 0xF8	; 248
    2608:	9f 6f       	ori	r25, 0xFF	; 255
    260a:	01 96       	adiw	r24, 0x01	; 1
    260c:	80 83       	st	Z, r24
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	e8 1a       	sub	r14, r24
    2612:	f1 08       	sbc	r15, r1
		}

		delay_ms(delay*4);


		for (y=0;y<32;y++)
    2614:	09 f7       	brne	.-62     	; 0x25d8 <_Z15effect_z_updownii+0xf2>
	{
		effect_z_updown_move(positions, destinations, AXIS_Z);
		delay_ms(delay);
	}
	
	for (i=0;i<iterations;i++)
    2616:	ef ef       	ldi	r30, 0xFF	; 255
    2618:	ae 1a       	sub	r10, r30
    261a:	be 0a       	sbc	r11, r30
    261c:	8a 14       	cp	r8, r10
    261e:	9b 04       	cpc	r9, r11
    2620:	09 f0       	breq	.+2      	; 0x2624 <_Z15effect_z_updownii+0x13e>
    2622:	c3 cf       	rjmp	.-122    	; 0x25aa <_Z15effect_z_updownii+0xc4>
			destinations[rand()%64] = rand()%8;
		}
		
	}

}
    2624:	c0 58       	subi	r28, 0x80	; 128
    2626:	df 4f       	sbci	r29, 0xFF	; 255
    2628:	0f b6       	in	r0, 0x3f	; 63
    262a:	f8 94       	cli
    262c:	de bf       	out	0x3e, r29	; 62
    262e:	0f be       	out	0x3f, r0	; 63
    2630:	cd bf       	out	0x3d, r28	; 61
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	1f 91       	pop	r17
    2638:	0f 91       	pop	r16
    263a:	ff 90       	pop	r15
    263c:	ef 90       	pop	r14
    263e:	df 90       	pop	r13
    2640:	cf 90       	pop	r12
    2642:	bf 90       	pop	r11
    2644:	af 90       	pop	r10
    2646:	9f 90       	pop	r9
    2648:	8f 90       	pop	r8
    264a:	7f 90       	pop	r7
    264c:	6f 90       	pop	r6
    264e:	5f 90       	pop	r5
    2650:	4f 90       	pop	r4
    2652:	3f 90       	pop	r3
    2654:	2f 90       	pop	r2
    2656:	08 95       	ret

00002658 <_Z30effect_axis_updown_randsuspendciii>:
	
	draw_positions_axis (AXIS_Z, positions,0);
}

void effect_axis_updown_randsuspend (char axis, int delay, int sleep, int invert)
{
    2658:	2f 92       	push	r2
    265a:	3f 92       	push	r3
    265c:	5f 92       	push	r5
    265e:	6f 92       	push	r6
    2660:	7f 92       	push	r7
    2662:	8f 92       	push	r8
    2664:	9f 92       	push	r9
    2666:	af 92       	push	r10
    2668:	bf 92       	push	r11
    266a:	cf 92       	push	r12
    266c:	df 92       	push	r13
    266e:	ef 92       	push	r14
    2670:	ff 92       	push	r15
    2672:	0f 93       	push	r16
    2674:	1f 93       	push	r17
    2676:	cf 93       	push	r28
    2678:	df 93       	push	r29
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	c0 58       	subi	r28, 0x80	; 128
    2680:	d1 09       	sbc	r29, r1
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	f8 94       	cli
    2686:	de bf       	out	0x3e, r29	; 62
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	cd bf       	out	0x3d, r28	; 61
    268c:	78 2e       	mov	r7, r24
    268e:	56 2e       	mov	r5, r22
    2690:	67 2e       	mov	r6, r23
    2692:	1a 01       	movw	r2, r20
    2694:	49 01       	movw	r8, r18
    2696:	5e 01       	movw	r10, r28
    2698:	81 e4       	ldi	r24, 0x41	; 65
    269a:	a8 0e       	add	r10, r24
    269c:	b1 1c       	adc	r11, r1
    269e:	85 01       	movw	r16, r10
    26a0:	65 01       	movw	r12, r10
    26a2:	de 01       	movw	r26, r28
    26a4:	11 96       	adiw	r26, 0x01	; 1
    26a6:	7d 01       	movw	r14, r26
	int i,px;
	
	// Set 64 random positions
	for (i=0; i<64; i++)
	{
		positions[i] = 0; // Set all starting positions to 0
    26a8:	f7 01       	movw	r30, r14
    26aa:	11 92       	st	Z+, r1
    26ac:	7f 01       	movw	r14, r30
		destinations[i] = rand()%8;
    26ae:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    26b2:	87 70       	andi	r24, 0x07	; 7
    26b4:	90 78       	andi	r25, 0x80	; 128
    26b6:	99 23       	and	r25, r25
    26b8:	24 f4       	brge	.+8      	; 0x26c2 <_Z30effect_axis_updown_randsuspendciii+0x6a>
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	88 6f       	ori	r24, 0xF8	; 248
    26be:	9f 6f       	ori	r25, 0xFF	; 255
    26c0:	01 96       	adiw	r24, 0x01	; 1
    26c2:	d6 01       	movw	r26, r12
    26c4:	8d 93       	st	X+, r24
    26c6:	6d 01       	movw	r12, r26
	unsigned char destinations[64];

	int i,px;
	
	// Set 64 random positions
	for (i=0; i<64; i++)
    26c8:	e0 16       	cp	r14, r16
    26ca:	f1 06       	cpc	r15, r17
    26cc:	69 f7       	brne	.-38     	; 0x26a8 <_Z30effect_axis_updown_randsuspendciii+0x50>
    26ce:	68 94       	set
    26d0:	ee 24       	eor	r14, r14
    26d2:	e3 f8       	bld	r14, 3
    26d4:	f1 2c       	mov	r15, r1
    26d6:	d5 01       	movw	r26, r10
    26d8:	fe 01       	movw	r30, r28
    26da:	31 96       	adiw	r30, 0x01	; 1
	for (i=0; i<8; i++)
	{
		// For every iteration, move all position one step closer to their destination
		for (px=0; px<64; px++)
		{
			if (positions[px]<destinations[px])
    26dc:	80 81       	ld	r24, Z
    26de:	9d 91       	ld	r25, X+
    26e0:	89 17       	cp	r24, r25
    26e2:	10 f4       	brcc	.+4      	; 0x26e8 <_Z30effect_axis_updown_randsuspendciii+0x90>
			{
				positions[px]++;
    26e4:	8f 5f       	subi	r24, 0xFF	; 255
    26e6:	80 83       	st	Z, r24
    26e8:	31 96       	adiw	r30, 0x01	; 1

	// Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
	{
		// For every iteration, move all position one step closer to their destination
		for (px=0; px<64; px++)
    26ea:	e0 17       	cp	r30, r16
    26ec:	f1 07       	cpc	r31, r17
    26ee:	b1 f7       	brne	.-20     	; 0x26dc <_Z30effect_axis_updown_randsuspendciii+0x84>
			{
				positions[px]++;
			}
		}
		// Draw the positions and take a nap
		draw_positions_axis (axis, positions,invert);
    26f0:	a4 01       	movw	r20, r8
    26f2:	be 01       	movw	r22, r28
    26f4:	6f 5f       	subi	r22, 0xFF	; 255
    26f6:	7f 4f       	sbci	r23, 0xFF	; 255
    26f8:	87 2d       	mov	r24, r7
    26fa:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z19draw_positions_axiscPhi>
		delay_ms(delay);
    26fe:	d5 2c       	mov	r13, r5
    2700:	c6 2c       	mov	r12, r6
    2702:	85 2d       	mov	r24, r5
    2704:	96 2d       	mov	r25, r6
    2706:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    270a:	b1 e0       	ldi	r27, 0x01	; 1
    270c:	eb 1a       	sub	r14, r27
    270e:	f1 08       	sbc	r15, r1
		positions[i] = 0; // Set all starting positions to 0
		destinations[i] = rand()%8;
	}

	// Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
    2710:	11 f7       	brne	.-60     	; 0x26d6 <_Z30effect_axis_updown_randsuspendciii+0x7e>
    2712:	9e 01       	movw	r18, r28
    2714:	2f 57       	subi	r18, 0x7F	; 127
    2716:	3f 4f       	sbci	r19, 0xFF	; 255
    2718:	f5 01       	movw	r30, r10
	}
	
	// Set all destinations to 7 (opposite from the side they started out)
	for (i=0; i<64; i++)
	{
		destinations[i] = 7;
    271a:	87 e0       	ldi	r24, 0x07	; 7
    271c:	81 93       	st	Z+, r24
		draw_positions_axis (axis, positions,invert);
		delay_ms(delay);
	}
	
	// Set all destinations to 7 (opposite from the side they started out)
	for (i=0; i<64; i++)
    271e:	2e 17       	cp	r18, r30
    2720:	3f 07       	cpc	r19, r31
    2722:	e1 f7       	brne	.-8      	; 0x271c <_Z30effect_axis_updown_randsuspendciii+0xc4>
	{
		destinations[i] = 7;
	}
	
	// Suspend the positions in mid-air for a while
	delay_ms(sleep);
    2724:	c1 01       	movw	r24, r2
    2726:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    272a:	68 94       	set
    272c:	ee 24       	eor	r14, r14
    272e:	e3 f8       	bld	r14, 3
    2730:	f1 2c       	mov	r15, r1
    2732:	95 01       	movw	r18, r10
    2734:	fe 01       	movw	r30, r28
    2736:	31 96       	adiw	r30, 0x01	; 1
    2738:	af 01       	movw	r20, r30
	// Then do the same thing one more time
	for (i=0; i<8; i++)
	{
		for (px=0; px<64; px++)
		{
			if (positions[px]<destinations[px])
    273a:	80 81       	ld	r24, Z
    273c:	d9 01       	movw	r26, r18
    273e:	9d 91       	ld	r25, X+
    2740:	9d 01       	movw	r18, r26
    2742:	89 17       	cp	r24, r25
    2744:	10 f4       	brcc	.+4      	; 0x274a <_Z30effect_axis_updown_randsuspendciii+0xf2>
			{
				positions[px]++;
    2746:	8f 5f       	subi	r24, 0xFF	; 255
    2748:	80 83       	st	Z, r24
			}
			if (positions[px]>destinations[px])
    274a:	da 01       	movw	r26, r20
    274c:	8c 91       	ld	r24, X
    274e:	98 17       	cp	r25, r24
    2750:	10 f4       	brcc	.+4      	; 0x2756 <_Z30effect_axis_updown_randsuspendciii+0xfe>
			{
				positions[px]--;
    2752:	81 50       	subi	r24, 0x01	; 1
    2754:	8c 93       	st	X, r24
    2756:	31 96       	adiw	r30, 0x01	; 1
	delay_ms(sleep);
	
	// Then do the same thing one more time
	for (i=0; i<8; i++)
	{
		for (px=0; px<64; px++)
    2758:	e0 17       	cp	r30, r16
    275a:	f1 07       	cpc	r31, r17
    275c:	69 f7       	brne	.-38     	; 0x2738 <_Z30effect_axis_updown_randsuspendciii+0xe0>
			if (positions[px]>destinations[px])
			{
				positions[px]--;
			}
		}
		draw_positions_axis (axis, positions,invert);
    275e:	a4 01       	movw	r20, r8
    2760:	be 01       	movw	r22, r28
    2762:	6f 5f       	subi	r22, 0xFF	; 255
    2764:	7f 4f       	sbci	r23, 0xFF	; 255
    2766:	87 2d       	mov	r24, r7
    2768:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z19draw_positions_axiscPhi>
		delay_ms(delay);
    276c:	8d 2d       	mov	r24, r13
    276e:	9c 2d       	mov	r25, r12
    2770:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
    2774:	b1 e0       	ldi	r27, 0x01	; 1
    2776:	eb 1a       	sub	r14, r27
    2778:	f1 08       	sbc	r15, r1
	
	// Suspend the positions in mid-air for a while
	delay_ms(sleep);
	
	// Then do the same thing one more time
	for (i=0; i<8; i++)
    277a:	d9 f6       	brne	.-74     	; 0x2732 <_Z30effect_axis_updown_randsuspendciii+0xda>
			}
		}
		draw_positions_axis (axis, positions,invert);
		delay_ms(delay);
	}
}
    277c:	c0 58       	subi	r28, 0x80	; 128
    277e:	df 4f       	sbci	r29, 0xFF	; 255
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	de bf       	out	0x3e, r29	; 62
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	cd bf       	out	0x3d, r28	; 61
    278a:	df 91       	pop	r29
    278c:	cf 91       	pop	r28
    278e:	1f 91       	pop	r17
    2790:	0f 91       	pop	r16
    2792:	ff 90       	pop	r15
    2794:	ef 90       	pop	r14
    2796:	df 90       	pop	r13
    2798:	cf 90       	pop	r12
    279a:	bf 90       	pop	r11
    279c:	af 90       	pop	r10
    279e:	9f 90       	pop	r9
    27a0:	8f 90       	pop	r8
    27a2:	7f 90       	pop	r7
    27a4:	6f 90       	pop	r6
    27a6:	5f 90       	pop	r5
    27a8:	3f 90       	pop	r3
    27aa:	2f 90       	pop	r2
    27ac:	08 95       	ret

000027ae <_Z32effect_boxside_randsend_parallelciii>:
	
}


void effect_boxside_randsend_parallel (char axis, int origin, int delay, int mode)
{
    27ae:	2f 92       	push	r2
    27b0:	3f 92       	push	r3
    27b2:	4f 92       	push	r4
    27b4:	5f 92       	push	r5
    27b6:	6f 92       	push	r6
    27b8:	7f 92       	push	r7
    27ba:	8f 92       	push	r8
    27bc:	9f 92       	push	r9
    27be:	af 92       	push	r10
    27c0:	bf 92       	push	r11
    27c2:	cf 92       	push	r12
    27c4:	df 92       	push	r13
    27c6:	ef 92       	push	r14
    27c8:	ff 92       	push	r15
    27ca:	0f 93       	push	r16
    27cc:	1f 93       	push	r17
    27ce:	cf 93       	push	r28
    27d0:	df 93       	push	r29
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	c0 58       	subi	r28, 0x80	; 128
    27d8:	d1 09       	sbc	r29, r1
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	28 2e       	mov	r2, r24
    27e6:	7b 01       	movw	r14, r22
    27e8:	3a 01       	movw	r6, r20
    27ea:	59 01       	movw	r10, r18
    27ec:	8e 01       	movw	r16, r28
    27ee:	0f 57       	subi	r16, 0x7F	; 127
    27f0:	1f 4f       	sbci	r17, 0xFF	; 255
    27f2:	fe 01       	movw	r30, r28
    27f4:	ef 5b       	subi	r30, 0xBF	; 191
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
	int notdone2 = 1;
	int sent = 0;
	
	for (i=0;i<64;i++)
	{
		pos[i] = 0;
    27f8:	11 92       	st	Z+, r1
	unsigned char pos[64];
	int notdone = 1;
	int notdone2 = 1;
	int sent = 0;
	
	for (i=0;i<64;i++)
    27fa:	0e 17       	cp	r16, r30
    27fc:	1f 07       	cpc	r17, r31
    27fe:	e1 f7       	brne	.-8      	; 0x27f8 <_Z32effect_boxside_randsend_parallelciii+0x4a>
    2800:	81 2c       	mov	r8, r1
    2802:	91 2c       	mov	r9, r1
    2804:	cc 24       	eor	r12, r12
    2806:	c3 94       	inc	r12
    2808:	d1 2c       	mov	r13, r1
			if (pos[i] == 7)
			done++;
		}
		
		if (done == 64)
		notdone = 0;
    280a:	31 2c       	mov	r3, r1
    280c:	41 2c       	mov	r4, r1
			if (origin == 0)
			{
				cubepos[i] = pos[i];
			} else
			{
				cubepos[i] = (7-pos[i]);
    280e:	0f 2e       	mov	r0, r31
    2810:	f7 e0       	ldi	r31, 0x07	; 7
    2812:	5f 2e       	mov	r5, r31
    2814:	f0 2d       	mov	r31, r0
		pos[i] = 0;
	}
	
	while (notdone)
	{
		if (mode == 1)
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	a8 16       	cp	r10, r24
    281a:	b1 04       	cpc	r11, r1
    281c:	21 f5       	brne	.+72     	; 0x2866 <_Z32effect_boxside_randsend_parallelciii+0xb8>
		{
			notdone2 = 1;
			while (notdone2 && sent<64)
    281e:	90 e4       	ldi	r25, 0x40	; 64
    2820:	89 16       	cp	r8, r25
    2822:	91 04       	cpc	r9, r1
    2824:	a4 f5       	brge	.+104    	; 0x288e <_Z32effect_boxside_randsend_parallelciii+0xe0>
			{
				i = rand()%64;
    2826:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    282a:	8f 73       	andi	r24, 0x3F	; 63
    282c:	90 78       	andi	r25, 0x80	; 128
    282e:	99 23       	and	r25, r25
    2830:	24 f4       	brge	.+8      	; 0x283a <_Z32effect_boxside_randsend_parallelciii+0x8c>
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	80 6c       	ori	r24, 0xC0	; 192
    2836:	9f 6f       	ori	r25, 0xFF	; 255
    2838:	01 96       	adiw	r24, 0x01	; 1
    283a:	9c 01       	movw	r18, r24
				if (pos[i] == 0)
    283c:	e1 e4       	ldi	r30, 0x41	; 65
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	ec 0f       	add	r30, r28
    2842:	fd 1f       	adc	r31, r29
    2844:	e8 0f       	add	r30, r24
    2846:	f9 1f       	adc	r31, r25
    2848:	80 81       	ld	r24, Z
    284a:	81 11       	cpse	r24, r1
    284c:	ec cf       	rjmp	.-40     	; 0x2826 <_Z32effect_boxside_randsend_parallelciii+0x78>
				{
					sent++;
    284e:	8f ef       	ldi	r24, 0xFF	; 255
    2850:	88 1a       	sub	r8, r24
    2852:	98 0a       	sbc	r9, r24
					pos[i] += 1;
    2854:	e1 e4       	ldi	r30, 0x41	; 65
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	ec 0f       	add	r30, r28
    285a:	fd 1f       	adc	r31, r29
    285c:	e2 0f       	add	r30, r18
    285e:	f3 1f       	adc	r31, r19
    2860:	91 e0       	ldi	r25, 0x01	; 1
    2862:	90 83       	st	Z, r25
    2864:	14 c0       	rjmp	.+40     	; 0x288e <_Z32effect_boxside_randsend_parallelciii+0xe0>
					notdone2 = 0;
				}
			}
		} else if (mode == 2)
    2866:	82 e0       	ldi	r24, 0x02	; 2
    2868:	a8 16       	cp	r10, r24
    286a:	b1 04       	cpc	r11, r1
    286c:	81 f4       	brne	.+32     	; 0x288e <_Z32effect_boxside_randsend_parallelciii+0xe0>
		{
			if (sent<64)
    286e:	90 e4       	ldi	r25, 0x40	; 64
    2870:	89 16       	cp	r8, r25
    2872:	91 04       	cpc	r9, r1
    2874:	64 f4       	brge	.+24     	; 0x288e <_Z32effect_boxside_randsend_parallelciii+0xe0>
			{
				pos[sent] += 1;
    2876:	e1 e4       	ldi	r30, 0x41	; 65
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	ec 0f       	add	r30, r28
    287c:	fd 1f       	adc	r31, r29
    287e:	e8 0d       	add	r30, r8
    2880:	f9 1d       	adc	r31, r9
    2882:	80 81       	ld	r24, Z
    2884:	8f 5f       	subi	r24, 0xFF	; 255
    2886:	80 83       	st	Z, r24
				sent++;
    2888:	8f ef       	ldi	r24, 0xFF	; 255
    288a:	88 1a       	sub	r8, r24
    288c:	98 0a       	sbc	r9, r24
    288e:	fe 01       	movw	r30, r28
    2890:	ef 5b       	subi	r30, 0xBF	; 191
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
			}
		}
		
		done = 0;
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	df 01       	movw	r26, r30
		for (i=0;i<64;i++)
		{
			if (pos[i] > 0 && pos[i] <7)
    289a:	80 81       	ld	r24, Z
    289c:	9f ef       	ldi	r25, 0xFF	; 255
    289e:	98 0f       	add	r25, r24
    28a0:	96 30       	cpi	r25, 0x06	; 6
    28a2:	10 f4       	brcc	.+4      	; 0x28a8 <_Z32effect_boxside_randsend_parallelciii+0xfa>
			{
				pos[i] += 1;
    28a4:	8f 5f       	subi	r24, 0xFF	; 255
    28a6:	80 83       	st	Z, r24
    28a8:	31 96       	adiw	r30, 0x01	; 1
			}
			
			if (pos[i] == 7)
    28aa:	8c 91       	ld	r24, X
    28ac:	87 30       	cpi	r24, 0x07	; 7
    28ae:	11 f4       	brne	.+4      	; 0x28b4 <_Z32effect_boxside_randsend_parallelciii+0x106>
			done++;
    28b0:	2f 5f       	subi	r18, 0xFF	; 255
    28b2:	3f 4f       	sbci	r19, 0xFF	; 255
				sent++;
			}
		}
		
		done = 0;
		for (i=0;i<64;i++)
    28b4:	0e 17       	cp	r16, r30
    28b6:	1f 07       	cpc	r17, r31
    28b8:	79 f7       	brne	.-34     	; 0x2898 <_Z32effect_boxside_randsend_parallelciii+0xea>
			
			if (pos[i] == 7)
			done++;
		}
		
		if (done == 64)
    28ba:	20 34       	cpi	r18, 0x40	; 64
    28bc:	31 05       	cpc	r19, r1
    28be:	11 f4       	brne	.+4      	; 0x28c4 <_Z32effect_boxside_randsend_parallelciii+0x116>
		notdone = 0;
    28c0:	c3 2c       	mov	r12, r3
    28c2:	d4 2c       	mov	r13, r4
    28c4:	de 01       	movw	r26, r28
    28c6:	11 96       	adiw	r26, 0x01	; 1
    28c8:	fe 01       	movw	r30, r28
    28ca:	ef 5b       	subi	r30, 0xBF	; 191
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
		
		for (i=0;i<64;i++)
		{
			if (origin == 0)
    28ce:	e1 14       	cp	r14, r1
    28d0:	f1 04       	cpc	r15, r1
    28d2:	19 f4       	brne	.+6      	; 0x28da <_Z32effect_boxside_randsend_parallelciii+0x12c>
			{
				cubepos[i] = pos[i];
    28d4:	80 81       	ld	r24, Z
    28d6:	8c 93       	st	X, r24
    28d8:	04 c0       	rjmp	.+8      	; 0x28e2 <_Z32effect_boxside_randsend_parallelciii+0x134>
			} else
			{
				cubepos[i] = (7-pos[i]);
    28da:	80 81       	ld	r24, Z
    28dc:	95 2d       	mov	r25, r5
    28de:	98 1b       	sub	r25, r24
    28e0:	9c 93       	st	X, r25
    28e2:	31 96       	adiw	r30, 0x01	; 1
    28e4:	11 96       	adiw	r26, 0x01	; 1
		}
		
		if (done == 64)
		notdone = 0;
		
		for (i=0;i<64;i++)
    28e6:	e0 17       	cp	r30, r16
    28e8:	f1 07       	cpc	r31, r17
    28ea:	89 f7       	brne	.-30     	; 0x28ce <_Z32effect_boxside_randsend_parallelciii+0x120>
				cubepos[i] = (7-pos[i]);
			}
		}
		
		
		delay_ms(delay);
    28ec:	c3 01       	movw	r24, r6
    28ee:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
		draw_positions_axis(axis,cubepos,0);
    28f2:	43 2d       	mov	r20, r3
    28f4:	54 2d       	mov	r21, r4
    28f6:	be 01       	movw	r22, r28
    28f8:	6f 5f       	subi	r22, 0xFF	; 255
    28fa:	7f 4f       	sbci	r23, 0xFF	; 255
    28fc:	82 2d       	mov	r24, r2
    28fe:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z19draw_positions_axiscPhi>
	for (i=0;i<64;i++)
	{
		pos[i] = 0;
	}
	
	while (notdone)
    2902:	c1 14       	cp	r12, r1
    2904:	d1 04       	cpc	r13, r1
    2906:	09 f0       	breq	.+2      	; 0x290a <_Z32effect_boxside_randsend_parallelciii+0x15c>
    2908:	86 cf       	rjmp	.-244    	; 0x2816 <_Z32effect_boxside_randsend_parallelciii+0x68>
		
		delay_ms(delay);
		draw_positions_axis(axis,cubepos,0);
	}
	
}
    290a:	c0 58       	subi	r28, 0x80	; 128
    290c:	df 4f       	sbci	r29, 0xFF	; 255
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	df 91       	pop	r29
    291a:	cf 91       	pop	r28
    291c:	1f 91       	pop	r17
    291e:	0f 91       	pop	r16
    2920:	ff 90       	pop	r15
    2922:	ef 90       	pop	r14
    2924:	df 90       	pop	r13
    2926:	cf 90       	pop	r12
    2928:	bf 90       	pop	r11
    292a:	af 90       	pop	r10
    292c:	9f 90       	pop	r9
    292e:	8f 90       	pop	r8
    2930:	7f 90       	pop	r7
    2932:	6f 90       	pop	r6
    2934:	5f 90       	pop	r5
    2936:	4f 90       	pop	r4
    2938:	3f 90       	pop	r3
    293a:	2f 90       	pop	r2
    293c:	08 95       	ret

0000293e <_Z14effect_loadbari>:


// Light all leds layer by layer,
// then unset layer by layer
void effect_loadbar(int delay)
{
    293e:	bf 92       	push	r11
    2940:	cf 92       	push	r12
    2942:	df 92       	push	r13
    2944:	ef 92       	push	r14
    2946:	ff 92       	push	r15
    2948:	0f 93       	push	r16
    294a:	1f 93       	push	r17
    294c:	cf 93       	push	r28
    294e:	df 93       	push	r29
    2950:	ec 01       	movw	r28, r24
	fill(0x00);
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
	
	int z,y;
	
	for (z=0;z<8;z++)
    2958:	00 e0       	ldi	r16, 0x00	; 0
    295a:	10 e0       	ldi	r17, 0x00	; 0
	{
		for (y=0;y<8;y++)
		cube[z][y] = 0xff;
    295c:	ff 24       	eor	r15, r15
    295e:	fa 94       	dec	r15
		
		delay_ms(delay);
    2960:	bc 2e       	mov	r11, r28
    2962:	ed 2e       	mov	r14, r29
{
	fill(0x00);
	
	int z,y;
	
	for (z=0;z<8;z++)
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
	{
		for (y=0;y<8;y++)
		cube[z][y] = 0xff;
    2968:	98 01       	movw	r18, r16
    296a:	22 0f       	add	r18, r18
    296c:	33 1f       	adc	r19, r19
    296e:	22 0f       	add	r18, r18
    2970:	33 1f       	adc	r19, r19
    2972:	22 0f       	add	r18, r18
    2974:	33 1f       	adc	r19, r19
    2976:	23 53       	subi	r18, 0x33	; 51
    2978:	3f 4f       	sbci	r19, 0xFF	; 255
    297a:	f9 01       	movw	r30, r18
    297c:	e8 0f       	add	r30, r24
    297e:	f9 1f       	adc	r31, r25
    2980:	f0 82       	st	Z, r15
	
	int z,y;
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
    2982:	01 96       	adiw	r24, 0x01	; 1
    2984:	88 30       	cpi	r24, 0x08	; 8
    2986:	91 05       	cpc	r25, r1
    2988:	c1 f7       	brne	.-16     	; 0x297a <_Z14effect_loadbari+0x3c>
		cube[z][y] = 0xff;
		
		delay_ms(delay);
    298a:	db 2c       	mov	r13, r11
    298c:	ce 2c       	mov	r12, r14
    298e:	8b 2d       	mov	r24, r11
    2990:	9e 2d       	mov	r25, r14
    2992:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
{
	fill(0x00);
	
	int z,y;
	
	for (z=0;z<8;z++)
    2996:	0f 5f       	subi	r16, 0xFF	; 255
    2998:	1f 4f       	sbci	r17, 0xFF	; 255
    299a:	08 30       	cpi	r16, 0x08	; 8
    299c:	11 05       	cpc	r17, r1
    299e:	11 f7       	brne	.-60     	; 0x2964 <_Z14effect_loadbari+0x26>
		cube[z][y] = 0xff;
		
		delay_ms(delay);
	}
	
	delay_ms(delay*3);
    29a0:	ce 01       	movw	r24, r28
    29a2:	88 0f       	add	r24, r24
    29a4:	99 1f       	adc	r25, r25
    29a6:	8c 0f       	add	r24, r28
    29a8:	9d 1f       	adc	r25, r29
    29aa:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
	
	for (z=0;z<8;z++)
    29ae:	c0 e0       	ldi	r28, 0x00	; 0
    29b0:	d0 e0       	ldi	r29, 0x00	; 0
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	90 e0       	ldi	r25, 0x00	; 0
	{
		for (y=0;y<8;y++)
		cube[z][y] = 0x00;
    29b6:	9e 01       	movw	r18, r28
    29b8:	22 0f       	add	r18, r18
    29ba:	33 1f       	adc	r19, r19
    29bc:	22 0f       	add	r18, r18
    29be:	33 1f       	adc	r19, r19
    29c0:	22 0f       	add	r18, r18
    29c2:	33 1f       	adc	r19, r19
    29c4:	23 53       	subi	r18, 0x33	; 51
    29c6:	3f 4f       	sbci	r19, 0xFF	; 255
    29c8:	f9 01       	movw	r30, r18
    29ca:	e8 0f       	add	r30, r24
    29cc:	f9 1f       	adc	r31, r25
    29ce:	10 82       	st	Z, r1
	
	delay_ms(delay*3);
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
    29d0:	01 96       	adiw	r24, 0x01	; 1
    29d2:	88 30       	cpi	r24, 0x08	; 8
    29d4:	91 05       	cpc	r25, r1
    29d6:	c1 f7       	brne	.-16     	; 0x29c8 <_Z14effect_loadbari+0x8a>
		cube[z][y] = 0x00;
		
		delay_ms(delay);
    29d8:	8d 2d       	mov	r24, r13
    29da:	9c 2d       	mov	r25, r12
    29dc:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
		delay_ms(delay);
	}
	
	delay_ms(delay*3);
	
	for (z=0;z<8;z++)
    29e0:	21 96       	adiw	r28, 0x01	; 1
    29e2:	c8 30       	cpi	r28, 0x08	; 8
    29e4:	d1 05       	cpc	r29, r1
    29e6:	29 f7       	brne	.-54     	; 0x29b2 <_Z14effect_loadbari+0x74>
		for (y=0;y<8;y++)
		cube[z][y] = 0x00;
		
		delay_ms(delay);
	}
}
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	1f 91       	pop	r17
    29ee:	0f 91       	pop	r16
    29f0:	ff 90       	pop	r15
    29f2:	ef 90       	pop	r14
    29f4:	df 90       	pop	r13
    29f6:	cf 90       	pop	r12
    29f8:	bf 90       	pop	r11
    29fa:	08 95       	ret

000029fc <_Z27effect_random_sparkle_flashiii>:


// Set n number of voxels at random positions
void effect_random_sparkle_flash (int iterations, int voxels, int delay)
{
    29fc:	6f 92       	push	r6
    29fe:	7f 92       	push	r7
    2a00:	8f 92       	push	r8
    2a02:	9f 92       	push	r9
    2a04:	af 92       	push	r10
    2a06:	bf 92       	push	r11
    2a08:	cf 92       	push	r12
    2a0a:	df 92       	push	r13
    2a0c:	ef 92       	push	r14
    2a0e:	ff 92       	push	r15
    2a10:	0f 93       	push	r16
    2a12:	1f 93       	push	r17
    2a14:	cf 93       	push	r28
    2a16:	df 93       	push	r29
	int i;
	int v;
	for (i = 0; i < iterations; i++)
    2a18:	18 16       	cp	r1, r24
    2a1a:	19 06       	cpc	r1, r25
    2a1c:	0c f0       	brlt	.+2      	; 0x2a20 <_Z27effect_random_sparkle_flashiii+0x24>
    2a1e:	43 c0       	rjmp	.+134    	; 0x2aa6 <_Z27effect_random_sparkle_flashiii+0xaa>
    2a20:	3a 01       	movw	r6, r20
    2a22:	6b 01       	movw	r12, r22
    2a24:	4c 01       	movw	r8, r24
    2a26:	a1 2c       	mov	r10, r1
    2a28:	b1 2c       	mov	r11, r1
	{
		for (v=0;v<=voxels;v++)
    2a2a:	dd 20       	and	r13, r13
    2a2c:	84 f1       	brlt	.+96     	; 0x2a8e <_Z27effect_random_sparkle_flashiii+0x92>
    2a2e:	e1 2c       	mov	r14, r1
    2a30:	f1 2c       	mov	r15, r1
		setvoxel(rand()%8,rand()%8,rand()%8);
    2a32:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    2a36:	8c 01       	movw	r16, r24
    2a38:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    2a3c:	ec 01       	movw	r28, r24
    2a3e:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    2a42:	a8 01       	movw	r20, r16
    2a44:	47 70       	andi	r20, 0x07	; 7
    2a46:	50 78       	andi	r21, 0x80	; 128
    2a48:	55 23       	and	r21, r21
    2a4a:	34 f4       	brge	.+12     	; 0x2a58 <_Z27effect_random_sparkle_flashiii+0x5c>
    2a4c:	41 50       	subi	r20, 0x01	; 1
    2a4e:	51 09       	sbc	r21, r1
    2a50:	48 6f       	ori	r20, 0xF8	; 248
    2a52:	5f 6f       	ori	r21, 0xFF	; 255
    2a54:	4f 5f       	subi	r20, 0xFF	; 255
    2a56:	5f 4f       	sbci	r21, 0xFF	; 255
    2a58:	be 01       	movw	r22, r28
    2a5a:	67 70       	andi	r22, 0x07	; 7
    2a5c:	70 78       	andi	r23, 0x80	; 128
    2a5e:	77 23       	and	r23, r23
    2a60:	34 f4       	brge	.+12     	; 0x2a6e <_Z27effect_random_sparkle_flashiii+0x72>
    2a62:	61 50       	subi	r22, 0x01	; 1
    2a64:	71 09       	sbc	r23, r1
    2a66:	68 6f       	ori	r22, 0xF8	; 248
    2a68:	7f 6f       	ori	r23, 0xFF	; 255
    2a6a:	6f 5f       	subi	r22, 0xFF	; 255
    2a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a6e:	87 70       	andi	r24, 0x07	; 7
    2a70:	90 78       	andi	r25, 0x80	; 128
    2a72:	99 23       	and	r25, r25
    2a74:	24 f4       	brge	.+8      	; 0x2a7e <_Z27effect_random_sparkle_flashiii+0x82>
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	88 6f       	ori	r24, 0xF8	; 248
    2a7a:	9f 6f       	ori	r25, 0xFF	; 255
    2a7c:	01 96       	adiw	r24, 0x01	; 1
    2a7e:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
{
	int i;
	int v;
	for (i = 0; i < iterations; i++)
	{
		for (v=0;v<=voxels;v++)
    2a82:	8f ef       	ldi	r24, 0xFF	; 255
    2a84:	e8 1a       	sub	r14, r24
    2a86:	f8 0a       	sbc	r15, r24
    2a88:	ce 14       	cp	r12, r14
    2a8a:	df 04       	cpc	r13, r15
    2a8c:	94 f6       	brge	.-92     	; 0x2a32 <_Z27effect_random_sparkle_flashiii+0x36>
		setvoxel(rand()%8,rand()%8,rand()%8);
		
		delay_ms(delay);
    2a8e:	c3 01       	movw	r24, r6
    2a90:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
		fill(0x00);
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4fillh>
// Set n number of voxels at random positions
void effect_random_sparkle_flash (int iterations, int voxels, int delay)
{
	int i;
	int v;
	for (i = 0; i < iterations; i++)
    2a9a:	8f ef       	ldi	r24, 0xFF	; 255
    2a9c:	a8 1a       	sub	r10, r24
    2a9e:	b8 0a       	sbc	r11, r24
    2aa0:	8a 14       	cp	r8, r10
    2aa2:	9b 04       	cpc	r9, r11
    2aa4:	11 f6       	brne	.-124    	; 0x2a2a <_Z27effect_random_sparkle_flashiii+0x2e>
		setvoxel(rand()%8,rand()%8,rand()%8);
		
		delay_ms(delay);
		fill(0x00);
	}
}
    2aa6:	df 91       	pop	r29
    2aa8:	cf 91       	pop	r28
    2aaa:	1f 91       	pop	r17
    2aac:	0f 91       	pop	r16
    2aae:	ff 90       	pop	r15
    2ab0:	ef 90       	pop	r14
    2ab2:	df 90       	pop	r13
    2ab4:	cf 90       	pop	r12
    2ab6:	bf 90       	pop	r11
    2ab8:	af 90       	pop	r10
    2aba:	9f 90       	pop	r9
    2abc:	8f 90       	pop	r8
    2abe:	7f 90       	pop	r7
    2ac0:	6f 90       	pop	r6
    2ac2:	08 95       	ret

00002ac4 <_Z21effect_random_sparklev>:

// blink 1 random voxel, blink 2 random voxels..... blink 20 random voxels
// and back to 1 again.
void effect_random_sparkle (void)
{
    2ac4:	cf 93       	push	r28
    2ac6:	df 93       	push	r29
	int i;
	
	for (i=1;i<20;i++)
    2ac8:	c1 e0       	ldi	r28, 0x01	; 1
    2aca:	d0 e0       	ldi	r29, 0x00	; 0
	{
		effect_random_sparkle_flash(5,i,200);
    2acc:	48 ec       	ldi	r20, 0xC8	; 200
    2ace:	50 e0       	ldi	r21, 0x00	; 0
    2ad0:	be 01       	movw	r22, r28
    2ad2:	85 e0       	ldi	r24, 0x05	; 5
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	0e 94 fe 14 	call	0x29fc	; 0x29fc <_Z27effect_random_sparkle_flashiii>
// and back to 1 again.
void effect_random_sparkle (void)
{
	int i;
	
	for (i=1;i<20;i++)
    2ada:	21 96       	adiw	r28, 0x01	; 1
    2adc:	c4 31       	cpi	r28, 0x14	; 20
    2ade:	d1 05       	cpc	r29, r1
    2ae0:	a9 f7       	brne	.-22     	; 0x2acc <_Z21effect_random_sparklev+0x8>
		effect_random_sparkle_flash(5,i,200);
	}
	
	for (i=20;i>=1;i--)
	{
		effect_random_sparkle_flash(5,i,200);
    2ae2:	48 ec       	ldi	r20, 0xC8	; 200
    2ae4:	50 e0       	ldi	r21, 0x00	; 0
    2ae6:	be 01       	movw	r22, r28
    2ae8:	85 e0       	ldi	r24, 0x05	; 5
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	0e 94 fe 14 	call	0x29fc	; 0x29fc <_Z27effect_random_sparkle_flashiii>
	for (i=1;i<20;i++)
	{
		effect_random_sparkle_flash(5,i,200);
	}
	
	for (i=20;i>=1;i--)
    2af0:	21 97       	sbiw	r28, 0x01	; 1
    2af2:	b9 f7       	brne	.-18     	; 0x2ae2 <_Z21effect_random_sparklev+0x1e>
	{
		effect_random_sparkle_flash(5,i,200);
	}
	
}
    2af4:	df 91       	pop	r29
    2af6:	cf 91       	pop	r28
    2af8:	08 95       	ret

00002afa <_Z20effect_telcstairs_doiii>:

int effect_telcstairs_do(int x, int val, int delay)
{
    2afa:	cf 93       	push	r28
    2afc:	df 93       	push	r29
    2afe:	ec 01       	movw	r28, r24
    2b00:	ca 01       	movw	r24, r20
	int y,z;

	for(y = 0, z = x; y <= z; y++, x--)
    2b02:	dd 23       	and	r29, r29
    2b04:	dc f0       	brlt	.+54     	; 0x2b3c <_Z20effect_telcstairs_doiii+0x42>
    2b06:	fe 01       	movw	r30, r28
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(x < CUBE_SIZE && y < CUBE_SIZE)
    2b0c:	e8 30       	cpi	r30, 0x08	; 8
    2b0e:	f1 05       	cpc	r31, r1
    2b10:	7c f4       	brge	.+30     	; 0x2b30 <_Z20effect_telcstairs_doiii+0x36>
    2b12:	28 30       	cpi	r18, 0x08	; 8
    2b14:	31 05       	cpc	r19, r1
    2b16:	64 f4       	brge	.+24     	; 0x2b30 <_Z20effect_telcstairs_doiii+0x36>
		{
			cube[x][y] = val;
    2b18:	df 01       	movw	r26, r30
    2b1a:	aa 0f       	add	r26, r26
    2b1c:	bb 1f       	adc	r27, r27
    2b1e:	aa 0f       	add	r26, r26
    2b20:	bb 1f       	adc	r27, r27
    2b22:	aa 0f       	add	r26, r26
    2b24:	bb 1f       	adc	r27, r27
    2b26:	a3 53       	subi	r26, 0x33	; 51
    2b28:	bf 4f       	sbci	r27, 0xFF	; 255
    2b2a:	a2 0f       	add	r26, r18
    2b2c:	b3 1f       	adc	r27, r19
    2b2e:	6c 93       	st	X, r22

int effect_telcstairs_do(int x, int val, int delay)
{
	int y,z;

	for(y = 0, z = x; y <= z; y++, x--)
    2b30:	2f 5f       	subi	r18, 0xFF	; 255
    2b32:	3f 4f       	sbci	r19, 0xFF	; 255
    2b34:	31 97       	sbiw	r30, 0x01	; 1
    2b36:	c2 17       	cp	r28, r18
    2b38:	d3 07       	cpc	r29, r19
    2b3a:	44 f7       	brge	.-48     	; 0x2b0c <_Z20effect_telcstairs_doiii+0x12>
		if(x < CUBE_SIZE && y < CUBE_SIZE)
		{
			cube[x][y] = val;
		}
	}
	delay_ms(delay);
    2b3c:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
	return z;
}
    2b40:	ce 01       	movw	r24, r28
    2b42:	df 91       	pop	r29
    2b44:	cf 91       	pop	r28
    2b46:	08 95       	ret

00002b48 <_Z17effect_telcstairsiii>:

void effect_telcstairs (int invert, int delay, int val)
{
    2b48:	0f 93       	push	r16
    2b4a:	1f 93       	push	r17
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	eb 01       	movw	r28, r22
    2b52:	8a 01       	movw	r16, r20
	int x;

	if(invert)
    2b54:	89 2b       	or	r24, r25
    2b56:	49 f0       	breq	.+18     	; 0x2b6a <_Z17effect_telcstairsiii+0x22>
    2b58:	80 e1       	ldi	r24, 0x10	; 16
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(x = CUBE_SIZE*2; x >= 0; x--)
		{
			x = effect_telcstairs_do(x,val,delay);
    2b5c:	ae 01       	movw	r20, r28
    2b5e:	b8 01       	movw	r22, r16
    2b60:	0e 94 7d 15 	call	0x2afa	; 0x2afa <_Z20effect_telcstairs_doiii>
{
	int x;

	if(invert)
	{
		for(x = CUBE_SIZE*2; x >= 0; x--)
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	d2 f7       	brpl	.-12     	; 0x2b5c <_Z17effect_telcstairsiii+0x14>
    2b68:	0a c0       	rjmp	.+20     	; 0x2b7e <_Z17effect_telcstairsiii+0x36>
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		for(x = 0; x < CUBE_SIZE*2; x++)
		{
			x = effect_telcstairs_do(x,val,delay);
    2b6e:	ae 01       	movw	r20, r28
    2b70:	b8 01       	movw	r22, r16
    2b72:	0e 94 7d 15 	call	0x2afa	; 0x2afa <_Z20effect_telcstairs_doiii>
			x = effect_telcstairs_do(x,val,delay);
		}
	}
	else
	{
		for(x = 0; x < CUBE_SIZE*2; x++)
    2b76:	01 96       	adiw	r24, 0x01	; 1
    2b78:	80 31       	cpi	r24, 0x10	; 16
    2b7a:	91 05       	cpc	r25, r1
    2b7c:	c4 f3       	brlt	.-16     	; 0x2b6e <_Z17effect_telcstairsiii+0x26>
		{
			x = effect_telcstairs_do(x,val,delay);
		}
	}
}
    2b7e:	df 91       	pop	r29
    2b80:	cf 91       	pop	r28
    2b82:	1f 91       	pop	r17
    2b84:	0f 91       	pop	r16
    2b86:	08 95       	ret

00002b88 <_Z18effect_wormsqueezeiiiii>:

void effect_wormsqueeze (int size, int axis, int direction, int iterations, int delay)
{
    2b88:	2f 92       	push	r2
    2b8a:	3f 92       	push	r3
    2b8c:	4f 92       	push	r4
    2b8e:	5f 92       	push	r5
    2b90:	6f 92       	push	r6
    2b92:	7f 92       	push	r7
    2b94:	8f 92       	push	r8
    2b96:	9f 92       	push	r9
    2b98:	af 92       	push	r10
    2b9a:	bf 92       	push	r11
    2b9c:	cf 92       	push	r12
    2b9e:	df 92       	push	r13
    2ba0:	ef 92       	push	r14
    2ba2:	ff 92       	push	r15
    2ba4:	0f 93       	push	r16
    2ba6:	1f 93       	push	r17
    2ba8:	cf 93       	push	r28
    2baa:	df 93       	push	r29
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	64 97       	sbiw	r28, 0x14	; 20
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	de bf       	out	0x3e, r29	; 62
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	cd bf       	out	0x3d, r28	; 61
    2bbc:	98 87       	std	Y+8, r25	; 0x08
    2bbe:	8f 83       	std	Y+7, r24	; 0x07
    2bc0:	2b 01       	movw	r4, r22
    2bc2:	5c 87       	std	Y+12, r21	; 0x0c
    2bc4:	4b 87       	std	Y+11, r20	; 0x0b
    2bc6:	3e 87       	std	Y+14, r19	; 0x0e
    2bc8:	2d 87       	std	Y+13, r18	; 0x0d
    2bca:	18 8b       	std	Y+16, r17	; 0x10
    2bcc:	0f 87       	std	Y+15, r16	; 0x0f
	int x, y, i,j,k, dx, dy;
	int cube_size;
	int origin = 0;
	
	if (direction == -1)
    2bce:	4f 3f       	cpi	r20, 0xFF	; 255
    2bd0:	5f 4f       	sbci	r21, 0xFF	; 255
    2bd2:	31 f4       	brne	.+12     	; 0x2be0 <_Z18effect_wormsqueezeiiiii+0x58>
	origin = 7;
    2bd4:	0f 2e       	mov	r0, r31
    2bd6:	f7 e0       	ldi	r31, 0x07	; 7
    2bd8:	2f 2e       	mov	r2, r31
    2bda:	31 2c       	mov	r3, r1
    2bdc:	f0 2d       	mov	r31, r0
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <_Z18effect_wormsqueezeiiiii+0x5c>

void effect_wormsqueeze (int size, int axis, int direction, int iterations, int delay)
{
	int x, y, i,j,k, dx, dy;
	int cube_size;
	int origin = 0;
    2be0:	21 2c       	mov	r2, r1
    2be2:	31 2c       	mov	r3, r1
	
	if (direction == -1)
	origin = 7;
	
	cube_size = 8-(size-1);
    2be4:	89 e0       	ldi	r24, 0x09	; 9
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	ac 01       	movw	r20, r24
    2bea:	2f 81       	ldd	r18, Y+7	; 0x07
    2bec:	38 85       	ldd	r19, Y+8	; 0x08
    2bee:	42 1b       	sub	r20, r18
    2bf0:	53 0b       	sbc	r21, r19
    2bf2:	5a 87       	std	Y+10, r21	; 0x0a
    2bf4:	49 87       	std	Y+9, r20	; 0x09
	
	x = rand()%cube_size;
    2bf6:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    2bfa:	69 85       	ldd	r22, Y+9	; 0x09
    2bfc:	7a 85       	ldd	r23, Y+10	; 0x0a
    2bfe:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
    2c02:	9c 83       	std	Y+4, r25	; 0x04
    2c04:	8b 83       	std	Y+3, r24	; 0x03
	y = rand()%cube_size;
    2c06:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    2c0a:	69 85       	ldd	r22, Y+9	; 0x09
    2c0c:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c0e:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
    2c12:	9a 83       	std	Y+2, r25	; 0x02
    2c14:	89 83       	std	Y+1, r24	; 0x01
	
	for (i=0; i<iterations; i++)
    2c16:	4d 85       	ldd	r20, Y+13	; 0x0d
    2c18:	5e 85       	ldd	r21, Y+14	; 0x0e
    2c1a:	14 16       	cp	r1, r20
    2c1c:	15 06       	cpc	r1, r21
    2c1e:	0c f0       	brlt	.+2      	; 0x2c22 <_Z18effect_wormsqueezeiiiii+0x9a>
    2c20:	95 c0       	rjmp	.+298    	; 0x2d4c <_Z18effect_wormsqueezeiiiii+0x1c4>
    2c22:	1e 82       	std	Y+6, r1	; 0x06
    2c24:	1d 82       	std	Y+5, r1	; 0x05
    2c26:	8f 81       	ldd	r24, Y+7	; 0x07
    2c28:	98 85       	ldd	r25, Y+8	; 0x08
    2c2a:	9a 8b       	std	Y+18, r25	; 0x12
    2c2c:	89 8b       	std	Y+17, r24	; 0x11
	{
		dx = ((rand()%3)-1);
    2c2e:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    2c32:	9c 8b       	std	Y+20, r25	; 0x14
    2c34:	8b 8b       	std	Y+19, r24	; 0x13
		dy = ((rand()%3)-1);
    2c36:	0e 94 56 19 	call	0x32ac	; 0x32ac <rand>
    2c3a:	63 e0       	ldi	r22, 0x03	; 3
    2c3c:	70 e0       	ldi	r23, 0x00	; 0
    2c3e:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
    2c42:	9c 01       	movw	r18, r24
    2c44:	21 50       	subi	r18, 0x01	; 1
    2c46:	31 09       	sbc	r19, r1
		
		if ((x+dx) > 0 && (x+dx) < cube_size)
    2c48:	8b 89       	ldd	r24, Y+19	; 0x13
    2c4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c4c:	63 e0       	ldi	r22, 0x03	; 3
    2c4e:	70 e0       	ldi	r23, 0x00	; 0
    2c50:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__divmodhi4>
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	4b 81       	ldd	r20, Y+3	; 0x03
    2c58:	5c 81       	ldd	r21, Y+4	; 0x04
    2c5a:	84 0f       	add	r24, r20
    2c5c:	95 1f       	adc	r25, r21
    2c5e:	18 16       	cp	r1, r24
    2c60:	19 06       	cpc	r1, r25
    2c62:	3c f4       	brge	.+14     	; 0x2c72 <_Z18effect_wormsqueezeiiiii+0xea>
    2c64:	49 85       	ldd	r20, Y+9	; 0x09
    2c66:	5a 85       	ldd	r21, Y+10	; 0x0a
    2c68:	84 17       	cp	r24, r20
    2c6a:	95 07       	cpc	r25, r21
    2c6c:	14 f4       	brge	.+4      	; 0x2c72 <_Z18effect_wormsqueezeiiiii+0xea>
		x += dx;
    2c6e:	9c 83       	std	Y+4, r25	; 0x04
    2c70:	8b 83       	std	Y+3, r24	; 0x03
		
		if ((y+dy) > 0 && (y+dy) < cube_size)
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	9a 81       	ldd	r25, Y+2	; 0x02
    2c76:	28 0f       	add	r18, r24
    2c78:	39 1f       	adc	r19, r25
    2c7a:	12 16       	cp	r1, r18
    2c7c:	13 06       	cpc	r1, r19
    2c7e:	3c f4       	brge	.+14     	; 0x2c8e <_Z18effect_wormsqueezeiiiii+0x106>
    2c80:	49 85       	ldd	r20, Y+9	; 0x09
    2c82:	5a 85       	ldd	r21, Y+10	; 0x0a
    2c84:	24 17       	cp	r18, r20
    2c86:	35 07       	cpc	r19, r21
    2c88:	14 f4       	brge	.+4      	; 0x2c8e <_Z18effect_wormsqueezeiiiii+0x106>
		y += dy;
    2c8a:	3a 83       	std	Y+2, r19	; 0x02
    2c8c:	29 83       	std	Y+1, r18	; 0x01
		
		shift(axis, direction);
    2c8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c92:	84 2d       	mov	r24, r4
    2c94:	0e 94 bb 04 	call	0x976	; 0x976 <_Z5shiftci>
		

		for (j=0; j<size;j++)
    2c98:	8f 81       	ldd	r24, Y+7	; 0x07
    2c9a:	98 85       	ldd	r25, Y+8	; 0x08
    2c9c:	18 16       	cp	r1, r24
    2c9e:	19 06       	cpc	r1, r25
    2ca0:	0c f0       	brlt	.+2      	; 0x2ca4 <_Z18effect_wormsqueezeiiiii+0x11c>
    2ca2:	45 c0       	rjmp	.+138    	; 0x2d2e <_Z18effect_wormsqueezeiiiii+0x1a6>
    2ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca8:	af 80       	ldd	r10, Y+7	; 0x07
    2caa:	b8 84       	ldd	r11, Y+8	; 0x08
    2cac:	a8 0e       	add	r10, r24
    2cae:	b9 1e       	adc	r11, r25
    2cb0:	8c 01       	movw	r16, r24
    2cb2:	89 80       	ldd	r8, Y+1	; 0x01
    2cb4:	9a 80       	ldd	r9, Y+2	; 0x02
    2cb6:	29 89       	ldd	r18, Y+17	; 0x11
    2cb8:	3a 89       	ldd	r19, Y+18	; 0x12
    2cba:	28 0d       	add	r18, r8
    2cbc:	39 1d       	adc	r19, r9
				
				if (axis == AXIS_Y)
				setvoxel(x+j,origin,y+k);
				
				if (axis == AXIS_X)
				setvoxel(origin,y+j,x+k);
    2cbe:	6c 01       	movw	r12, r24
    2cc0:	c8 18       	sub	r12, r8
    2cc2:	d9 08       	sbc	r13, r9
    2cc4:	88 1a       	sub	r8, r24
    2cc6:	99 0a       	sbc	r9, r25
    2cc8:	3c 8b       	std	Y+20, r19	; 0x14
    2cca:	2b 8b       	std	Y+19, r18	; 0x13
		y += dy;
		
		shift(axis, direction);
		

		for (j=0; j<size;j++)
    2ccc:	e9 80       	ldd	r14, Y+1	; 0x01
    2cce:	fa 80       	ldd	r15, Y+2	; 0x02
				
				if (axis == AXIS_Y)
				setvoxel(x+j,origin,y+k);
				
				if (axis == AXIS_X)
				setvoxel(origin,y+j,x+k);
    2cd0:	34 01       	movw	r6, r8
    2cd2:	60 0e       	add	r6, r16
    2cd4:	71 1e       	adc	r7, r17

		for (j=0; j<size;j++)
		{
			for (k=0; k<size;k++)
			{
				if (axis == AXIS_Z)
    2cd6:	5a e7       	ldi	r21, 0x7A	; 122
    2cd8:	45 16       	cp	r4, r21
    2cda:	51 04       	cpc	r5, r1
    2cdc:	31 f4       	brne	.+12     	; 0x2cea <_Z18effect_wormsqueezeiiiii+0x162>
				setvoxel(x+j,y+k,origin);
    2cde:	a1 01       	movw	r20, r2
    2ce0:	b7 01       	movw	r22, r14
    2ce2:	c8 01       	movw	r24, r16
    2ce4:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
    2ce8:	15 c0       	rjmp	.+42     	; 0x2d14 <_Z18effect_wormsqueezeiiiii+0x18c>
				
				if (axis == AXIS_Y)
    2cea:	89 e7       	ldi	r24, 0x79	; 121
    2cec:	48 16       	cp	r4, r24
    2cee:	51 04       	cpc	r5, r1
    2cf0:	31 f4       	brne	.+12     	; 0x2cfe <_Z18effect_wormsqueezeiiiii+0x176>
				setvoxel(x+j,origin,y+k);
    2cf2:	a7 01       	movw	r20, r14
    2cf4:	b1 01       	movw	r22, r2
    2cf6:	c8 01       	movw	r24, r16
    2cf8:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
    2cfc:	0b c0       	rjmp	.+22     	; 0x2d14 <_Z18effect_wormsqueezeiiiii+0x18c>
				
				if (axis == AXIS_X)
    2cfe:	98 e7       	ldi	r25, 0x78	; 120
    2d00:	49 16       	cp	r4, r25
    2d02:	51 04       	cpc	r5, r1
    2d04:	39 f4       	brne	.+14     	; 0x2d14 <_Z18effect_wormsqueezeiiiii+0x18c>
				setvoxel(origin,y+j,x+k);
    2d06:	a6 01       	movw	r20, r12
    2d08:	4e 0d       	add	r20, r14
    2d0a:	5f 1d       	adc	r21, r15
    2d0c:	b3 01       	movw	r22, r6
    2d0e:	c1 01       	movw	r24, r2
    2d10:	0e 94 89 00 	call	0x112	; 0x112 <_Z8setvoxeliii>
    2d14:	2f ef       	ldi	r18, 0xFF	; 255
    2d16:	e2 1a       	sub	r14, r18
    2d18:	f2 0a       	sbc	r15, r18
		shift(axis, direction);
		

		for (j=0; j<size;j++)
		{
			for (k=0; k<size;k++)
    2d1a:	4b 89       	ldd	r20, Y+19	; 0x13
    2d1c:	5c 89       	ldd	r21, Y+20	; 0x14
    2d1e:	4e 15       	cp	r20, r14
    2d20:	5f 05       	cpc	r21, r15
    2d22:	c9 f6       	brne	.-78     	; 0x2cd6 <_Z18effect_wormsqueezeiiiii+0x14e>
    2d24:	0f 5f       	subi	r16, 0xFF	; 255
    2d26:	1f 4f       	sbci	r17, 0xFF	; 255
		y += dy;
		
		shift(axis, direction);
		

		for (j=0; j<size;j++)
    2d28:	0a 15       	cp	r16, r10
    2d2a:	1b 05       	cpc	r17, r11
    2d2c:	79 f6       	brne	.-98     	; 0x2ccc <_Z18effect_wormsqueezeiiiii+0x144>
				if (axis == AXIS_X)
				setvoxel(origin,y+j,x+k);
			}
		}
		
		delay_ms(delay);
    2d2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d30:	98 89       	ldd	r25, Y+16	; 0x10
    2d32:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>
	cube_size = 8-(size-1);
	
	x = rand()%cube_size;
	y = rand()%cube_size;
	
	for (i=0; i<iterations; i++)
    2d36:	8d 81       	ldd	r24, Y+5	; 0x05
    2d38:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3a:	01 96       	adiw	r24, 0x01	; 1
    2d3c:	9e 83       	std	Y+6, r25	; 0x06
    2d3e:	8d 83       	std	Y+5, r24	; 0x05
    2d40:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d42:	3e 85       	ldd	r19, Y+14	; 0x0e
    2d44:	28 17       	cp	r18, r24
    2d46:	39 07       	cpc	r19, r25
    2d48:	09 f0       	breq	.+2      	; 0x2d4c <_Z18effect_wormsqueezeiiiii+0x1c4>
    2d4a:	71 cf       	rjmp	.-286    	; 0x2c2e <_Z18effect_wormsqueezeiiiii+0xa6>
			}
		}
		
		delay_ms(delay);
	}
}
    2d4c:	64 96       	adiw	r28, 0x14	; 20
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	cd bf       	out	0x3d, r28	; 61
    2d58:	df 91       	pop	r29
    2d5a:	cf 91       	pop	r28
    2d5c:	1f 91       	pop	r17
    2d5e:	0f 91       	pop	r16
    2d60:	ff 90       	pop	r15
    2d62:	ef 90       	pop	r14
    2d64:	df 90       	pop	r13
    2d66:	cf 90       	pop	r12
    2d68:	bf 90       	pop	r11
    2d6a:	af 90       	pop	r10
    2d6c:	9f 90       	pop	r9
    2d6e:	8f 90       	pop	r8
    2d70:	7f 90       	pop	r7
    2d72:	6f 90       	pop	r6
    2d74:	5f 90       	pop	r5
    2d76:	4f 90       	pop	r4
    2d78:	3f 90       	pop	r3
    2d7a:	2f 90       	pop	r2
    2d7c:	08 95       	ret

00002d7e <_Z12font_getpathhPhi>:
	int i;
	
    for (i = 0; i < 8; i++)
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)i]);
	
}
    2d7e:	81 30       	cpi	r24, 0x01	; 1
    2d80:	19 f4       	brne	.+6      	; 0x2d88 <_Z12font_getpathhPhi+0xa>
    2d82:	ec e1       	ldi	r30, 0x1C	; 28
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	02 c0       	rjmp	.+4      	; 0x2d8c <_Z12font_getpathhPhi+0xe>
    2d88:	e0 e0       	ldi	r30, 0x00	; 0
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	14 16       	cp	r1, r20
    2d8e:	15 06       	cpc	r1, r21
    2d90:	5c f4       	brge	.+22     	; 0x2da8 <_Z12font_getpathhPhi+0x2a>
    2d92:	e6 57       	subi	r30, 0x76	; 118
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
    2d96:	db 01       	movw	r26, r22
    2d98:	64 0f       	add	r22, r20
    2d9a:	75 1f       	adc	r23, r21
    2d9c:	84 91       	lpm	r24, Z
    2d9e:	8d 93       	st	X+, r24
    2da0:	31 96       	adiw	r30, 0x01	; 1
    2da2:	a6 17       	cp	r26, r22
    2da4:	b7 07       	cpc	r27, r23
    2da6:	d1 f7       	brne	.-12     	; 0x2d9c <_Z12font_getpathhPhi+0x1e>
    2da8:	08 95       	ret

00002daa <_Z12font_getcharcPh>:
    2daa:	ef 92       	push	r14
    2dac:	ff 92       	push	r15
    2dae:	0f 93       	push	r16
    2db0:	1f 93       	push	r17
    2db2:	cf 93       	push	r28
    2db4:	df 93       	push	r29
    2db6:	80 52       	subi	r24, 0x20	; 32
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	ec 01       	movw	r28, r24
    2dbc:	cc 0f       	add	r28, r28
    2dbe:	dd 1f       	adc	r29, r29
    2dc0:	cc 0f       	add	r28, r28
    2dc2:	dd 1f       	adc	r29, r29
    2dc4:	8c 0f       	add	r24, r28
    2dc6:	9d 1f       	adc	r25, r29
    2dc8:	ec 01       	movw	r28, r24
    2dca:	c8 5c       	subi	r28, 0xC8	; 200
    2dcc:	df 4f       	sbci	r29, 0xFF	; 255
    2dce:	8b 01       	movw	r16, r22
    2dd0:	7b 01       	movw	r14, r22
    2dd2:	85 e0       	ldi	r24, 0x05	; 5
    2dd4:	e8 0e       	add	r14, r24
    2dd6:	f1 1c       	adc	r15, r1
    2dd8:	ce 01       	movw	r24, r28
    2dda:	0e 94 66 19 	call	0x32cc	; 0x32cc <eeprom_read_byte>
    2dde:	f8 01       	movw	r30, r16
    2de0:	81 93       	st	Z+, r24
    2de2:	8f 01       	movw	r16, r30
    2de4:	21 96       	adiw	r28, 0x01	; 1
    2de6:	ee 15       	cp	r30, r14
    2de8:	ff 05       	cpc	r31, r15
    2dea:	b1 f7       	brne	.-20     	; 0x2dd8 <_Z12font_getcharcPh+0x2e>
    2dec:	df 91       	pop	r29
    2dee:	cf 91       	pop	r28
    2df0:	1f 91       	pop	r17
    2df2:	0f 91       	pop	r16
    2df4:	ff 90       	pop	r15
    2df6:	ef 90       	pop	r14
    2df8:	08 95       	ret

00002dfa <_Z19font_getbitmappixelccc>:

unsigned char font_getbitmappixel ( char bitmap, char x, char y)
{
    2dfa:	cf 93       	push	r28
    2dfc:	c4 2f       	mov	r28, r20
	uint8_t tmp = eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)x]);
    2dfe:	70 e0       	ldi	r23, 0x00	; 0
    2e00:	9b 01       	movw	r18, r22
    2e02:	48 e0       	ldi	r20, 0x08	; 8
    2e04:	84 9f       	mul	r24, r20
    2e06:	20 0d       	add	r18, r0
    2e08:	31 1d       	adc	r19, r1
    2e0a:	11 24       	eor	r1, r1
    2e0c:	c9 01       	movw	r24, r18
    2e0e:	80 50       	subi	r24, 0x00	; 0
    2e10:	90 40       	sbci	r25, 0x00	; 0
    2e12:	0e 94 66 19 	call	0x32cc	; 0x32cc <eeprom_read_byte>
	return (tmp >> y) & 0x01;
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	02 c0       	rjmp	.+4      	; 0x2e1e <_Z19font_getbitmappixelccc+0x24>
    2e1a:	95 95       	asr	r25
    2e1c:	87 95       	ror	r24
    2e1e:	ca 95       	dec	r28
    2e20:	e2 f7       	brpl	.-8      	; 0x2e1a <_Z19font_getbitmappixelccc+0x20>
}
    2e22:	81 70       	andi	r24, 0x01	; 1
    2e24:	cf 91       	pop	r28
    2e26:	08 95       	ret

00002e28 <_Z19gol_count_neighborsiii>:
		}
	}
}

unsigned char gol_count_neighbors (int x, int y, int z)
{
    2e28:	3f 92       	push	r3
    2e2a:	4f 92       	push	r4
    2e2c:	5f 92       	push	r5
    2e2e:	6f 92       	push	r6
    2e30:	7f 92       	push	r7
    2e32:	8f 92       	push	r8
    2e34:	9f 92       	push	r9
    2e36:	af 92       	push	r10
    2e38:	bf 92       	push	r11
    2e3a:	cf 92       	push	r12
    2e3c:	df 92       	push	r13
    2e3e:	ef 92       	push	r14
    2e40:	ff 92       	push	r15
    2e42:	0f 93       	push	r16
    2e44:	1f 93       	push	r17
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	5c 01       	movw	r10, r24
    2e4c:	6b 01       	movw	r12, r22
	int ix, iy, iz; // offset 1 in each direction in each dimension
	int nx, ny, nz; // neighbours address.
	
	unsigned char neigh = 0; // number of alive neighbours.
	
	for (ix = -1; ix < 2; ix++)
    2e4e:	cf ef       	ldi	r28, 0xFF	; 255
    2e50:	df ef       	ldi	r29, 0xFF	; 255
unsigned char gol_count_neighbors (int x, int y, int z)
{
	int ix, iy, iz; // offset 1 in each direction in each dimension
	int nx, ny, nz; // neighbours address.
	
	unsigned char neigh = 0; // number of alive neighbours.
    2e52:	31 2c       	mov	r3, r1
						nx = x+ix;
						ny = y+iy;
						nz = z+iz;
					}
					
					if ( getvoxel(nx, ny, nz) )
    2e54:	7a 01       	movw	r14, r20
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	e8 1a       	sub	r14, r24
    2e5a:	f1 08       	sbc	r15, r1
				// Your not your own neighbour, exclude 0,0,0, offset.
				if ( !(ix == 0 && iy == 0 && iz == 0) )
				{
					if (GOL_WRAP == 0x01)
					{
						nx = (x+ix)%GOL_X;
    2e5c:	ce 01       	movw	r24, r28
    2e5e:	8a 0d       	add	r24, r10
    2e60:	9b 1d       	adc	r25, r11
    2e62:	87 70       	andi	r24, 0x07	; 7
    2e64:	90 78       	andi	r25, 0x80	; 128
    2e66:	99 23       	and	r25, r25
    2e68:	24 f4       	brge	.+8      	; 0x2e72 <_Z19gol_count_neighborsiii+0x4a>
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	88 6f       	ori	r24, 0xF8	; 248
    2e6e:	9f 6f       	ori	r25, 0xFF	; 255
    2e70:	01 96       	adiw	r24, 0x01	; 1
    2e72:	48 2e       	mov	r4, r24
    2e74:	59 2e       	mov	r5, r25
    2e76:	0f ef       	ldi	r16, 0xFF	; 255
    2e78:	1f ef       	ldi	r17, 0xFF	; 255
						ny = (y+iy)%GOL_Y;
    2e7a:	c8 01       	movw	r24, r16
    2e7c:	8c 0d       	add	r24, r12
    2e7e:	9d 1d       	adc	r25, r13
    2e80:	87 70       	andi	r24, 0x07	; 7
    2e82:	90 78       	andi	r25, 0x80	; 128
    2e84:	99 23       	and	r25, r25
    2e86:	24 f4       	brge	.+8      	; 0x2e90 <_Z19gol_count_neighborsiii+0x68>
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	88 6f       	ori	r24, 0xF8	; 248
    2e8c:	9f 6f       	ori	r25, 0xFF	; 255
    2e8e:	01 96       	adiw	r24, 0x01	; 1
    2e90:	68 2e       	mov	r6, r24
    2e92:	79 2e       	mov	r7, r25
    2e94:	81 2c       	mov	r8, r1
    2e96:	91 2c       	mov	r9, r1
    2e98:	03 c0       	rjmp	.+6      	; 0x2ea0 <_Z19gol_count_neighborsiii+0x78>
    2e9a:	8f ef       	ldi	r24, 0xFF	; 255
    2e9c:	88 1a       	sub	r8, r24
    2e9e:	98 0a       	sbc	r9, r24
		for (iy = -1; iy < 2; iy++)
		{
			for (iz = -1; iz < 2; iz++)
			{
				// Your not your own neighbour, exclude 0,0,0, offset.
				if ( !(ix == 0 && iy == 0 && iz == 0) )
    2ea0:	20 97       	sbiw	r28, 0x00	; 0
    2ea2:	39 f4       	brne	.+14     	; 0x2eb2 <_Z19gol_count_neighborsiii+0x8a>
    2ea4:	01 15       	cp	r16, r1
    2ea6:	11 05       	cpc	r17, r1
    2ea8:	21 f4       	brne	.+8      	; 0x2eb2 <_Z19gol_count_neighborsiii+0x8a>
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	88 16       	cp	r8, r24
    2eae:	91 04       	cpc	r9, r1
    2eb0:	a1 f3       	breq	.-24     	; 0x2e9a <_Z19gol_count_neighborsiii+0x72>
						nx = x+ix;
						ny = y+iy;
						nz = z+iz;
					}
					
					if ( getvoxel(nx, ny, nz) )
    2eb2:	a7 01       	movw	r20, r14
    2eb4:	48 0d       	add	r20, r8
    2eb6:	59 1d       	adc	r21, r9
    2eb8:	47 70       	andi	r20, 0x07	; 7
    2eba:	50 78       	andi	r21, 0x80	; 128
    2ebc:	55 23       	and	r21, r21
    2ebe:	34 f4       	brge	.+12     	; 0x2ecc <_Z19gol_count_neighborsiii+0xa4>
    2ec0:	41 50       	subi	r20, 0x01	; 1
    2ec2:	51 09       	sbc	r21, r1
    2ec4:	48 6f       	ori	r20, 0xF8	; 248
    2ec6:	5f 6f       	ori	r21, 0xFF	; 255
    2ec8:	4f 5f       	subi	r20, 0xFF	; 255
    2eca:	5f 4f       	sbci	r21, 0xFF	; 255
    2ecc:	66 2d       	mov	r22, r6
    2ece:	77 2d       	mov	r23, r7
    2ed0:	84 2d       	mov	r24, r4
    2ed2:	95 2d       	mov	r25, r5
    2ed4:	0e 94 23 01 	call	0x246	; 0x246 <_Z8getvoxeliii>
    2ed8:	81 11       	cpse	r24, r1
						neigh++;
    2eda:	33 94       	inc	r3
	
	for (ix = -1; ix < 2; ix++)
	{
		for (iy = -1; iy < 2; iy++)
		{
			for (iz = -1; iz < 2; iz++)
    2edc:	82 e0       	ldi	r24, 0x02	; 2
    2ede:	88 16       	cp	r8, r24
    2ee0:	91 04       	cpc	r9, r1
    2ee2:	dc f2       	brlt	.-74     	; 0x2e9a <_Z19gol_count_neighborsiii+0x72>
	
	unsigned char neigh = 0; // number of alive neighbours.
	
	for (ix = -1; ix < 2; ix++)
	{
		for (iy = -1; iy < 2; iy++)
    2ee4:	0f 5f       	subi	r16, 0xFF	; 255
    2ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee8:	02 30       	cpi	r16, 0x02	; 2
    2eea:	11 05       	cpc	r17, r1
    2eec:	31 f6       	brne	.-116    	; 0x2e7a <_Z19gol_count_neighborsiii+0x52>
	int ix, iy, iz; // offset 1 in each direction in each dimension
	int nx, ny, nz; // neighbours address.
	
	unsigned char neigh = 0; // number of alive neighbours.
	
	for (ix = -1; ix < 2; ix++)
    2eee:	21 96       	adiw	r28, 0x01	; 1
    2ef0:	c2 30       	cpi	r28, 0x02	; 2
    2ef2:	d1 05       	cpc	r29, r1
    2ef4:	09 f0       	breq	.+2      	; 0x2ef8 <_Z19gol_count_neighborsiii+0xd0>
    2ef6:	b2 cf       	rjmp	.-156    	; 0x2e5c <_Z19gol_count_neighborsiii+0x34>
				}
			}
		}
	}
	return neigh;
}
    2ef8:	83 2d       	mov	r24, r3
    2efa:	df 91       	pop	r29
    2efc:	cf 91       	pop	r28
    2efe:	1f 91       	pop	r17
    2f00:	0f 91       	pop	r16
    2f02:	ff 90       	pop	r15
    2f04:	ef 90       	pop	r14
    2f06:	df 90       	pop	r13
    2f08:	cf 90       	pop	r12
    2f0a:	bf 90       	pop	r11
    2f0c:	af 90       	pop	r10
    2f0e:	9f 90       	pop	r9
    2f10:	8f 90       	pop	r8
    2f12:	7f 90       	pop	r7
    2f14:	6f 90       	pop	r6
    2f16:	5f 90       	pop	r5
    2f18:	4f 90       	pop	r4
    2f1a:	3f 90       	pop	r3
    2f1c:	08 95       	ret

00002f1e <_Z11gol_nextgenv>:
		
	}
}

void gol_nextgen (void)
{
    2f1e:	df 92       	push	r13
    2f20:	ef 92       	push	r14
    2f22:	ff 92       	push	r15
    2f24:	0f 93       	push	r16
    2f26:	1f 93       	push	r17
    2f28:	cf 93       	push	r28
    2f2a:	df 93       	push	r29
	int x,y,z;
	unsigned char neigh;
	
	tmpfill(0x00);
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <_Z7tmpfillh>
	
	for (x = 0; x < GOL_X; x++)
    2f32:	e1 2c       	mov	r14, r1
    2f34:	f1 2c       	mov	r15, r1
    2f36:	00 e0       	ldi	r16, 0x00	; 0
    2f38:	10 e0       	ldi	r17, 0x00	; 0
    2f3a:	c0 e0       	ldi	r28, 0x00	; 0
    2f3c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for (y = 0; y < GOL_Y; y++)
		{
			for (z = 0; z < GOL_Z; z++)
			{
				neigh = gol_count_neighbors(x, y, z);
    2f3e:	ae 01       	movw	r20, r28
    2f40:	b8 01       	movw	r22, r16
    2f42:	c7 01       	movw	r24, r14
    2f44:	0e 94 14 17 	call	0x2e28	; 0x2e28 <_Z19gol_count_neighborsiii>
    2f48:	d8 2e       	mov	r13, r24
				
				// Current voxel is alive.
				if (getvoxel(x,y,z) == 0x01)
    2f4a:	ae 01       	movw	r20, r28
    2f4c:	b8 01       	movw	r22, r16
    2f4e:	c7 01       	movw	r24, r14
    2f50:	0e 94 23 01 	call	0x246	; 0x246 <_Z8getvoxeliii>
    2f54:	88 23       	and	r24, r24
    2f56:	c1 f0       	breq	.+48     	; 0x2f88 <_Z11gol_nextgenv+0x6a>
				{
					if (neigh <= GOL_TERMINATE_LONELY)
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	8d 15       	cp	r24, r13
    2f5c:	30 f0       	brcs	.+12     	; 0x2f6a <_Z11gol_nextgenv+0x4c>
					{
						tmpclrvoxel(x,y,z);
    2f5e:	ae 01       	movw	r20, r28
    2f60:	b8 01       	movw	r22, r16
    2f62:	c7 01       	movw	r24, r14
    2f64:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <_Z11tmpclrvoxeliii>
    2f68:	17 c0       	rjmp	.+46     	; 0x2f98 <_Z11gol_nextgenv+0x7a>
					} else if(neigh >= GOL_TERMINATE_CROWDED)
    2f6a:	83 e0       	ldi	r24, 0x03	; 3
    2f6c:	8d 15       	cp	r24, r13
    2f6e:	30 f4       	brcc	.+12     	; 0x2f7c <_Z11gol_nextgenv+0x5e>
					{
						tmpclrvoxel(x,y,z);
    2f70:	ae 01       	movw	r20, r28
    2f72:	b8 01       	movw	r22, r16
    2f74:	c7 01       	movw	r24, r14
    2f76:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <_Z11tmpclrvoxeliii>
    2f7a:	0e c0       	rjmp	.+28     	; 0x2f98 <_Z11gol_nextgenv+0x7a>
					} else
					{
						tmpsetvoxel(x,y,z);
    2f7c:	ae 01       	movw	r20, r28
    2f7e:	b8 01       	movw	r22, r16
    2f80:	c7 01       	movw	r24, r14
    2f82:	0e 94 af 00 	call	0x15e	; 0x15e <_Z11tmpsetvoxeliii>
    2f86:	08 c0       	rjmp	.+16     	; 0x2f98 <_Z11gol_nextgenv+0x7a>
					}
				// Current voxel is dead.
				} else
				{
					if (neigh >= GOL_CREATE_MIN && neigh <= GOL_CREATE_MAX)
    2f88:	83 e0       	ldi	r24, 0x03	; 3
    2f8a:	d8 12       	cpse	r13, r24
    2f8c:	05 c0       	rjmp	.+10     	; 0x2f98 <_Z11gol_nextgenv+0x7a>
						tmpsetvoxel(x,y,z);
    2f8e:	ae 01       	movw	r20, r28
    2f90:	b8 01       	movw	r22, r16
    2f92:	c7 01       	movw	r24, r14
    2f94:	0e 94 af 00 	call	0x15e	; 0x15e <_Z11tmpsetvoxeliii>
	
	for (x = 0; x < GOL_X; x++)
	{
		for (y = 0; y < GOL_Y; y++)
		{
			for (z = 0; z < GOL_Z; z++)
    2f98:	21 96       	adiw	r28, 0x01	; 1
    2f9a:	c8 30       	cpi	r28, 0x08	; 8
    2f9c:	d1 05       	cpc	r29, r1
    2f9e:	79 f6       	brne	.-98     	; 0x2f3e <_Z11gol_nextgenv+0x20>
	
	tmpfill(0x00);
	
	for (x = 0; x < GOL_X; x++)
	{
		for (y = 0; y < GOL_Y; y++)
    2fa0:	0f 5f       	subi	r16, 0xFF	; 255
    2fa2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa4:	08 30       	cpi	r16, 0x08	; 8
    2fa6:	11 05       	cpc	r17, r1
    2fa8:	41 f6       	brne	.-112    	; 0x2f3a <_Z11gol_nextgenv+0x1c>
	int x,y,z;
	unsigned char neigh;
	
	tmpfill(0x00);
	
	for (x = 0; x < GOL_X; x++)
    2faa:	8f ef       	ldi	r24, 0xFF	; 255
    2fac:	e8 1a       	sub	r14, r24
    2fae:	f8 0a       	sbc	r15, r24
    2fb0:	88 e0       	ldi	r24, 0x08	; 8
    2fb2:	e8 16       	cp	r14, r24
    2fb4:	f1 04       	cpc	r15, r1
    2fb6:	09 f0       	breq	.+2      	; 0x2fba <_Z11gol_nextgenv+0x9c>
    2fb8:	be cf       	rjmp	.-132    	; 0x2f36 <_Z11gol_nextgenv+0x18>
						tmpsetvoxel(x,y,z);
				}
			}
		}
	}
}
    2fba:	df 91       	pop	r29
    2fbc:	cf 91       	pop	r28
    2fbe:	1f 91       	pop	r17
    2fc0:	0f 91       	pop	r16
    2fc2:	ff 90       	pop	r15
    2fc4:	ef 90       	pop	r14
    2fc6:	df 90       	pop	r13
    2fc8:	08 95       	ret

00002fca <_Z17gol_count_changesv>:
	}
	return neigh;
}

int gol_count_changes (void)
{
    2fca:	0f 93       	push	r16
    2fcc:	1f 93       	push	r17
    2fce:	cf 93       	push	r28
    2fd0:	df 93       	push	r29
	int x,y;
	int i = 0;
	
	for (x = 0; x < GOL_X; x++)
    2fd2:	00 e0       	ldi	r16, 0x00	; 0
    2fd4:	10 e0       	ldi	r17, 0x00	; 0
}

int gol_count_changes (void)
{
	int x,y;
	int i = 0;
    2fd6:	a0 e0       	ldi	r26, 0x00	; 0
    2fd8:	b0 e0       	ldi	r27, 0x00	; 0
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
	
	for (x = 0; x < GOL_X; x++)
	{
		for (y = 0; y < GOL_Y; y++)
		{
			if (fb[x][y] != cube[x][y])
    2fde:	b8 01       	movw	r22, r16
    2fe0:	66 0f       	add	r22, r22
    2fe2:	77 1f       	adc	r23, r23
    2fe4:	66 0f       	add	r22, r22
    2fe6:	77 1f       	adc	r23, r23
    2fe8:	66 0f       	add	r22, r22
    2fea:	77 1f       	adc	r23, r23
    2fec:	eb 01       	movw	r28, r22
    2fee:	c3 57       	subi	r28, 0x73	; 115
    2ff0:	df 4f       	sbci	r29, 0xFF	; 255
    2ff2:	63 53       	subi	r22, 0x33	; 51
    2ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	e2 0f       	add	r30, r18
    2ffa:	f3 1f       	adc	r31, r19
    2ffc:	40 81       	ld	r20, Z
    2ffe:	fb 01       	movw	r30, r22
    3000:	e2 0f       	add	r30, r18
    3002:	f3 1f       	adc	r31, r19
    3004:	90 81       	ld	r25, Z
    3006:	49 13       	cpse	r20, r25
				i++;
    3008:	11 96       	adiw	r26, 0x01	; 1
	int x,y;
	int i = 0;
	
	for (x = 0; x < GOL_X; x++)
	{
		for (y = 0; y < GOL_Y; y++)
    300a:	2f 5f       	subi	r18, 0xFF	; 255
    300c:	3f 4f       	sbci	r19, 0xFF	; 255
    300e:	28 30       	cpi	r18, 0x08	; 8
    3010:	31 05       	cpc	r19, r1
    3012:	89 f7       	brne	.-30     	; 0x2ff6 <_Z17gol_count_changesv+0x2c>
int gol_count_changes (void)
{
	int x,y;
	int i = 0;
	
	for (x = 0; x < GOL_X; x++)
    3014:	0f 5f       	subi	r16, 0xFF	; 255
    3016:	1f 4f       	sbci	r17, 0xFF	; 255
    3018:	08 30       	cpi	r16, 0x08	; 8
    301a:	11 05       	cpc	r17, r1
    301c:	f1 f6       	brne	.-68     	; 0x2fda <_Z17gol_count_changesv+0x10>
				i++;
		}
	}
	
	return i;
}
    301e:	cd 01       	movw	r24, r26
    3020:	df 91       	pop	r29
    3022:	cf 91       	pop	r28
    3024:	1f 91       	pop	r17
    3026:	0f 91       	pop	r16
    3028:	08 95       	ret

0000302a <_Z8gol_playij>:

#define GOL_WRAP 0x01


void gol_play (int iterations, uint16_t delay)
{
    302a:	ef 92       	push	r14
    302c:	ff 92       	push	r15
    302e:	0f 93       	push	r16
    3030:	1f 93       	push	r17
    3032:	cf 93       	push	r28
    3034:	df 93       	push	r29
	int i;
	
	for (i = 0; i < iterations; i++)
    3036:	18 16       	cp	r1, r24
    3038:	19 06       	cpc	r1, r25
    303a:	9c f4       	brge	.+38     	; 0x3062 <_Z8gol_playij+0x38>
    303c:	7b 01       	movw	r14, r22
    303e:	8c 01       	movw	r16, r24
    3040:	c0 e0       	ldi	r28, 0x00	; 0
    3042:	d0 e0       	ldi	r29, 0x00	; 0
	{
	
		gol_nextgen();
    3044:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_Z11gol_nextgenv>
		
		if (gol_count_changes() == 0)
    3048:	0e 94 e5 17 	call	0x2fca	; 0x2fca <_Z17gol_count_changesv>
    304c:	89 2b       	or	r24, r25
    304e:	49 f0       	breq	.+18     	; 0x3062 <_Z8gol_playij+0x38>
			return;
		
		flipBuffer();
    3050:	0e 94 b1 04 	call	0x962	; 0x962 <_Z10flipBufferv>
		
		delay_ms(delay);
    3054:	c7 01       	movw	r24, r14
    3056:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z8delay_msj>

void gol_play (int iterations, uint16_t delay)
{
	int i;
	
	for (i = 0; i < iterations; i++)
    305a:	21 96       	adiw	r28, 0x01	; 1
    305c:	0c 17       	cp	r16, r28
    305e:	1d 07       	cpc	r17, r29
    3060:	89 f7       	brne	.-30     	; 0x3044 <_Z8gol_playij+0x1a>
		flipBuffer();
		
		delay_ms(delay);
		
	}
}
    3062:	df 91       	pop	r29
    3064:	cf 91       	pop	r28
    3066:	1f 91       	pop	r17
    3068:	0f 91       	pop	r16
    306a:	ff 90       	pop	r15
    306c:	ef 90       	pop	r14
    306e:	08 95       	ret

00003070 <_Z4initv>:
	    UDR = 0x00; // send an empty byte to indicate powerup.
}

void init()
{
	DDRA = 0xFF;
    3070:	8f ef       	ldi	r24, 0xFF	; 255
    3072:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x1F;
    3074:	9f e1       	ldi	r25, 0x1F	; 31
    3076:	97 bb       	out	0x17, r25	; 23
	DDRC = 0xFF;
    3078:	84 bb       	out	0x14, r24	; 20
	
	DATA_BUS = 0x00;
    307a:	1b ba       	out	0x1b, r1	; 27
	LAYER_SELECT = 0x00;
    307c:	15 ba       	out	0x15, r1	; 21
	
	PORTB |= (1 << LED_PIN);
    307e:	c3 9a       	sbi	0x18, 3	; 24
{
		// Timer 2
		// Frame buffer interrupt
		// 14745600/128/11 = 10472.72 interrupts per second
		// 10472.72/8 = 1309 frames per second
		OCR2 = 10; 	// interrupt at counter = 10
    3080:	8a e0       	ldi	r24, 0x0A	; 10
    3082:	83 bd       	out	0x23, r24	; 35
		TCCR2 |= (1 << CS20) | (1 << CS22); // Prescaler = 128.
    3084:	85 b5       	in	r24, 0x25	; 37
    3086:	85 60       	ori	r24, 0x05	; 5
    3088:	85 bd       	out	0x25, r24	; 37
		TCCR2 |= (1 << WGM21); // CTC mode. Reset counter when OCR2 is reached.
    308a:	85 b5       	in	r24, 0x25	; 37
    308c:	88 60       	ori	r24, 0x08	; 8
    308e:	85 bd       	out	0x25, r24	; 37
		TCNT2 = 0x00;	// initial counter value = 0;
    3090:	14 bc       	out	0x24, r1	; 36
		TIMSK |= (1 << OCIE2); // Enable CTC interrupt
    3092:	89 b7       	in	r24, 0x39	; 57
    3094:	80 68       	ori	r24, 0x80	; 128
    3096:	89 bf       	out	0x39, r24	; 57

inline void initUart()
{
	    // Initiate RS232
	    // USART Baud rate is defined in MYUBRR
	    UBRRH = MYUBRR >> 8;
    3098:	10 bc       	out	0x20, r1	; 32
	    UBRRL = MYUBRR;
    309a:	87 e0       	ldi	r24, 0x07	; 7
    309c:	89 b9       	out	0x09, r24	; 9
	    // bit 7-6      sync/ascyn 00 = async,  01 = sync
	    // bit 5-4      parity 00 = disabled
	    // bit 3        stop bits 0 = 1 bit  1 = 2 bits
	    // bit 2-1      frame length 11 = 8
	    // bit 0        clock polarity = 0
	    UCSRC  = 0b10000110;
    309e:	86 e8       	ldi	r24, 0x86	; 134
    30a0:	80 bd       	out	0x20, r24	; 32
	    // Enable RS232, tx and rx
	    UCSRB = (1<<RXEN)|(1<<TXEN);
    30a2:	88 e1       	ldi	r24, 0x18	; 24
    30a4:	8a b9       	out	0x0a, r24	; 10
	    UDR = 0x00; // send an empty byte to indicate powerup.
    30a6:	1c b8       	out	0x0c, r1	; 12
    30a8:	08 95       	ret

000030aa <main>:
}

void rs232();

int main(void)
{
    30aa:	cf 93       	push	r28
    30ac:	df 93       	push	r29
    30ae:	1f 92       	push	r1
    30b0:	cd b7       	in	r28, 0x3d	; 61
    30b2:	de b7       	in	r29, 0x3e	; 62
	init();
    30b4:	0e 94 38 18 	call	0x3070	; 0x3070 <_Z4initv>
	current_layer = 1;
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
	
	srand(PORTD);
    30be:	82 b3       	in	r24, 0x12	; 18
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <srand>
	
	sei();
    30c6:	78 94       	sei
	
    while (1) 
    {
		//launcher.launch(EffectId::STRINGFLY2);
		//launcher.launch(EffectId::HEART_SPIN);
		for (uint8_t i=0; i<EFFECTS_TOTAL; i++)
    30c8:	10 e0       	ldi	r17, 0x00	; 0
			launcher.launch(static_cast<const EffectId>(i));
    30ca:	61 2f       	mov	r22, r17
    30cc:	ce 01       	movw	r24, r28
    30ce:	01 96       	adiw	r24, 0x01	; 1
    30d0:	0e 94 71 05 	call	0xae2	; 0xae2 <_ZN14EffectLauncher6launchE8EffectId>
	
    while (1) 
    {
		//launcher.launch(EffectId::STRINGFLY2);
		//launcher.launch(EffectId::HEART_SPIN);
		for (uint8_t i=0; i<EFFECTS_TOTAL; i++)
    30d4:	1f 5f       	subi	r17, 0xFF	; 255
    30d6:	1a 31       	cpi	r17, 0x1A	; 26
    30d8:	b9 f3       	breq	.-18     	; 0x30c8 <main+0x1e>
    30da:	f7 cf       	rjmp	.-18     	; 0x30ca <main+0x20>

000030dc <__vector_4>:
 * 6) Increment the current_layer variable, so the next layer is
 *    drawn the next time this function runs.
*/

ISR(TIMER2_COMP_vect)
{
    30dc:	1f 92       	push	r1
    30de:	0f 92       	push	r0
    30e0:	0f b6       	in	r0, 0x3f	; 63
    30e2:	0f 92       	push	r0
    30e4:	11 24       	eor	r1, r1
    30e6:	2f 93       	push	r18
    30e8:	4f 93       	push	r20
    30ea:	5f 93       	push	r21
    30ec:	8f 93       	push	r24
    30ee:	9f 93       	push	r25
    30f0:	af 93       	push	r26
    30f2:	bf 93       	push	r27
    30f4:	ef 93       	push	r30
    30f6:	ff 93       	push	r31
	micros++;
    30f8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <micros>
    30fc:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <micros+0x1>
    3100:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <micros+0x2>
    3104:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <micros+0x3>
    3108:	01 96       	adiw	r24, 0x01	; 1
    310a:	a1 1d       	adc	r26, r1
    310c:	b1 1d       	adc	r27, r1
    310e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <micros>
    3112:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <micros+0x1>
    3116:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <micros+0x2>
    311a:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <micros+0x3>
	
	int i;

	LAYER_SELECT = 0x00; // Turn all cathode layers off. (all transistors off)
    311e:	15 ba       	out	0x15, r1	; 21
	OE_PORT |= OE_MASK; // Set OE high, disabling all outputs on latch array
    3120:	c3 9a       	sbi	0x18, 3	; 24
    3122:	81 e0       	ldi	r24, 0x01	; 1

	// Loop through all 8 bytes of data in the current layer
	// and latch it onto the cube.
	for (i = 0; i < 8; i++)
    3124:	40 e0       	ldi	r20, 0x00	; 0
    3126:	50 e0       	ldi	r21, 0x00	; 0
	{
		// Set the data on the data-bus of the latch array.
		PORTA = cube[current_layer][i];
    3128:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <__data_end>
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	ee 0f       	add	r30, r30
    3130:	ff 1f       	adc	r31, r31
    3132:	ee 0f       	add	r30, r30
    3134:	ff 1f       	adc	r31, r31
    3136:	ee 0f       	add	r30, r30
    3138:	ff 1f       	adc	r31, r31
    313a:	e3 53       	subi	r30, 0x33	; 51
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	e4 0f       	add	r30, r20
    3140:	f5 1f       	adc	r31, r21
    3142:	90 81       	ld	r25, Z
    3144:	9b bb       	out	0x1b, r25	; 27
		// Increment the latch address chip, 74HC138, to create
		// a rising edge (LOW to HIGH) on the current latch.
		LATCH_ADDR = (LATCH_ADDR & LATCH_MASK_INV) | (LATCH_MASK & (i+1));
    3146:	98 b3       	in	r25, 0x18	; 24
    3148:	98 7f       	andi	r25, 0xF8	; 248
    314a:	28 2f       	mov	r18, r24
    314c:	27 70       	andi	r18, 0x07	; 7
    314e:	92 2b       	or	r25, r18
    3150:	98 bb       	out	0x18, r25	; 24
	LAYER_SELECT = 0x00; // Turn all cathode layers off. (all transistors off)
	OE_PORT |= OE_MASK; // Set OE high, disabling all outputs on latch array

	// Loop through all 8 bytes of data in the current layer
	// and latch it onto the cube.
	for (i = 0; i < 8; i++)
    3152:	4f 5f       	subi	r20, 0xFF	; 255
    3154:	5f 4f       	sbci	r21, 0xFF	; 255
    3156:	8f 5f       	subi	r24, 0xFF	; 255
    3158:	89 30       	cpi	r24, 0x09	; 9
    315a:	31 f7       	brne	.-52     	; 0x3128 <__vector_4+0x4c>
		// Increment the latch address chip, 74HC138, to create
		// a rising edge (LOW to HIGH) on the current latch.
		LATCH_ADDR = (LATCH_ADDR & LATCH_MASK_INV) | (LATCH_MASK & (i+1));
	}

	OE_PORT &= ~OE_MASK; // Set OE low, enabling outputs on the latch array
    315c:	c3 98       	cbi	0x18, 3	; 24
	LAYER_SELECT = (0x01 << current_layer); // Transistor ON for current layer
    315e:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <__data_end>
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	02 c0       	rjmp	.+4      	; 0x316c <__vector_4+0x90>
    3168:	88 0f       	add	r24, r24
    316a:	99 1f       	adc	r25, r25
    316c:	2a 95       	dec	r18
    316e:	e2 f7       	brpl	.-8      	; 0x3168 <__vector_4+0x8c>
    3170:	85 bb       	out	0x15, r24	; 21

	// Increment the curren_layer counter so that the next layer is
	// drawn the next time this function runs.
	current_layer++;
    3172:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
    3176:	8f 5f       	subi	r24, 0xFF	; 255
    3178:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
	// We want to count from 0-7, so set it to 0 when it reaches 8.
	if (current_layer == 8)
    317c:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
    3180:	88 30       	cpi	r24, 0x08	; 8
    3182:	11 f4       	brne	.+4      	; 0x3188 <__vector_4+0xac>
		current_layer = 0;
    3184:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__data_end>
}
    3188:	ff 91       	pop	r31
    318a:	ef 91       	pop	r30
    318c:	bf 91       	pop	r27
    318e:	af 91       	pop	r26
    3190:	9f 91       	pop	r25
    3192:	8f 91       	pop	r24
    3194:	5f 91       	pop	r21
    3196:	4f 91       	pop	r20
    3198:	2f 91       	pop	r18
    319a:	0f 90       	pop	r0
    319c:	0f be       	out	0x3f, r0	; 63
    319e:	0f 90       	pop	r0
    31a0:	1f 90       	pop	r1
    31a2:	18 95       	reti

000031a4 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    31a4:	1f 92       	push	r1
    31a6:	0f 92       	push	r0
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	0f 92       	push	r0
    31ac:	11 24       	eor	r1, r1
	
}
    31ae:	0f 90       	pop	r0
    31b0:	0f be       	out	0x3f, r0	; 63
    31b2:	0f 90       	pop	r0
    31b4:	1f 90       	pop	r1
    31b6:	18 95       	reti

000031b8 <__divmodhi4>:
    31b8:	97 fb       	bst	r25, 7
    31ba:	07 2e       	mov	r0, r23
    31bc:	16 f4       	brtc	.+4      	; 0x31c2 <__divmodhi4+0xa>
    31be:	00 94       	com	r0
    31c0:	07 d0       	rcall	.+14     	; 0x31d0 <__divmodhi4_neg1>
    31c2:	77 fd       	sbrc	r23, 7
    31c4:	09 d0       	rcall	.+18     	; 0x31d8 <__divmodhi4_neg2>
    31c6:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__udivmodhi4>
    31ca:	07 fc       	sbrc	r0, 7
    31cc:	05 d0       	rcall	.+10     	; 0x31d8 <__divmodhi4_neg2>
    31ce:	3e f4       	brtc	.+14     	; 0x31de <__divmodhi4_exit>

000031d0 <__divmodhi4_neg1>:
    31d0:	90 95       	com	r25
    31d2:	81 95       	neg	r24
    31d4:	9f 4f       	sbci	r25, 0xFF	; 255
    31d6:	08 95       	ret

000031d8 <__divmodhi4_neg2>:
    31d8:	70 95       	com	r23
    31da:	61 95       	neg	r22
    31dc:	7f 4f       	sbci	r23, 0xFF	; 255

000031de <__divmodhi4_exit>:
    31de:	08 95       	ret

000031e0 <__tablejump2__>:
    31e0:	ee 0f       	add	r30, r30
    31e2:	ff 1f       	adc	r31, r31
    31e4:	05 90       	lpm	r0, Z+
    31e6:	f4 91       	lpm	r31, Z
    31e8:	e0 2d       	mov	r30, r0
    31ea:	09 94       	ijmp

000031ec <__udivmodhi4>:
    31ec:	aa 1b       	sub	r26, r26
    31ee:	bb 1b       	sub	r27, r27
    31f0:	51 e1       	ldi	r21, 0x11	; 17
    31f2:	07 c0       	rjmp	.+14     	; 0x3202 <__udivmodhi4_ep>

000031f4 <__udivmodhi4_loop>:
    31f4:	aa 1f       	adc	r26, r26
    31f6:	bb 1f       	adc	r27, r27
    31f8:	a6 17       	cp	r26, r22
    31fa:	b7 07       	cpc	r27, r23
    31fc:	10 f0       	brcs	.+4      	; 0x3202 <__udivmodhi4_ep>
    31fe:	a6 1b       	sub	r26, r22
    3200:	b7 0b       	sbc	r27, r23

00003202 <__udivmodhi4_ep>:
    3202:	88 1f       	adc	r24, r24
    3204:	99 1f       	adc	r25, r25
    3206:	5a 95       	dec	r21
    3208:	a9 f7       	brne	.-22     	; 0x31f4 <__udivmodhi4_loop>
    320a:	80 95       	com	r24
    320c:	90 95       	com	r25
    320e:	bc 01       	movw	r22, r24
    3210:	cd 01       	movw	r24, r26
    3212:	08 95       	ret

00003214 <do_rand>:
    3214:	8f 92       	push	r8
    3216:	9f 92       	push	r9
    3218:	af 92       	push	r10
    321a:	bf 92       	push	r11
    321c:	cf 92       	push	r12
    321e:	df 92       	push	r13
    3220:	ef 92       	push	r14
    3222:	ff 92       	push	r15
    3224:	cf 93       	push	r28
    3226:	df 93       	push	r29
    3228:	ec 01       	movw	r28, r24
    322a:	68 81       	ld	r22, Y
    322c:	79 81       	ldd	r23, Y+1	; 0x01
    322e:	8a 81       	ldd	r24, Y+2	; 0x02
    3230:	9b 81       	ldd	r25, Y+3	; 0x03
    3232:	61 15       	cp	r22, r1
    3234:	71 05       	cpc	r23, r1
    3236:	81 05       	cpc	r24, r1
    3238:	91 05       	cpc	r25, r1
    323a:	21 f4       	brne	.+8      	; 0x3244 <do_rand+0x30>
    323c:	64 e2       	ldi	r22, 0x24	; 36
    323e:	79 ed       	ldi	r23, 0xD9	; 217
    3240:	8b e5       	ldi	r24, 0x5B	; 91
    3242:	97 e0       	ldi	r25, 0x07	; 7
    3244:	2d e1       	ldi	r18, 0x1D	; 29
    3246:	33 ef       	ldi	r19, 0xF3	; 243
    3248:	41 e0       	ldi	r20, 0x01	; 1
    324a:	50 e0       	ldi	r21, 0x00	; 0
    324c:	0e 94 6e 19 	call	0x32dc	; 0x32dc <__divmodsi4>
    3250:	49 01       	movw	r8, r18
    3252:	5a 01       	movw	r10, r20
    3254:	9b 01       	movw	r18, r22
    3256:	ac 01       	movw	r20, r24
    3258:	a7 ea       	ldi	r26, 0xA7	; 167
    325a:	b1 e4       	ldi	r27, 0x41	; 65
    325c:	0e 94 8d 19 	call	0x331a	; 0x331a <__muluhisi3>
    3260:	6b 01       	movw	r12, r22
    3262:	7c 01       	movw	r14, r24
    3264:	ac ee       	ldi	r26, 0xEC	; 236
    3266:	b4 ef       	ldi	r27, 0xF4	; 244
    3268:	a5 01       	movw	r20, r10
    326a:	94 01       	movw	r18, r8
    326c:	0e 94 9b 19 	call	0x3336	; 0x3336 <__mulohisi3>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	8c 0d       	add	r24, r12
    3276:	9d 1d       	adc	r25, r13
    3278:	ae 1d       	adc	r26, r14
    327a:	bf 1d       	adc	r27, r15
    327c:	b7 ff       	sbrs	r27, 7
    327e:	03 c0       	rjmp	.+6      	; 0x3286 <do_rand+0x72>
    3280:	01 97       	sbiw	r24, 0x01	; 1
    3282:	a1 09       	sbc	r26, r1
    3284:	b0 48       	sbci	r27, 0x80	; 128
    3286:	88 83       	st	Y, r24
    3288:	99 83       	std	Y+1, r25	; 0x01
    328a:	aa 83       	std	Y+2, r26	; 0x02
    328c:	bb 83       	std	Y+3, r27	; 0x03
    328e:	9f 77       	andi	r25, 0x7F	; 127
    3290:	df 91       	pop	r29
    3292:	cf 91       	pop	r28
    3294:	ff 90       	pop	r15
    3296:	ef 90       	pop	r14
    3298:	df 90       	pop	r13
    329a:	cf 90       	pop	r12
    329c:	bf 90       	pop	r11
    329e:	af 90       	pop	r10
    32a0:	9f 90       	pop	r9
    32a2:	8f 90       	pop	r8
    32a4:	08 95       	ret

000032a6 <rand_r>:
    32a6:	0e 94 0a 19 	call	0x3214	; 0x3214 <do_rand>
    32aa:	08 95       	ret

000032ac <rand>:
    32ac:	80 e6       	ldi	r24, 0x60	; 96
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	0e 94 0a 19 	call	0x3214	; 0x3214 <do_rand>
    32b4:	08 95       	ret

000032b6 <srand>:
    32b6:	a0 e0       	ldi	r26, 0x00	; 0
    32b8:	b0 e0       	ldi	r27, 0x00	; 0
    32ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    32be:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
    32c2:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
    32c6:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
    32ca:	08 95       	ret

000032cc <eeprom_read_byte>:
    32cc:	e1 99       	sbic	0x1c, 1	; 28
    32ce:	fe cf       	rjmp	.-4      	; 0x32cc <eeprom_read_byte>
    32d0:	9f bb       	out	0x1f, r25	; 31
    32d2:	8e bb       	out	0x1e, r24	; 30
    32d4:	e0 9a       	sbi	0x1c, 0	; 28
    32d6:	99 27       	eor	r25, r25
    32d8:	8d b3       	in	r24, 0x1d	; 29
    32da:	08 95       	ret

000032dc <__divmodsi4>:
    32dc:	05 2e       	mov	r0, r21
    32de:	97 fb       	bst	r25, 7
    32e0:	1e f4       	brtc	.+6      	; 0x32e8 <__divmodsi4+0xc>
    32e2:	00 94       	com	r0
    32e4:	0e 94 85 19 	call	0x330a	; 0x330a <__negsi2>
    32e8:	57 fd       	sbrc	r21, 7
    32ea:	07 d0       	rcall	.+14     	; 0x32fa <__divmodsi4_neg2>
    32ec:	0e 94 a0 19 	call	0x3340	; 0x3340 <__udivmodsi4>
    32f0:	07 fc       	sbrc	r0, 7
    32f2:	03 d0       	rcall	.+6      	; 0x32fa <__divmodsi4_neg2>
    32f4:	4e f4       	brtc	.+18     	; 0x3308 <__divmodsi4_exit>
    32f6:	0c 94 85 19 	jmp	0x330a	; 0x330a <__negsi2>

000032fa <__divmodsi4_neg2>:
    32fa:	50 95       	com	r21
    32fc:	40 95       	com	r20
    32fe:	30 95       	com	r19
    3300:	21 95       	neg	r18
    3302:	3f 4f       	sbci	r19, 0xFF	; 255
    3304:	4f 4f       	sbci	r20, 0xFF	; 255
    3306:	5f 4f       	sbci	r21, 0xFF	; 255

00003308 <__divmodsi4_exit>:
    3308:	08 95       	ret

0000330a <__negsi2>:
    330a:	90 95       	com	r25
    330c:	80 95       	com	r24
    330e:	70 95       	com	r23
    3310:	61 95       	neg	r22
    3312:	7f 4f       	sbci	r23, 0xFF	; 255
    3314:	8f 4f       	sbci	r24, 0xFF	; 255
    3316:	9f 4f       	sbci	r25, 0xFF	; 255
    3318:	08 95       	ret

0000331a <__muluhisi3>:
    331a:	0e 94 c2 19 	call	0x3384	; 0x3384 <__umulhisi3>
    331e:	a5 9f       	mul	r26, r21
    3320:	90 0d       	add	r25, r0
    3322:	b4 9f       	mul	r27, r20
    3324:	90 0d       	add	r25, r0
    3326:	a4 9f       	mul	r26, r20
    3328:	80 0d       	add	r24, r0
    332a:	91 1d       	adc	r25, r1
    332c:	11 24       	eor	r1, r1
    332e:	08 95       	ret

00003330 <__mulshisi3>:
    3330:	b7 ff       	sbrs	r27, 7
    3332:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__muluhisi3>

00003336 <__mulohisi3>:
    3336:	0e 94 8d 19 	call	0x331a	; 0x331a <__muluhisi3>
    333a:	82 1b       	sub	r24, r18
    333c:	93 0b       	sbc	r25, r19
    333e:	08 95       	ret

00003340 <__udivmodsi4>:
    3340:	a1 e2       	ldi	r26, 0x21	; 33
    3342:	1a 2e       	mov	r1, r26
    3344:	aa 1b       	sub	r26, r26
    3346:	bb 1b       	sub	r27, r27
    3348:	fd 01       	movw	r30, r26
    334a:	0d c0       	rjmp	.+26     	; 0x3366 <__udivmodsi4_ep>

0000334c <__udivmodsi4_loop>:
    334c:	aa 1f       	adc	r26, r26
    334e:	bb 1f       	adc	r27, r27
    3350:	ee 1f       	adc	r30, r30
    3352:	ff 1f       	adc	r31, r31
    3354:	a2 17       	cp	r26, r18
    3356:	b3 07       	cpc	r27, r19
    3358:	e4 07       	cpc	r30, r20
    335a:	f5 07       	cpc	r31, r21
    335c:	20 f0       	brcs	.+8      	; 0x3366 <__udivmodsi4_ep>
    335e:	a2 1b       	sub	r26, r18
    3360:	b3 0b       	sbc	r27, r19
    3362:	e4 0b       	sbc	r30, r20
    3364:	f5 0b       	sbc	r31, r21

00003366 <__udivmodsi4_ep>:
    3366:	66 1f       	adc	r22, r22
    3368:	77 1f       	adc	r23, r23
    336a:	88 1f       	adc	r24, r24
    336c:	99 1f       	adc	r25, r25
    336e:	1a 94       	dec	r1
    3370:	69 f7       	brne	.-38     	; 0x334c <__udivmodsi4_loop>
    3372:	60 95       	com	r22
    3374:	70 95       	com	r23
    3376:	80 95       	com	r24
    3378:	90 95       	com	r25
    337a:	9b 01       	movw	r18, r22
    337c:	ac 01       	movw	r20, r24
    337e:	bd 01       	movw	r22, r26
    3380:	cf 01       	movw	r24, r30
    3382:	08 95       	ret

00003384 <__umulhisi3>:
    3384:	a2 9f       	mul	r26, r18
    3386:	b0 01       	movw	r22, r0
    3388:	b3 9f       	mul	r27, r19
    338a:	c0 01       	movw	r24, r0
    338c:	a3 9f       	mul	r26, r19
    338e:	70 0d       	add	r23, r0
    3390:	81 1d       	adc	r24, r1
    3392:	11 24       	eor	r1, r1
    3394:	91 1d       	adc	r25, r1
    3396:	b2 9f       	mul	r27, r18
    3398:	70 0d       	add	r23, r0
    339a:	81 1d       	adc	r24, r1
    339c:	11 24       	eor	r1, r1
    339e:	91 1d       	adc	r25, r1
    33a0:	08 95       	ret

000033a2 <_exit>:
    33a2:	f8 94       	cli

000033a4 <__stop_program>:
    33a4:	ff cf       	rjmp	.-2      	; 0x33a4 <__stop_program>
